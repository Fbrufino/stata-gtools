
  ___  ____  ____  ____  ____ (R)
 /__    /   ____/   /   ____/
___/   /   /___/   /   /___/   14.2   Copyright 1985-2015 StataCorp LLC
  Statistics/Data Analysis            StataCorp
                                      4905 Lakeway Drive
     MP - Parallel Edition            College Station, Texas 77845 USA
                                      800-STATA-PC        http://www.stata.com
                                      979-696-4600        stata@stata.com
                                      979-696-4601 (fax)

18-user 8-core Stata network perpetual license:
       Serial number:  501406201034
         Licensed to:  National Bureau of Economic Research
                       Cambridge, MA 02138

Notes:
      1.  Stata is running in batch mode.
      2.  Unicode is supported; see help unicode_advice.
      3.  More than 2 billion observations are allowed; see help obs_advice.
      4.  Maximum number of variables is set to 5000; see help set_maxvar.


running /disk/admin/Linux-local/stata14/sysprofile.do ...

. do gtools_tests.do 

. * ---------------------------------------------------------------------------
> -
. * Project: gtools
. * Program: gtools_tests.do
. * Author:  Mauricio Caceres Bravo <mauricio.caceres.bravo@gmail.com>
. * Created: Tue May 16 07:23:02 EDT 2017
. * Updated: Mon Nov  6 01:54:16 EST 2017
. * Purpose: Unit tests for gtools
. * Version: 0.9.4
. * Manual:  help gtools
. 
. * Stata start-up options
. * ----------------------
. 
. version 13

. clear all

. set more off

. set varabbrev off

. set seed 1729

. set linesize 255

. 
. * Main program wrapper
. * --------------------
. 
. program main
  1.     syntax, [NOIsily *]
  2. 
. bench_gquantiles,  n(1000000) bench(10)  `noisily' oncollision(error)
  3. exit 17999
  4. 
.     if ( inlist("`c(os)'", "MacOSX") | strpos("`c(machine_type)'", "Mac") ) {
  5.         local c_os_ macosx
  6.     }
  7.     else {
  8.         local c_os_: di lower("`c(os)'")
  9.     }
 10.     log using gtools_tests_`c_os_'.log, text replace name(gtools_tests)
 11. 
.     * Set up
.     * ------
. 
.     local  progname tests
 12.     local  start_time "$S_TIME $S_DATE"
 13. 
.     di _n(1)
 14.     di "Start:        `start_time'"
 15.     di "Options:      `options'"
 16.     di "OS:           `c(os)'"
 17.     di "Machine Type: `c(machine_type)'"
 18. 
.     * Run the things
.     * --------------
. 
.     cap noi {
 19.         * qui do test_gcollapse.do
.         * qui do test_gcontract.do
.         * qui do test_gegen.do
.         * qui do test_gisid.do
.         * qui do test_glevelsof.do
.         * qui do test_gtoplevelsof.do
.         * qui do test_gunique.do
.         * qui do test_hashsort.do
. 
.         if ( `:list posof "dependencies" in options' ) {
 20.             cap ssc install ralpha
 21.             cap ssc install ftools
 22.             cap ssc install unique
 23.             cap ssc install distinct
 24.             cap ssc install moremata
 25.         }
 26. 
.         if ( `:list posof "basic_checks" in options' ) {
 27. 
.             di _n(1)
 28. 
.             unit_test, `noisily' test(checks_corners, `noisily' oncollision(error))
 29. 
.             di ""
 30.             di "-------------------------------------"
 31.             di "Basic unit-tests $S_TIME $S_DATE"
 32.             di "-------------------------------------"
 33. 
.             unit_test, `noisily' test(checks_gquantiles,  `noisily' oncollision(error))
 34.             unit_test, `noisily' test(checks_gcollapse,   `noisily' oncollision(error))
 35.             unit_test, `noisily' test(checks_gcontract,   `noisily' oncollision(error))
 36.             unit_test, `noisily' test(checks_gegen,       `noisily' oncollision(error))
 37.             unit_test, `noisily' test(checks_isid,        `noisily' oncollision(error))
 38.             unit_test, `noisily' test(checks_levelsof,    `noisily' oncollision(error))
 39.             unit_test, `noisily' test(checks_toplevelsof, `noisily' oncollision(error))
 40.             unit_test, `noisily' test(checks_unique,      `noisily' oncollision(error))
 41.             unit_test, `noisily' test(checks_hashsort,    `noisily' oncollision(error))
 42.         }
 43. 
.         if ( `:list posof "comparisons" in options' ) {
 44. 
.             di ""
 45.             di "-----------------------------------------------------------"
 46.             di "Consistency checks (v native commands) $S_TIME $S_DATE"
 47.             di "-----------------------------------------------------------"
 48. 
.             compare_gquantiles,  `noisily' oncollision(error)
 49.             compare_gcollapse,   `noisily' oncollision(error) tol(1e-4)
 50.             compare_gcontract,   `noisily' oncollision(error)
 51.             compare_egen,        `noisily' oncollision(error)
 52.             compare_isid,        `noisily' oncollision(error)
 53.             compare_levelsof,    `noisily' oncollision(error)
 54.             compare_toplevelsof, `noisily' oncollision(error) tol(1e-4)
 55.             compare_unique,      `noisily' oncollision(error) distinct
 56.             compare_hashsort,    `noisily' oncollision(error)
 57.         }
 58. 
.         if ( `:list posof "bench_test" in options' ) {
 59.             bench_gquantiles,  n(1000) bench(1) `noisily' oncollision(error)
 60.             bench_contract,    n(1000) bench(1) `noisily' oncollision(error)
 61.             bench_egen,        n(1000) bench(1) `noisily' oncollision(error)
 62.             bench_isid,        n(1000) bench(1) `noisily' oncollision(error)
 63.             bench_levelsof,    n(100)  bench(1) `noisily' oncollision(error)
 64.             bench_toplevelsof, n(1000) bench(1) `noisily' oncollision(error)
 65.             bench_unique,      n(1000) bench(1) `noisily' oncollision(error)
 66.             bench_unique,      n(1000) bench(1) `noisily' oncollision(error) distinct
 67.             * bench_unique,      n(1000) bench(1) `noisily' oncollision(error) distinct joint distunique
.             bench_hashsort,    n(1000) bench(1) `noisily' oncollision(error) benchmode
 68. 
.             bench_collapse, collapse fcollapse bench(10)  n(100)    style(sum)    vars(15) oncollision(error)
 69.             bench_collapse, collapse fcollapse bench(10)  n(100)    style(ftools) vars(6)  oncollision(error)
 70.             bench_collapse, collapse fcollapse bench(10)  n(100)    style(full)   vars(1)  oncollision(error)
 71. 
.             bench_collapse, collapse fcollapse bench(0.05) n(10000) style(sum)    vars(15) oncollision(error)
 72.             bench_collapse, collapse fcollapse bench(0.05) n(10000) style(ftools) vars(6)  oncollision(error)
 73.             bench_collapse, collapse fcollapse bench(0.05) n(10000) style(full)   vars(1)  oncollision(error)
 74.         }
 75. 
.         if ( `:list posof "bench_full" in options' ) {
 76.             bench_gquantiles,  n(1000000) bench(10)  `noisily' oncollision(error)
 77.             bench_contract,    n(10000)   bench(10)  `noisily' oncollision(error)
 78.             bench_egen,        n(10000)   bench(10)  `noisily' oncollision(error)
 79.             bench_isid,        n(10000)   bench(10)  `noisily' oncollision(error)
 80.             bench_levelsof,    n(100)     bench(100) `noisily' oncollision(error)
 81.             bench_toplevelsof, n(10000)   bench(10) `noisily' oncollision(error)
 82.             bench_unique,      n(10000)   bench(10)  `noisily' oncollision(error)
 83.             bench_unique,      n(10000)   bench(10)  `noisily' oncollision(error) distinct
 84.             * bench_unique,      n(10000)   bench(10)  `noisily' oncollision(error) distinct joint distunique
.             bench_hashsort,    n(10000)   bench(10)  `noisily' oncollision(error) benchmode
 85. 
.             bench_collapse, collapse fcollapse bench(1000) n(100)    style(sum)    vars(15) oncollision(error)
 86.             bench_collapse, collapse fcollapse bench(1000) n(100)    style(ftools) vars(6)  oncollision(error)
 87.             bench_collapse, collapse fcollapse bench(1000) n(100)    style(full)   vars(1)  oncollision(error)
 88. 
.             bench_collapse, collapse fcollapse bench(0.1)  n(1000000) style(sum)    vars(15) oncollision(error)
 89.             bench_collapse, collapse fcollapse bench(0.1)  n(1000000) style(ftools) vars(6)  oncollision(error)
 90.             bench_collapse, collapse fcollapse bench(0.1)  n(1000000) style(full)   vars(1)  oncollision(error)
 91.         }
 92.     }
 93.     local rc = _rc
 94. 
.     exit_message, rc(`rc') progname(`progname') start_time(`start_time') `capture'
 95.     log close gtools_tests
 96.     exit `rc'
 97. end

. 
. * ---------------------------------------------------------------------
. * Aux programs
. 
. capture program drop exit_message

. program exit_message
  1.     syntax, rc(int) progname(str) start_time(str) [CAPture]
  2.     local end_time "$S_TIME $S_DATE"
  3.     local time     "Start: `start_time'" _n(1) "End: `end_time'"
  4.     di ""
  5.     if (`rc' == 0) {
  6.         di "End: $S_TIME $S_DATE"
  7.         local paux      ran
  8.         local message "`progname' finished running" _n(2) "`time'"
  9.         local subject "`progname' `paux'"
 10.     }
 11.     else if ("`capture'" == "") {
 12.         di "WARNING: $S_TIME $S_DATE"
 13.         local paux ran with non-0 exit status
 14.         local message "`progname' ran but Stata gave error code r(`rc')" _n(2) "`time'"
 15.         local subject "`progname' `paux'"
 16.     }
 17.     else {
 18.         di "ERROR: $S_TIME $S_DATE"
 19.         local paux ran with errors
 20.         local message "`progname' stopped with error code r(`rc')" _n(2) "`time'"
 21.         local subject "`progname' `paux'"
 22.     }
 23.     di "`subject'"
 24.     di ""
 25.     di "`message'"
 26. end

. 
. * Wrapper for easy timer use
. cap program drop mytimer

. program mytimer, rclass
  1.     * args number what step
.     syntax anything, [minutes ts]
  2. 
.     tokenize `anything'
  3.     local number `1'
  4.     local what   `2'
  5.     local step   `3'
  6. 
.     if ("`what'" == "end") {
  7.         qui {
  8.             timer clear `number'
  9.             timer off   `number'
 10.         }
 11.         if ("`ts'" == "ts") mytimer_ts `step'
 12.     }
 13.     else if ("`what'" == "info") {
 14.         qui {
 15.             timer off `number'
 16.             timer list `number'
 17.         }
 18.         local seconds = r(t`number')
 19.         local prints  `:di trim("`:di %21.2gc `seconds''")' seconds
 20.         if ("`minutes'" != "") {
 21.             local minutes = `seconds' / 60
 22.             local prints  `:di trim("`:di %21.3gc `minutes''")' minutes
 23.         }
 24.         mytimer_ts Step `step' took `prints'
 25.         qui {
 26.             timer clear `number'
 27.             timer on    `number'
 28.         }
 29.     }
 30.     else {
 31.         qui {
 32.             timer clear `number'
 33.             timer on    `number'
 34.             timer off   `number'
 35.             timer list  `number'
 36.             timer on    `number'
 37.         }
 38.         if ("`ts'" == "ts") mytimer_ts `step'
 39.     }
 40. end

. 
. capture program drop mytimer_ts

. program mytimer_ts
  1.     display _n(1) "{hline 79}"
  2.     if ("`0'" != "") display `"`0'"'
  3.     display `"        Base: $S_FN"'
  4.     display  "        In memory: `:di trim("`:di %21.0gc _N'")' observations"
  5.     display  "        Timestamp: $S_TIME $S_DATE"
  6.     display  "{hline 79}" _n(1)
  7. end

. 
. capture program drop unit_test

. program unit_test
  1.     syntax, test(str) [NOIsily tab(int 4)]
  2.     local tabs `""'
  3.     forvalues i = 1 / `tab' {
  4.         local tabs "`tabs' "
  5.     }
  6.     cap `noisily' `test'
  7.     if ( _rc ) {
  8.         di as error `"`tabs'test(failed): `test'"'
  9.         exit _rc
 10.     }
 11.     else di as txt `"`tabs'test(passed): `test'"'
 12. end

. 
. capture program drop gen_data

. program gen_data
  1.     syntax, [n(int 100) random(int 0) binary(int 0) double skipstr]
  2.     clear
  3.     set obs `n'
  4. 
.     * Random strings
.     * --------------
. 
.     if ( "`skipstr'" == "" ) {
  5.         qui ralpha str_long,  l(5)
  6.         qui ralpha str_mid,   l(3)
  7.         qui ralpha str_short, l(1)
  8.     }
  9. 
.     * Generate does-what-it-says-on-the-tin variables
.     * -----------------------------------------------
. 
.     if ( "`skipstr'" == "" ) {
 10.         gen str32 str_32   = str_long + "this is some string padding"
 11.         gen str12 str_12   = str_mid  + "padding" + str_short + str_short
 12.         gen str4  str_4    = str_mid  + str_short
 13.     }
 14. 
.     gen long   int1  = floor(uniform() * 1000)
 15.     gen long   int2  = floor(rnormal())
 16.     gen double int3  = floor(rnormal() * 5 + 10)
 17. 
.     gen double double1 = uniform() * 1000
 18.     gen double double2 = rnormal()
 19.     gen double double3 = rnormal() * 5 + 10
 20. 
.     * Mix up string lengths
.     * ---------------------
. 
.     if ( "`skipstr'" == "" ) {
 21.         replace str_32 = str_mid + str_short if mod(_n, 4) == 0
 22.         replace str_12 = str_short + str_mid if mod(_n, 4) == 2
 23.     }
 24. 
.     * Insert some blanks
.     * ------------------
. 
.     if ( "`skipstr'" == "" ) {
 25.         replace str_32 = "            " in 1 / 10
 26.         replace str_12 = "   "          in 1 / 10
 27.         replace str_4  = " "            in 1 / 10
 28. 
.         replace str_32 = "            " if mod(_n, 21) == 0
 29.         replace str_12 = "   "          if mod(_n, 34) == 0
 30.         replace str_4  = " "            if mod(_n, 55) == 0
 31.     }
 32. 
.     * Missing values
.     * --------------
. 
.     if ( "`skipstr'" == "" ) {
 33.         replace str_32 = "" if mod(_n, 10) ==  0
 34.         replace str_12 = "" if mod(_n, 20) ==  0
 35.         replace str_4  = "" if mod(_n, 20) == 10
 36.     }
 37. 
.     replace int2  = .   if mod(_n, 10) ==  0
 38.     replace int3  = .a  if mod(_n, 20) ==  0
 39.     replace int3  = .f  if mod(_n, 20) == 10
 40. 
.     replace double2 = .   if mod(_n, 10) ==  0
 41.     replace double3 = .h  if mod(_n, 20) ==  0
 42.     replace double3 = .p  if mod(_n, 20) == 10
 43. 
.     * Singleton groups
.     * ----------------
. 
.     if ( "`skipstr'" == "" ) {
 44.         replace str_32 = "|singleton|" in `n'
 45.         replace str_12 = "|singleton|" in `n'
 46.         replace str_4  = "|singleton|" in `n'
 47.     }
 48. 
.     replace int1    = 99999  in `n'
 49.     replace double1 = 9999.9 in `n'
 50. 
.     replace int3 = .  in 1
 51.     replace int3 = .a in 2
 52.     replace int3 = .b in 3
 53.     replace int3 = .c in 4
 54.     replace int3 = .d in 5
 55.     replace int3 = .e in 6
 56.     replace int3 = .f in 7
 57.     replace int3 = .g in 8
 58.     replace int3 = .h in 9
 59.     replace int3 = .i in 10
 60.     replace int3 = .j in 11
 61.     replace int3 = .k in 12
 62.     replace int3 = .l in 13
 63.     replace int3 = .m in 14
 64.     replace int3 = .n in 15
 65.     replace int3 = .o in 16
 66.     replace int3 = .p in 17
 67.     replace int3 = .q in 18
 68.     replace int3 = .r in 19
 69.     replace int3 = .s in 20
 70.     replace int3 = .t in 21
 71.     replace int3 = .u in 22
 72.     replace int3 = .v in 23
 73.     replace int3 = .w in 24
 74.     replace int3 = .x in 25
 75.     replace int3 = .y in 26
 76.     replace int3 = .z in 27
 77. 
.     replace double3 = .  in 1
 78.     replace double3 = .a in 2
 79.     replace double3 = .b in 3
 80.     replace double3 = .c in 4
 81.     replace double3 = .d in 5
 82.     replace double3 = .e in 6
 83.     replace double3 = .f in 7
 84.     replace double3 = .g in 8
 85.     replace double3 = .h in 9
 86.     replace double3 = .i in 10
 87.     replace double3 = .j in 11
 88.     replace double3 = .k in 12
 89.     replace double3 = .l in 13
 90.     replace double3 = .m in 14
 91.     replace double3 = .n in 15
 92.     replace double3 = .o in 16
 93.     replace double3 = .p in 17
 94.     replace double3 = .q in 18
 95.     replace double3 = .r in 19
 96.     replace double3 = .s in 20
 97.     replace double3 = .t in 21
 98.     replace double3 = .u in 22
 99.     replace double3 = .v in 23
100.     replace double3 = .w in 24
101.     replace double3 = .x in 25
102.     replace double3 = .y in 26
103.     replace double3 = .z in 27
104. 
.     if ( `random' > 0 ) {
105.         forvalues i = 1 / `random' {
106.             gen `double' random`i' = rnormal() * 10
107.             replace random`i' = . if mod(_n, 20) == 0
108.             if ( `binary' ) {
109.                 replace random`i' = floor(runiform() * 1.99) if _n < `=_N / 2'
110.             }
111.         }
112.     }
113. end

. 
. capture program drop checks_gcollapse

. program checks_gcollapse
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "checks_gcollapse, `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     qui `noisily' gen_data, n(5000) random(2)
  4.     qui expand 2
  5.     gen long ix = _n
  6. 
.     checks_inner_collapse, `options'
  7. 
.     checks_inner_collapse -str_12,              `options'
  8.     checks_inner_collapse str_12 -str_32,       `options'
  9.     checks_inner_collapse str_12 -str_32 str_4, `options'
 10. 
.     checks_inner_collapse -double1,                 `options'
 11.     checks_inner_collapse double1 -double2,         `options'
 12.     checks_inner_collapse double1 -double2 double3, `options'
 13. 
.     checks_inner_collapse -int1,           `options'
 14.     checks_inner_collapse int1 -int2,      `options'
 15.     checks_inner_collapse int1 -int2 int3, `options'
 16. 
.     checks_inner_collapse -int1 -str_32 -double1,                                         `options'
 17.     checks_inner_collapse int1 -str_32 double1 -int2 str_12 -double2,                     `options'
 18.     checks_inner_collapse int1 -str_32 double1 -int2 str_12 -double2 int3 -str_4 double3, `options'
 19. end

. 
. capture program drop checks_inner_collapse

. program checks_inner_collapse
  1.     syntax [anything], [tol(real 1e-6) *]
  2. 
.     local stats sum mean sd max min count median iqr percent first last firstnm lastnm semean sebinomial sepoisson
  3.     local percentiles p1 p10 p30.5 p50 p70.5 p90 p99
  4. 
.     local collapse_str ""
  5.     foreach stat of local stats {
  6.         local collapse_str `collapse_str' (`stat') r1_`stat' = random1
  7.         local collapse_str `collapse_str' (`stat') r2_`stat' = random2
  8.     }
  9.     foreach pct of local percentiles {
 10.         local collapse_str `collapse_str' (`pct') r1_`:subinstr local pct "." "_", all' = random1
 11.         local collapse_str `collapse_str' (`pct') r2_`:subinstr local pct "." "_", all' = random2
 12.     }
 13. 
.     preserve
 14.         gcollapse `collapse_str', by(`anything') verbose `options'
 15.     restore, preserve
 16.         gcollapse `collapse_str', by(`anything') verbose benchmark `options'
 17.     restore, preserve
 18.         gcollapse `collapse_str', by(`anything') verbose forceio `options'
 19.     restore, preserve
 20.         gcollapse `collapse_str', by(`anything') verbose forcemem `options'
 21.     restore, preserve
 22.         gcollapse `collapse_str', by(`anything') verbose benchmark cw `options'
 23.     restore, preserve
 24.         gcollapse `collapse_str', by(`anything') verbose benchmark fast `options'
 25.     restore, preserve
 26.         gcollapse `collapse_str', by(`anything') double `options'
 27.     restore, preserve
 28.         gcollapse `collapse_str', by(`anything') merge `options'
 29.     restore, preserve
 30.         gcollapse `collapse_str', by(`anything') verbose `options' benchmark debug_io_check(0)
 31.     restore
 32. end

. 
. ***********************************************************************
. *                            Corner cases                             *
. ***********************************************************************
. 
. capture program drop checks_corners

. program checks_corners
  1.     syntax, [*]
  2.     di _n(1) "{hline 80}" _n(1) "checks_corners `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     qui {
  4.         sysuse auto, clear
  5.         gen price2 = price
  6.         cap noi gcollapse price = price2 if price < 0
  7.         assert _rc == 2000
  8.     }
  9. 
.     qui {
 10.         sysuse auto, clear
 11.         gen price2 = price
 12.         gcollapse price = price2
 13.     }
 14. 
.     qui {
 15.         sysuse auto, clear
 16.         gen price2 = price
 17.         gcollapse price = price2, by(make) v bench `options'
 18.         gcollapse price in 1,     by(make) v bench `options'
 19.     }
 20. 
.     qui {
 21.         clear
 22.         set matsize 100
 23.         set obs 10
 24.         forvalues i = 1/101 {
 25.             gen x`i' = 10
 26.         }
 27.         gen zz = runiform()
 28.         preserve
 29.             gcollapse zz, by(x*) `options'
 30.         restore, preserve
 31.             gcollapse x*, by(zz) `options'
 32.         restore
 33.     }
 34. 
.     qui {
 35.         clear
 36.         set matsize 400
 37.         set obs 10
 38.         forvalues i = 1/300 {
 39.             gen x`i' = 10
 40.         }
 41.         gen zz = runiform()
 42.         preserve
 43.             gcollapse zz, by(x*) `options'
 44.         restore, preserve
 45.             gcollapse x*, by(zz) `options'
 46.         restore
 47.     }
 48. 
.     qui {
 49.         clear
 50.         set obs 10
 51.         forvalues i = 1/800 {
 52.             gen x`i' = 10
 53.         }
 54.         gen zz = runiform()
 55.         preserve
 56.             gcollapse zz, by(x*) `options'
 57.         restore, preserve
 58.             gcollapse x*, by(zz) `options'
 59.         restore
 60. 
.         * Only fails in Stata/IC
.         * gen x801 = 10
.         * preserve
.         *     collapse zz, by(x*) `options'
.         * restore, preserve
.         *     collapse x*, by(zz) `options'
.         * restore
.     }
 61. 
.     di ""
 62.     di as txt "Passed! checks_corners `options'"
 63. end

. 
. ***********************************************************************
. *                               Compare                               *
. ***********************************************************************
. 
. capture program drop compare_gcollapse

. program compare_gcollapse
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2. 
.     * This should be ignored for compare_inner_gcollapse_gegen bc of merge
.     local debug_io debug_io_check(0) debug_io_threshold(0.0001)
  3. 
.     qui `noisily' gen_data, n(1000) random(2)
  4.     qui expand 100
  5. 
.     di _n(1) "{hline 80}" _n(1) "consistency_gcollapse_gegen, `options'" _n(1) "{hline 80}" _n(1)
  6. 
.     compare_inner_gcollapse_gegen, `options' tol(`tol')
  7. 
.     compare_inner_gcollapse_gegen -str_12,              `options' tol(`tol') `debug_io'
  8.     compare_inner_gcollapse_gegen str_12 -str_32,       `options' tol(`tol') sort
  9.     compare_inner_gcollapse_gegen str_12 -str_32 str_4, `options' tol(`tol') shuffle
 10. 
.     compare_inner_gcollapse_gegen -double1,                 `options' tol(`tol') `debug_io'
 11.     compare_inner_gcollapse_gegen double1 -double2,         `options' tol(`tol') sort
 12.     compare_inner_gcollapse_gegen double1 -double2 double3, `options' tol(`tol') shuffle
 13. 
.     compare_inner_gcollapse_gegen -int1,           `options' tol(`tol') `debug_io'
 14.     compare_inner_gcollapse_gegen int1 -int2,      `options' tol(`tol') sort
 15.     compare_inner_gcollapse_gegen int1 -int2 int3, `options' tol(`tol') shuffle
 16. 
.     compare_inner_gcollapse_gegen -int1 -str_32 -double1, `options' tol(`tol') `debug_io'
 17.     compare_inner_gcollapse_gegen int1 -str_32 double1 -int2 str_12 -double2, `options' tol(`tol') sort
 18.     compare_inner_gcollapse_gegen int1 -str_32 double1 -int2 str_12 -double2 int3 -str_4 double3, `options' tol(`tol') shuffle
 19. 
.     qui `noisily' gen_data, n(1000) random(2) binary(1)
 20.     qui expand 50
 21. 
.     di _n(1) "{hline 80}" _n(1) "consistency_collapse, `options'" _n(1) "{hline 80}" _n(1)
 22. 
.     compare_inner_collapse, `options' tol(`tol')
 23. 
.     compare_inner_collapse str_12,              `options' tol(`tol') forcemem sort
 24.     compare_inner_collapse str_12 str_32,       `options' tol(`tol') forceio shuffle
 25.     compare_inner_collapse str_12 str_32 str_4, `options' tol(`tol') `debug_io'
 26. 
.     compare_inner_collapse double1,                 `options' tol(`tol') forcemem
 27.     compare_inner_collapse double1 double2,         `options' tol(`tol') forceio sort
 28.     compare_inner_collapse double1 double2 double3, `options' tol(`tol') `debug_io' shuffle
 29. 
.     compare_inner_collapse int1,           `options' tol(`tol') forcemem shuffle
 30.     compare_inner_collapse int1 int2,      `options' tol(`tol') forceio
 31.     compare_inner_collapse int1 int2 int3, `options' tol(`tol') `debug_io' sort
 32. 
.     compare_inner_collapse int1 str_32 double1,                                        `options' tol(`tol') forcemem
 33.     compare_inner_collapse int1 str_32 double1 int2 str_12 double2,                    `options' tol(`tol') forceio
 34.     compare_inner_collapse int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options' tol(`tol') `debug_io'
 35. end

. 
. capture program drop compare_inner_gcollapse_gegen

. program compare_inner_gcollapse_gegen
  1.     syntax [anything], [tol(real 1e-6) sort shuffle *]
  2. 
.     tempvar rsort
  3.     if ( "`shuffle'" != "" ) gen `rsort' = runiform()
  4.     if ( "`shuffle'" != "" ) sort `rsort'
  5.     if ( ("`sort'" != "") & ("`anything'" != "") ) hashsort `anything'
  6. 
.     local N = trim("`: di %15.0gc _N'")
  7.     local hlen = 45 + length("`anything'") + length("`N'")
  8.     di _n(2) "Checking gegen vs gcollapse. N = `N'; varlist = `anything'" _n(1) "{hline `hlen'}"
  9. 
.     preserve
 10.         _compare_inner_gcollapse_gegen `anything', `options' tol(`tol')
 11.     restore, preserve
 12.         if ( "`shuffle'" != "" ) sort `rsort'
 13.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 14.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 15.         local from = cond(`in1' < `in2', `in1', `in2')
 16.         local to   = cond(`in1' > `in2', `in1', `in2')
 17.         _compare_inner_gcollapse_gegen  `anything' in `from' / `to', `options' tol(`tol')
 18.     restore, preserve
 19.         _compare_inner_gcollapse_gegen `anything' if random2 > 0, `options' tol(`tol')
 20.     restore, preserve
 21.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 22.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 23.         local from = cond(`in1' < `in2', `in1', `in2')
 24.         local to   = cond(`in1' > `in2', `in1', `in2')
 25.         _compare_inner_gcollapse_gegen `anything' if random2 < 0 in `from' / `to', `options' tol(`tol')
 26.     restore
 27. end

. 
. capture program drop _compare_inner_gcollapse_gegen

. program _compare_inner_gcollapse_gegen
  1.     syntax [anything] [if] [in], [tol(real 1e-6) *]
  2. 
.     gegen id = group(`anything'), missing
  3. 
.     gegen double mean       = mean       (random1) `if' `in',  by(`anything')
  4.     gegen double sum        = sum        (random1) `if' `in',  by(`anything')
  5.     gegen double median     = median     (random1) `if' `in',  by(`anything')
  6.     gegen double sd         = sd         (random1) `if' `in',  by(`anything')
  7.     gegen double iqr        = iqr        (random1) `if' `in',  by(`anything')
  8.     gegen double first      = first      (random1) `if' `in',  by(`anything')
  9.     gegen double last       = last       (random1) `if' `in',  by(`anything')
 10.     gegen double firstnm    = firstnm    (random1) `if' `in',  by(`anything')
 11.     gegen double lastnm     = lastnm     (random1) `if' `in',  by(`anything')
 12.     gegen double semean     = semean     (random1) `if' `in',  by(`anything')
 13.     gegen double sebinomial = sebinomial (random1) `if' `in',  by(`anything')
 14.     gegen double sepoisson  = sepoisson  (random1) `if' `in',  by(`anything')
 15.     gegen double q10        = pctile     (random1) `if' `in',  by(`anything') p(10.5)
 16.     gegen double q30        = pctile     (random1) `if' `in',  by(`anything') p(30)
 17.     gegen double q70        = pctile     (random1) `if' `in',  by(`anything') p(70)
 18.     gegen double q90        = pctile     (random1) `if' `in',  by(`anything') p(90.5)
 19. 
.     qui `noisily' {
 20.         gcollapse (mean)       g_mean       = random1  ///
>                   (sum)        g_sum        = random1  ///
>                   (median)     g_median     = random1  ///
>                   (sd)         g_sd         = random1  ///
>                   (iqr)        g_iqr        = random1  ///
>                   (first)      g_first      = random1  ///
>                   (last)       g_last       = random1  ///
>                   (firstnm)    g_firstnm    = random1  ///
>                   (lastnm)     g_lastnm     = random1  ///
>                   (semean)     g_semean     = random1  ///
>                   (sebinomial) g_sebinomial = random1  ///
>                   (sepoisson)  g_sepoisson  = random1  ///
>                   (p10.5)      g_q10        = random1  ///
>                   (p30)        g_q30        = random1  ///
>                   (p70)        g_q70        = random1  ///
>                   (p90.5)      g_q90        = random1 `if' `in', by(id) benchmark verbose `options' merge double
 21.     }
 22. 
.     if ( "`if'`in'" == "" ) {
 23.         di _n(1) "Checking full range: `anything'"
 24.     }
 25.     else if ( "`if'`in'" != "" ) {
 26.         di _n(1) "Checking [`if' `in'] range: `anything'"
 27.     }
 28. 
.     foreach fun in mean sum median sd iqr first last firstnm lastnm semean sebinomial sepoisson q10 q30 q70 q90 {
 29.         cap noi assert (g_`fun' == `fun') | abs(g_`fun' - `fun') < `tol'
 30.         if ( _rc ) {
 31.             recast double g_`fun' `fun'
 32.             cap noi assert (g_`fun' == `fun') | abs(g_`fun' - `fun') < `tol'
 33.             if ( _rc ) {
 34.                 di as err "    compare_gegen_gcollapse (failed): `fun' yielded different results (tol = `tol')"
 35.                 exit _rc
 36.             }
 37.             else di as txt "    compare_gegen_gcollapse (passed): `fun' yielded same results (tol = `tol')"
 38.         }
 39.         else di as txt "    compare_gegen_gcollapse (passed): `fun' yielded same results (tol = `tol')"
 40.     }
 41. end

. 
. capture program drop compare_inner_collapse

. program compare_inner_collapse
  1.     syntax [anything], [tol(real 1e-6) sort shuffle *]
  2. 
.     tempvar rsort
  3.     if ( "`shuffle'" != "" ) gen `rsort' = runiform()
  4.     if ( "`shuffle'" != "" ) sort `rsort'
  5.     if ( ("`sort'" != "") & ("`anything'" != "") ) hashsort `anything'
  6. 
.     local N = trim("`: di %15.0gc _N'")
  7.     local hlen = 35 + length("`anything'") + length("`N'")
  8.     di _n(2) "Checking collapse. N = `N'; varlist = `anything'" _n(1) "{hline `hlen'}"
  9. 
.     preserve
 10.         _compare_inner_collapse `anything', `options' tol(`tol')
 11.     restore, preserve
 12.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 13.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 14.         local from = cond(`in1' < `in2', `in1', `in2')
 15.         local to   = cond(`in1' > `in2', `in1', `in2')
 16.         _compare_inner_collapse  `anything' in `from' / `to', `options' tol(`tol')
 17.     restore, preserve
 18.         _compare_inner_collapse `anything' if random2 > 0, `options' tol(`tol')
 19.     restore, preserve
 20.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 21.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 22.         local from = cond(`in1' < `in2', `in1', `in2')
 23.         local to   = cond(`in1' > `in2', `in1', `in2')
 24.         _compare_inner_collapse `anything' if random2 < 0 in `from' / `to', `options' tol(`tol')
 25.     restore
 26. end

. 
. capture program drop _compare_inner_collapse

. program _compare_inner_collapse
  1.     syntax [anything] [if] [in], [tol(real 1e-6) *]
  2. 
.     local stats sum mean sd max min count percent first last firstnm lastnm median iqr semean sebinomial sepoisson
  3.     local percentiles p1 p13 p30 p50 p70 p87 p99
  4.     local collapse_str ""
  5.     foreach stat of local stats {
  6.         local collapse_str `collapse_str' (`stat') r1_`stat' = random1
  7.         local collapse_str `collapse_str' (`stat') r2_`stat' = random2
  8.     }
  9.     foreach pct of local percentiles {
 10.         local collapse_str `collapse_str' (`pct') r1_`pct' = random1
 11.         local collapse_str `collapse_str' (`pct') r2_`pct' = random2
 12.     }
 13. 
.     preserve
 14.         timer clear
 15.         timer on 43
 16.         qui `noisily' gcollapse `collapse_str' `if' `in', by(`anything') verbose benchmark `options' freq(freq)
 17.         timer off 43
 18.         qui timer list
 19.         local time_gcollapse = r(t43)
 20.         tempfile fg
 21.         qui save `fg'
 22.     restore
 23. 
.     preserve
 24.         timer clear
 25.         timer on 42
 26.         qui gen long freq = 1
 27.         qui `noisily' collapse `collapse_str' (sum) freq `if' `in', by(`anything')
 28.         timer off 42
 29.         qui timer list
 30.         local time_gcollapse = r(t42)
 31.         tempfile fc
 32.         qui save `fc'
 33.     restore
 34. 
.     preserve
 35.     use `fc', clear
 36.         local bad_any = 0
 37.         local bad `anything'
 38.         local by  `anything'
 39.         foreach var in `stats' `percentiles' {
 40.             rename r1_`var' c_r1_`var'
 41.             rename r2_`var' c_r2_`var'
 42.         }
 43.         rename freq c_freq
 44.         if ( "`by'" == "" ) {
 45.             qui merge 1:1 _n using `fg', assert(3)
 46.         }
 47.         else {
 48.             qui merge 1:1 `by' using `fg', assert(3)
 49.         }
 50.         foreach var in `stats' `percentiles' {
 51.             qui count if ( (abs(r1_`var' - c_r1_`var') > `tol') & (r1_`var' != c_r1_`var'))
 52.             if ( `r(N)' > 0 ) {
 53.                 gen bad_r1_`var' = abs(r1_`var' - c_r1_`var') * (r1_`var' != c_r1_`var')
 54.                 local bad `bad' *r1_`var'
 55.                 di "    r1_`var' has `:di r(N)' mismatches".
 56.                 local bad_any = 1
 57.                 order *r1_`var'
 58.             }
 59. 
.             qui count if ( (abs(r2_`var' - c_r2_`var') > `tol') & (r2_`var' != c_r2_`var'))
 60.             if ( `r(N)' > 0 ) {
 61.                 gen bad_r2_`var' = abs(r2_`var' - c_r2_`var') * (r2_`var' != c_r2_`var')
 62.                 local bad `bad' *r2_`var'
 63.                 di "    r2_`var' has `:di r(N)' mismatches".
 64.                 local bad_any = 1
 65.                 order *r2_`var'
 66.             }
 67.         }
 68.         qui count if ( (abs(freq - c_freq) > `tol') & (freq != c_freq))
 69.         if ( `r(N)' > 0 ) {
 70.             gen bad_freq = abs(freq - c_freq) * (freq != c_freq)
 71.             local bad `bad' *freq
 72.             di "    freq has `:di r(n)' mismatches".
 73.             local bad_any = 1
 74.             order *freq
 75.         }
 76.         if ( `bad_any' ) {
 77.             if ( "`if'`in'" == "" ) {
 78.                 di "    compare_collapse (failed): full range, `anything'"
 79.             }
 80.             else if ( "`if'`in'" != "" ) {
 81.                 di "    compare_collapse (failed): [`if' `in'], `anything'"
 82.             }
 83.             order `bad'
 84.             egen bad_any = rowmax(bad_*)
 85.             l *count* *mean* `bad' if bad_any
 86.             sum bad_*
 87.             desc
 88.             exit 9
 89.         }
 90.         else {
 91.             if ( "`if'`in'" == "" ) {
 92.                 di "    compare_collapse (passed): full range, gcollapse results equal to collapse (tol = `tol')"
 93.             }
 94.             else if ( "`if'`in'" != "" ) {
 95.                 di "    compare_collapse (passed): [`if' `in'], gcollapse results equal to collapse (tol = `tol')"
 96.             }
 97.         }
 98.     restore
 99. end

. 
. ***********************************************************************
. *                             Benchmarks                              *
. ***********************************************************************
. 
. capture program drop bench_collapse

. program bench_collapse
  1.     syntax, [tol(real 1e-6) bench(real 1) n(int 1000) NOIsily style(str) vars(int 1) collapse fcollapse *]
  2. 
.     qui gen_data, n(`n') random(`vars') double
  3.     qui expand `=100 * `bench''
  4.     qui hashsort random1
  5. 
.     local N = trim("`: di %15.0gc _N'")
  6.     local J = trim("`: di %15.0gc `n''")
  7. 
.     if ( "`style'" == "full" ) {
  8.         local ststr "all available plus percentiles 10, 30, 70, 90"
  9.     }
 10.     else if ( "`style'" == "ftools" ) {
 11.         local ststr "mean median min max"
 12.     }
 13.     else {
 14.         local ststr "sum"
 15.     }
 16. 
.     if ( `vars' > 1 ) {
 17.         local vstr "x1-x`vars'"
 18.     }
 19.     else {
 20.         local vstr x1
 21.     }
 22. 
.     di as txt _n(1)
 23.     di as txt "Benchmark vs collapse (in seconds)"
 24.     di as txt "    - obs:     `N'"
 25.     di as txt "    - groups:  `J'"
 26.     di as txt "    - vars:    `vstr' ~ N(0, 10)"
 27.     di as txt "    - stats:   `ststr'"
 28.     di as txt "    - options: fast"
 29.     di as txt _n(1)
 30.     di as txt "    collapse | fcollapse | gcollapse | ratio (c/g) | ratio (f/g) | varlist"
 31.     di as txt "    -------- | --------- | --------- | ----------- | ----------- | -------"
 32. 
.     local options `options' style(`style') vars(`vars')
 33.     versus_collapse,                         `options' `collapse' `fcollapse'
 34.     versus_collapse str_12 str_32 str_4,     `options' `collapse' `fcollapse'
 35.     versus_collapse double1 double2 double3, `options' `collapse' `fcollapse'
 36.     versus_collapse int1 int2,               `options' `collapse' `fcollapse'
 37.     versus_collapse int3 str_32 double1,     `options' `collapse'
 38. 
.     di _n(1) "{hline 80}" _n(1) "bench_collapse, `options'" _n(1) "{hline 80}" _n(1)
 39. end

. 
. capture program drop versus_collapse

. program versus_collapse, rclass
  1.     syntax [anything], [fcollapse collapse style(str) vars(int 1) *]
  2. 
.     local stats       ""
  3.     local percentiles ""
  4. 
.     if ( "`style'" == "full" ) {
  5.         local stats sum mean sd max min count median iqr percent first last firstnm lastnm
  6.         local percentiles p10 p30 p70 p90
  7.     }
  8.     else if ( "`style'" == "ftools" ) {
  9.         local stats mean median min max
 10.     }
 11.     else {
 12.         local stats sum
 13.     }
 14. 
.     local collapse_str ""
 15.     foreach stat of local stats {
 16.         forvalues k = 1 / `vars' {
 17.             local collapse_str `collapse_str' (`stat') r`k'_`stat' = random`k'
 18.         }
 19.     }
 20.     foreach pct of local percentiles {
 21.         forvalues k = 1 / `vars' {
 22.             local collapse_str `collapse_str' (`pct') r`k'_`pct' = random`k'
 23.         }
 24.     }
 25. 
.     if ( "`collapse'" == "collapse" ) {
 26.     preserve
 27.         timer clear
 28.         timer on 42
 29.         qui collapse `collapse_str', by(`anything') fast
 30.         timer off 42
 31.         qui timer list
 32.         local time_collapse = r(t42)
 33.     restore
 34.     }
 35.     else {
 36.         local time_collapse = .
 37.     }
 38. 
.     preserve
 39.         timer clear
 40.         timer on 43
 41.         qui gcollapse `collapse_str', by(`anything') `options' fast
 42.         timer off 43
 43.         qui timer list
 44.         local time_gcollapse = r(t43)
 45.     restore
 46. 
.     if ( "`fcollapse'" == "fcollapse" ) {
 47.     preserve
 48.         timer clear
 49.         timer on 44
 50.         qui fcollapse `collapse_str', by(`anything') fast
 51.         timer off 44
 52.         qui timer list
 53.         local time_fcollapse = r(t44)
 54.     restore
 55.     }
 56.     else {
 57.         local time_fcollapse = .
 58.     }
 59. 
.     local rs = `time_collapse'  / `time_gcollapse'
 60.     local rf = `time_fcollapse' / `time_gcollapse'
 61.     di as txt "    `:di %8.3g `time_collapse'' | `:di %9.3g `time_fcollapse'' | `:di %9.3g `time_gcollapse'' | `:di %11.3g `rs'' | `:di %11.3g `rf'' | `anything'"
 62. end

. capture program drop checks_gcontract

. program checks_gcontract
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "checks_gcontract, `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     qui `noisily' gen_data, n(5000) random(2)
  4.     qui expand 2
  5.     gen long ix = _n
  6. 
.     cap gcontract
  7.     assert _rc == 100
  8. 
.     checks_inner_contract -str_12,              `options' nomiss
  9.     checks_inner_contract str_12 -str_32,       `options'
 10.     checks_inner_contract str_12 -str_32 str_4, `options'
 11. 
.     checks_inner_contract -double1,                 `options' fast
 12.     checks_inner_contract double1 -double2,         `options' unsorted
 13.     checks_inner_contract double1 -double2 double3, `options' v bench
 14. 
.     checks_inner_contract -int1,           `options'
 15.     checks_inner_contract int1 -int2,      `options'
 16.     checks_inner_contract int1 int2  int3, `options' z
 17. 
.     checks_inner_contract -int1 -str_32 -double1,                                         `options'
 18.     checks_inner_contract int1 -str_32 double1 -int2 str_12 -double2,                     `options'
 19.     checks_inner_contract int1 -str_32 double1 -int2 str_12 -double2 int3 -str_4 double3, `options'
 20. end

. 
. capture program drop checks_inner_contract

. program checks_inner_contract
  1.     syntax [anything], [tol(real 1e-6) *]
  2. 
.     preserve
  3.         gcontract `anything', `options' freq(freq)
  4.     restore, preserve
  5.         gcontract `anything', `options' freq(freq) cf(cf)
  6.     restore, preserve
  7.         gcontract `anything', `options' freq(freq)        p(p)        format(%5.1g)
  8.     restore, preserve
  9.         gcontract `anything', `options' freq(freq)             cp(cp) float
 10.     restore, preserve
 11.         gcontract `anything', `options' freq(freq) cf(cf) p(p)        float
 12.     restore, preserve
 13.         gcontract `anything', `options' freq(freq) cf(cf)      cp(cp) format(%5.1g)
 14.     restore, preserve
 15.         gcontract `anything', `options' freq(freq)        p(p) cp(cp) format(%5.1g)
 16.     restore, preserve
 17.         gcontract `anything', `options' freq(freq) cf(cf) p(p) cp(cp) float
 18.     restore
 19. end

. 
. ***********************************************************************
. *                               Compare                               *
. ***********************************************************************
. 
. capture program drop compare_gcontract

. program compare_gcontract
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2. 
.     qui `noisily' gen_data, n(1000) random(2) binary(1)
  3.     qui expand 50
  4. 
.     di as txt _n(1) "{hline 80}" _n(1) "consistency_gtoplevelsof_gcontract, `options'" _n(1) "{hline 80}" _n(1)
  5. 
.     compare_inner_contract str_12,              `options' tol(`tol') nomiss
  6.     compare_inner_contract str_12 str_32,       `options' tol(`tol') sort
  7.     compare_inner_contract str_12 str_32 str_4, `options' tol(`tol') shuffle
  8. 
.     compare_inner_contract double1,                 `options' tol(`tol') shuffle
  9.     compare_inner_contract double1 double2,         `options' tol(`tol') nomiss
 10.     compare_inner_contract double1 double2 double3, `options' tol(`tol') sort
 11. 
.     compare_inner_contract int1,           `options' tol(`tol') sort
 12.     compare_inner_contract int1 int2,      `options' tol(`tol') shuffle
 13.     compare_inner_contract int1 int2 int3, `options' tol(`tol') nomiss
 14. 
.     compare_inner_contract int1 str_32 double1,                                        `options' tol(`tol')
 15.     compare_inner_contract int1 str_32 double1 int2 str_12 double2,                    `options' tol(`tol')
 16.     compare_inner_contract int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options' tol(`tol')
 17. end

. 
. capture program drop compare_inner_contract

. program compare_inner_contract
  1.     syntax [anything], [tol(real 1e-6) sort shuffle *]
  2. 
.     tempvar rsort
  3.     if ( "`shuffle'" != "" ) gen `rsort' = runiform()
  4.     if ( "`shuffle'" != "" ) sort `rsort'
  5.     if ( ("`sort'" != "") & ("`anything'" != "") ) hashsort `anything'
  6. 
.     local N = trim("`: di %15.0gc _N'")
  7.     local hlen = 35 + length("`anything'") + length("`N'")
  8.     di as txt _n(2) "Checking contract. N = `N'; varlist = `anything'" _n(1) "{hline `hlen'}"
  9. 
.     preserve
 10.         _compare_inner_contract `anything', `options' tol(`tol')
 11.     restore, preserve
 12.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 13.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 14.         local from = cond(`in1' < `in2', `in1', `in2')
 15.         local to   = cond(`in1' > `in2', `in1', `in2')
 16.         _compare_inner_contract  `anything' in `from' / `to', `options' tol(`tol')
 17.     restore, preserve
 18.         _compare_inner_contract `anything' if random2 > 0, `options' tol(`tol')
 19.     restore, preserve
 20.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 21.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 22.         local from = cond(`in1' < `in2', `in1', `in2')
 23.         local to   = cond(`in1' > `in2', `in1', `in2')
 24.         _compare_inner_contract `anything' if random2 < 0 in `from' / `to', `options' tol(`tol')
 25.     restore
 26. end

. 
. capture program drop _compare_inner_contract

. program _compare_inner_contract
  1.     syntax [anything] [if] [in], [tol(real 1e-6) *]
  2. 
.     local opts freq(freq) cf(cf) p(p) cp(cp)
  3. 
.     preserve
  4.         timer clear
  5.         timer on 43
  6.         qui `noisily' gcontract `anything' `if' `in', `opts'
  7.         timer off 43
  8.         qui timer list
  9.         local time_gcontract = r(t43)
 10.         tempfile fg
 11.         qui save `fg'
 12.     restore
 13. 
.     preserve
 14.         timer clear
 15.         timer on 42
 16.         qui `noisily' contract `anything' `if' `in', `opts'
 17.         timer off 42
 18.         qui timer list
 19.         local time_gcontract = r(t42)
 20.         tempfile fc
 21.         qui save `fc'
 22.     restore
 23. 
.     preserve
 24.     use `fc', clear
 25.         local bad_any = 0
 26.         local bad `anything'
 27.         foreach var in freq cf p cp {
 28.             rename `var' c_`var'
 29.         }
 30.         qui merge 1:1 `anything' using `fg', assert(3)
 31.         foreach var in freq cf p cp {
 32.             qui count if ( (abs(`var' - c_`var') > `tol') & (`var' != c_`var'))
 33.             if ( `r(N)' > 0 ) {
 34.                 gen bad_`var' = abs(`var' - c_`var') * (`var' != c_`var')
 35.                 local bad `bad' *`var'
 36.                 di "    `var' has `:di r(N)' mismatches".
 37.                 local bad_any = 1
 38.                 order *`var'
 39.             }
 40.         }
 41.         if ( `bad_any' ) {
 42.             if ( "`if'`in'" == "" ) {
 43.                 di "    compare_contract (failed): full range, `anything'"
 44.             }
 45.             else if ( "`if'`in'" != "" ) {
 46.                 di "    compare_contract (failed): [`if' `in'], `anything'"
 47.             }
 48.             order `bad'
 49.             egen bad_any = rowmax(bad_*)
 50.             l `bad' if bad_any
 51.             sum bad_*
 52.             desc
 53.             exit 9
 54.         }
 55.         else {
 56.             if ( "`if'`in'" == "" ) {
 57.                 di "    compare_contract (passed): full range, gcontract results equal to contract (tol = `tol')"
 58.             }
 59.             else if ( "`if'`in'" != "" ) {
 60.                 di "    compare_contract (passed): [`if' `in'], gcontract results equal to contract (tol = `tol')"
 61.             }
 62.         }
 63.     restore
 64. end

. 
. ***********************************************************************
. *                             Benchmarks                              *
. ***********************************************************************
. 
. capture program drop bench_contract

. program bench_contract
  1.     syntax, [tol(real 1e-6) bench(real 1) n(int 1000) NOIsily *]
  2. 
.     qui gen_data, n(`n') random(1) double
  3.     qui expand `=100 * `bench''
  4.     qui hashsort random1
  5. 
.     local N = trim("`: di %15.0gc _N'")
  6.     local J = trim("`: di %15.0gc `n''")
  7. 
.     di as txt _n(1)
  8.     di as txt "Benchmark vs contract, obs = `N', J = `J' (in seconds)"
  9.     di as txt "    contract | gcontract | ratio (c/g) | varlist"
 10.     di as txt "    -------- | --------- | ----------- | -------"
 11. 
.     versus_contract str_12,              `options'
 12.     versus_contract str_12 str_32,       `options'
 13.     versus_contract str_12 str_32 str_4, `options'
 14. 
.     versus_contract double1,                 `options'
 15.     versus_contract double1 double2,         `options'
 16.     versus_contract double1 double2 double3, `options'
 17. 
.     versus_contract int1,           `options'
 18.     versus_contract int1 int2,      `options'
 19.     versus_contract int1 int2 int3, `options'
 20. 
.     versus_contract int1 str_32 double1,                                        `options'
 21.     versus_contract int1 str_32 double1 int2 str_12 double2,                    `options'
 22.     versus_contract int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options'
 23. 
.     di _n(1) "{hline 80}" _n(1) "bench_contract, `options'" _n(1) "{hline 80}" _n(1)
 24. end

. 
. capture program drop versus_contract

. program versus_contract, rclass
  1.     syntax [anything], [*]
  2. 
.     local stats       ""
  3.     local percentiles ""
  4. 
.     local opts freq(freq) cf(cf) p(p) cp(cp)
  5. 
.     preserve
  6.         timer clear
  7.         timer on 42
  8.         qui contract `anything' `if' `in', `opts'
  9.         timer off 42
 10.         qui timer list
 11.         local time_contract = r(t42)
 12.     restore
 13. 
.     preserve
 14.         timer clear
 15.         timer on 43
 16.         qui gcontract `anything' `if' `in', `opts'
 17.         timer off 43
 18.         qui timer list
 19.         local time_gcontract = r(t43)
 20.     restore
 21. 
.     local rs = `time_contract'  / `time_gcontract'
 22.     di as txt "    `:di %8.3g `time_contract'' | `:di %9.3g `time_gcontract'' | `:di %11.3g `rs'' | `anything'"
 23. end

. capture program drop checks_quantiles

. program checks_quantiles
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2. 
.     qui `noisily' gen_data, n(100000) random(2) double skipstr
  3.     qui expand 5
  4.     gen long   ix = _n
  5.     gen double ru = rnormal() * 100
  6.     qui replace ix = . if mod(_n, `n') == 0
  7.     qui replace ru = . if mod(_n, `n') == 0
  8.     qui sort random1
  9. 
.     local N = trim("`: di %15.0gc _N'")
 10.     di _n(1) "{hline 80}" _n(1) "checks_gquantiles, N = `N', `options'" _n(1) "{hline 80}" _n(1)
 11. 
.     _consistency_inner_gquantiles, `options'
 12. 
.     if ( "`benchmode'" == "" ) {
 13.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 14.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 15.         local from = cond(`in1' < `in2', `in1', `in2')
 16.         local to   = cond(`in1' > `in2', `in1', `in2')
 17.         _consistency_inner_gquantiles in `from' / `to', `options'
 18. 
.         _consistency_inner_gquantiles if random2 > 0, `options'
 19. 
.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 20.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 21.         local from = cond(`in1' < `in2', `in1', `in2')
 22.         local to   = cond(`in1' > `in2', `in1', `in2')
 23.         _consistency_inner_gquantiles `anything' if random2 < 0 in `from' / `to', `options'
 24.     }
 25. 
. end

. 
. capture program drop _consistency_inner_gquantiles

. program _consistency_inner_gquantiles
  1.     syntax [if] [in], [tol(real 1e-6) NOIsily *]
  2. 
.     if ( "`if'`in'" != "" ) {
  3.         local ifinstr ""
  4.         if ( "`if'" != "" ) local ifinstr `ifinstr' [`if']
  5.         if ( "`in'" != "" ) local ifinstr `ifinstr' [`in']
  6.     }
  7. 
.     _consistency_inner_full double1 `if' `in', `options'
  8.     _consistency_inner_full double3 `if' `in', `options'
  9.     _consistency_inner_full ru      `if' `in', `options'
 10. 
.     _consistency_inner_full int1 `if' `in', `options'
 11.     _consistency_inner_full int3 `if' `in', `options'
 12.     _consistency_inner_full ix   `if' `in', `options'
 13. 
.     _consistency_inner_full int1^2 + 3 * double1          `if' `in', `options'
 14.     _consistency_inner_full 2 * int1 + log(double1)       `if' `in', `options'
 15.     _consistency_inner_full int1 * double3 + exp(double3) `if' `in', `options'
 16. end

. 
. capture program drop _consistency_inner_full

. program  _consistency_inner_full
  1.     syntax anything [if] [in], [tol(real 1e-6) *]
  2. 
.     qui {
  3.         gquantiles __p1 = `exp' `if' `in', pctile `qopts' nq(10)
  4.         gquantiles __p2 = `exp' `if' `in', pctile `qopts' cutpoints(__p1)
  5.         gquantiles __p3 = `exp' `if' `in', pctile `qopts' quantles(10 30 50 70 90)
  6.         gquantiles __p4 = `exp' `if' `in', pctile `qopts' cutoffs(10 30 50 70 90)
  7.         gquantiles __p5 = `exp' `if' `in', pctile `qopts' cutquantiles(ru)
  8. 
.         gquantiles __x1 = `exp' `if' `in', xctile `qopts' nq(10)
  9.         gquantiles __x2 = `exp' `if' `in', xctile `qopts' cutpoints(__p1)
 10.         gquantiles __x3 = `exp' `if' `in', xctile `qopts' quantles(10 30 50 70 90)
 11.         gquantiles __x4 = `exp' `if' `in', xctile `qopts' cutoffs(10 30 50 70 90)
 12.         gquantiles __x5 = `exp' `if' `in', xctile `qopts' cutquantiles(ru)
 13. 
.         gquantiles `exp' `if' `in', _pctile `qopts' nq(10)
 14.         gquantiles `exp' `if' `in', _pctile `qopts' cutpoints(__p1)
 15.         gquantiles `exp' `if' `in', _pctile `qopts' quantles(10 30 50 70 90)
 16.         gquantiles `exp' `if' `in', _pctile `qopts' cutoffs(10 30 50 70 90)
 17.         gquantiles `exp' `if' `in', _pctile `qopts' cutquantiles(ru) pctile(___p1)
 18.     }
 19. 
.     qui {
 20.         gquantiles __p1  = `exp' `if' `in', pctile `qopts' nq(10)
 21.         gquantiles __xnq = `exp' `if' `in', xctile `qopts' nq(10)
 22.         gquantiles __xp1 = `exp' `if' `in', xctile `qopts' cutpoints(__p1)
 23.         assert __xnq == __xp1
 24. 
.         glevelsof __p1, silent
 25.         gquantiles __xc1 = `exp' `if' `in', xctile `qopts' cutoffs(`"`r(levels)'"')
 26.         assert __xc1 == __xp1
 27. 
.         tempvar quantiles
 28.         qui gen `quantiles' = runiform() * 100 in 1 / 10
 29.         gquantiles __xq  = `exp' `if' `in', xctile `qopts' cutquantiles(`"`r(levels)'"')
 30.         glevelsof `quantiles', silent
 31.         gquantiles __xcq = `exp' `if' `in', xctile `qopts' quantiles(`"`r(levels)'"')
 32.         assert __xq == __xcq
 33.     }
 34. 
. * consistency, pctile == _pctile:
. *     - nquantiles
. *     - cutpoints
. *     - quantiles
. *     - cutoffs
. *     - cutquantiles
. end

. 
. * options (all):
. *     - altdef
. *     - genp()
. *     - binfreq
. *     - binpct
. *     - pctile() with xtile
. *     - xtile() with pctile
. 
. * pctile, xtile tests
. *     - nquantiles
. *     - cutpoints
. *     - quantiles
. *     - cutoffs
. *     - cutquantiles
. * _pctile tests
. *     - nquantiles
. *     - cutpoints (fail w/o gen)
. *     - quantiles
. *     - cutoffs (fail w/o bincount)
. *     - cutquantiles (fail w/o gen)
. * options (all):
. *     - altdef
. *     - genp()
. *     - bincount
. *     - pctile() with xtile
. *     - xtile() with pctile
. * consistency, xtile:
. *     - xtile,  nquantiles()   == xtile, cutpoints(pctile, nquantiles())
. *     - xtile,  cutpoints()    == xtile, cutoffs()
. *     - xtile,  cutquantiles() == xtile, quantiles()
. * consistency, pctile == _pctile:
. *     - nquantiles
. *     - cutpoints
. *     - quantiles
. *     - cutoffs
. *     - cutquantiles
. * sanity:
. *     - replace
. *     - strict
. *     - minmax
. * todo:
. *     by(str)
. *     method
. 
. ***********************************************************************
. *                               Compare                               *
. ***********************************************************************
. 
. capture program drop bench_gquantiles

. program bench_gquantiles
  1.     syntax, [bench(int 10) n(int 10000) *]
  2.     compare_inner_quantiles, n(`n') bench(`bench') benchmode qopts(p(0.1 5 10 30 50 70 90 95 99.9))  qwhich(_pctile)
  3.     compare_inner_quantiles, n(`n') bench(`bench') benchmode qopts(nq(10))  qwhich(_pctile)
  4.     compare_inner_quantiles, n(`n') bench(`bench') benchmode qopts(nq(10))  qwhich(xtile)
  5.     compare_inner_quantiles, n(`n') bench(`bench') benchmode qopts(nq(10))  qwhich(pctile)
  6. end

. 
. capture program drop compare_gquantiles

. program compare_gquantiles
  1.     syntax, [bench(int 10) n(int 10000) *]
  2. 
.     compare_inner_quantiles, n(`n') bench(`bench') qopts(p(0.1 5 10 30 50 70 90 95 99.9)) qwhich(_pctile) `options'
  3.     compare_inner_quantiles, n(`n') bench(`bench') qopts(nq(801)) qwhich(_pctile) `options'
  4.     compare_inner_quantiles, n(`n') bench(`bench') qopts(nq(100)) qwhich(_pctile) `options'
  5.     compare_inner_quantiles, n(`n') bench(`bench') qopts(nq(10))  qwhich(_pctile) `options'
  6.     compare_inner_quantiles, n(`n') bench(`bench') qopts(nq(2))   qwhich(_pctile) `options'
  7. 
.     compare_inner_quantiles, n(`n') bench(`bench') qopts(altdef p(0.1 5 10 30 50 70 90 95 99.9)) qwhich(_pctile) `options'
  8.     compare_inner_quantiles, n(`n') bench(`bench') qopts(altdef nq(801)) qwhich(_pctile) `options'
  9.     compare_inner_quantiles, n(`n') bench(`bench') qopts(altdef nq(100)) qwhich(_pctile) `options'
 10.     compare_inner_quantiles, n(`n') bench(`bench') qopts(altdef nq(10))  qwhich(_pctile) `options'
 11.     compare_inner_quantiles, n(`n') bench(`bench') qopts(altdef nq(2))   qwhich(_pctile) `options'
 12. 
.     compare_inner_quantiles, n(`n') bench(`bench') qopts(nq(500))  qwhich(xtile) `options'
 13.     compare_inner_quantiles, n(`n') bench(`bench') qopts(nq(100))  qwhich(xtile) `options'
 14.     compare_inner_quantiles, n(`n') bench(`bench') qopts(nq(10))   qwhich(xtile) `options'
 15.     compare_inner_quantiles, n(`n') bench(`bench') qopts(nq(2))    qwhich(xtile) `options'
 16. 
.     compare_inner_quantiles, n(`n') bench(`bench') qopts(altdef nq(500))  qwhich(xtile) `options'
 17.     compare_inner_quantiles, n(`n') bench(`bench') qopts(altdef nq(100))  qwhich(xtile) `options'
 18.     compare_inner_quantiles, n(`n') bench(`bench') qopts(altdef nq(10))   qwhich(xtile) `options'
 19.     compare_inner_quantiles, n(`n') bench(`bench') qopts(altdef nq(2))    qwhich(xtile) `options'
 20. 
.     compare_inner_quantiles, n(`n') bench(`bench') qopts(nq(500))  qwhich(pctile) `options'
 21.     compare_inner_quantiles, n(`n') bench(`bench') qopts(nq(100))  qwhich(pctile) `options'
 22.     compare_inner_quantiles, n(`n') bench(`bench') qopts(nq(10))   qwhich(pctile) `options'
 23.     compare_inner_quantiles, n(`n') bench(`bench') qopts(nq(2))    qwhich(pctile) `options'
 24. 
.     compare_inner_quantiles, n(`n') bench(`bench') qopts(altdef nq(500))  qwhich(pctile) `options'
 25.     compare_inner_quantiles, n(`n') bench(`bench') qopts(altdef nq(100))  qwhich(pctile) `options'
 26.     compare_inner_quantiles, n(`n') bench(`bench') qopts(altdef nq(10))   qwhich(pctile) `options'
 27.     compare_inner_quantiles, n(`n') bench(`bench') qopts(altdef nq(2))    qwhich(pctile) `options'
 28. end

. 
. capture program drop compare_inner_quantiles

. program compare_inner_quantiles
  1.     syntax, [bench(int 5) n(real 100000) benchmode *]
  2.     local options `options' `benchmode'
  3. 
.     qui `noisily' gen_data, n(`n') random(2) double skipstr
  4.     qui expand `bench'
  5.     gen long   ix = _n
  6.     gen double ru = rnormal() * 100
  7.     qui replace ix = . if mod(_n, `n') == 0
  8.     qui replace ru = . if mod(_n, `n') == 0
  9.     qui sort random1
 10. 
.     _compare_inner_gquantiles, `options'
 11. 
.     if ( "`benchmode'" == "" ) {
 12.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 13.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 14.         local from = cond(`in1' < `in2', `in1', `in2')
 15.         local to   = cond(`in1' > `in2', `in1', `in2')
 16.         _compare_inner_gquantiles in `from' / `to', `options'
 17. 
.         _compare_inner_gquantiles if random2 > 0, `options'
 18. 
.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 19.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 20.         local from = cond(`in1' < `in2', `in1', `in2')
 21.         local to   = cond(`in1' > `in2', `in1', `in2')
 22.         _compare_inner_gquantiles `anything' if random2 < 0 in `from' / `to', `options'
 23.     }
 24. end

. 
. ***********************************************************************
. *                             Comparisons                             *
. ***********************************************************************
. 
. capture program drop _compare_inner_gquantiles

. program _compare_inner_gquantiles
  1.     syntax [if] [in], [tol(real 1e-6) NOIsily qopts(str) qwhich(str) benchmode table *]
  2. 
.     if ( "`if'`in'" != "" ) {
  3.         local ifinstr ""
  4.         if ( "`if'" != "" ) local ifinstr `ifinstr' [`if']
  5.         if ( "`in'" != "" ) local ifinstr `ifinstr' [`in']
  6.     }
  7. 
.     local options `options' `benchmode' `table' qopts(`qopts')
  8. 
.     local N = trim("`: di %15.0gc _N'")
  9.     di as txt _n(1)
 10.     di as txt "Compare `qwhich'"
 11.     di as txt "     - opts:  `qopts'"
 12.     di as txt "     - if in: `ifinstr'"
 13.     di as txt "     - obs:   `N'"
 14.     if ( ("`benchmode'" != "") | ("`table'" != "") ) {
 15.     if ( "`qwhich'" == "xtile" ) {
 16.     di as txt "    xtile | fastxtile | gquantiles | ratio (x/g) | ratio (f/g) | varlist"
 17.     di as txt "    ----- | --------- | ---------- | ----------- | ----------- | -------"
 18.     }
 19.     if ( "`qwhich'" == "pctile" ) {
 20.     di as txt "    pctile | gquantiles | ratio (p/g) | varlist"
 21.     di as txt "    ------ | ---------- | ----------- | -------"
 22.     }
 23.     if ( "`qwhich'" == "_pctile" ) {
 24.     di as txt "    _pctile | gquantiles | ratio (_/g) | varlist"
 25.     di as txt "    ------- | ---------- | ----------- | -------"
 26.     }
 27.     }
 28. 
.     _compare_inner_`qwhich' double1 `if' `in', `options' note("~ U(0,  1000), no missings, groups of size `bench'")
 29.     _compare_inner_`qwhich' double3 `if' `in', `options' note("~ N(10, 5), many missings, groups of size `bench'")
 30.     _compare_inner_`qwhich' ru      `if' `in', `options' note("~ N(0, 100), few missings, unique")
 31. 
.     _compare_inner_`qwhich' int1 `if' `in', `options' note("discrete (no missings, many groups)")
 32.     _compare_inner_`qwhich' int3 `if' `in', `options' note("discrete (many missings, few groups)")
 33.     _compare_inner_`qwhich' ix   `if' `in', `options' note("discrete (few missings, unique)")
 34. 
.     _compare_inner_`qwhich' int1^2 + 3 * double1          `if' `in', `options'
 35.     _compare_inner_`qwhich' 2 * int1 + log(double1)       `if' `in', `options'
 36.     _compare_inner_`qwhich' int1 * double3 + exp(double3) `if' `in', `options'
 37. end

. 
. ***********************************************************************
. *                              Internals                              *
. ***********************************************************************
. 
. capture program drop _compare_inner_xtile

. program _compare_inner_xtile
  1.     syntax anything [if] [in], [note(str) benchmode table qopts(str) *]
  2.     tempvar xtile fxtile gxtile
  3. 
.     timer clear
  4.     timer on 43
  5.     qui gquantiles `gxtile' = `anything' `if' `in', xtile `qopts'
  6.     timer off 43
  7.     qui timer list
  8.     local time_gxtile = r(t43)
  9. 
.     timer clear
 10.     timer on 42
 11.     qui xtile `xtile' = `anything' `if' `in', `qopts'
 12.     timer off 42
 13.     qui timer list
 14.     local time_xtile = r(t42)
 15. 
.     timer clear
 16.     timer on 44
 17.     cap fastxtile `fxtile' = `anything' `if' `in', `qopts'
 18.     local rc_f = _rc
 19.     timer off 44
 20.     qui timer list
 21.     local time_fxtile = r(t44)
 22.     if ( `rc_f' ) {
 23.         local time_fxtile = .
 24.         di "(note: fastxtile failed where xtile succeeded)"
 25.     }
 26. 
.     cap assert `xtile' == `gxtile'
 27.     if ( _rc ) {
 28.         if ( strpos("`qopts'", "altdef") ) {
 29.             local qopts: subinstr local qopts "altdef" " ", all
 30.             qui gquantiles `anything' `if' `in', xtile(`gxtile') `qopts' replace
 31.             cap assert `xtile' == `gxtile'
 32.             if ( _rc ) {
 33.                 di as err "    compare_xtile (failed): gquantiles xtile = `anything' gave different levels to xtile"
 34.             }
 35.             else {
 36.                 di as err "    compare_xtile (???)"
 37.                 di as err "Note: gquantiles xtile = `anything', altdef gave different levels to xtile, altdef."
 38.                 di as err "However, gquantiles xtile = `anything' without altdef was the same.  On some systems,"
 39.                 di as err "xtile.ado has a typo in line 135. Change -altdev- to -altdef- and re-run the tests."
 40.             }
 41.             exit 198
 42.         }
 43.         else {
 44.             di as err "    compare_xtile (failed): gquantiles xtile = `anything' gave different levels to xtile"
 45.             cap assert `xtile' == `fxtile'
 46.             if ( _rc & (`rc_f' == 0) ) {
 47.                 di as txt "    (note: fastxtile also gave different levels)"
 48.             }
 49.             exit 198
 50.         }
 51.     }
 52. 
.     cap assert `xtile' == `fxtile'
 53.     if ( _rc & (`rc_f' == 0) ) {
 54.         di as txt "    (note: fastxtile gave different levels to xtile)"
 55.     }
 56. 
.     if ( "`benchmode'" == "" ) {
 57.         di as txt "    compare_xtile (passed): gquantiles xtile = `anything' was the same as xtile"
 58.         exit 0
 59.     }
 60. 
.     if ( ("`table'" != "") | ("`benchmode'" != "") ) {
 61.         local rs = `time_xtile'  / `time_gxtile'
 62.         local rf = `time_fxtile' / `time_gxtile'
 63.         di as txt "    `:di %5.3g `time_xtile'' | `:di %9.3g `time_fxtile'' | `:di %10.3g `time_gxtile'' | `:di %11.3g `rs'' | `:di %11.3g `rf'' | `anything' (`note')"
 64.     }
 65. end

. 
. capture program drop _compare_inner_pctile

. program _compare_inner_pctile
  1.     syntax anything [if] [in], [note(str) benchmode table qopts(str) reltol(real 1e-9) tol(real 1e-6) note(str) *]
  2.     tempvar pctile pctpct gpctile gpctpct
  3. 
.     if ( "`benchmode'" == "" ) {
  4.         local gqopts `qopts' genp(`gpctpct')
  5.         local  qopts `qopts' genp(`pctpct')
  6.     }
  7.     else {
  8.         local gqopts `qopts'
  9.         local  qopts `qopts'
 10.     }
 11. 
.     timer clear
 12.     timer on 43
 13.     qui gquantiles `gpctile' = `anything' `if' `in', pctile `gqopts'
 14.     timer off 43
 15.     qui timer list
 16.     local time_gpctile = r(t43)
 17. 
.     timer clear
 18.     timer on 42
 19.     qui pctile `pctile' = `anything' `if' `in', `qopts'
 20.     timer off 42
 21.     qui timer list
 22.     local time_pctile = r(t42)
 23. 
.     tempvar comp
 24.     qui gen double `comp' = `pctile' * `reltol' if !mi(`pctile')
 25.     qui replace `comp'    = cond(`comp' < `tol', `tol', `comp') if !mi(`pctile')
 26.     cap assert abs(`pctile' - `gpctile') < `tol' | ( mi(`pctile') & mi(`gpctile'))
 27.     if ( _rc ) {
 28.         tempvar gpctile2
 29.         qui gen `:type `pctile'' `gpctile2' = `gpctile'
 30.         cap assert abs(`pctile' - `gpctile2') < `comp' | ( mi(`pctile') & mi(`gpctile'))
 31.         if ( _rc ) {
 32.             di as err "    compare_pctile (failed): gquantiles pctile = `anything' gave different percentiles to pctile (reltol = `reltol')"
 33.             exit 198
 34.         }
 35.     }
 36. 
.     if ( "`benchmode'" == "" ) {
 37.         cap assert abs(`pctpct' - `gpctpct') < `tol' | ( mi(`pctpct') & mi(`gpctpct'))
 38.         if ( _rc ) {
 39.             tempvar gpctpct2
 40.             qui gen `:type `pctpct'' `gpctpct2' = `gpctpct'
 41.             qui replace `comp' = `pctpct' * `reltol' if !mi(`pctpct')
 42.             qui replace `comp' = cond(`comp' < `tol', `tol', `comp') if !mi(`pctpct')
 43.             cap assert abs(`pctpct' - `gpctpct2') < `comp' | ( mi(`pctile') & mi(`gpctile'))
 44.             if ( _rc ) {
 45.                 di as err "    compare_pctile (failed): gquantiles pctile = `anything', genp() gave different percentages to pctile, genp()"
 46.                 exit 198
 47.             }
 48.             else {
 49.                 di as txt "    compare_pctile (passed): gquantiles pctile = `anything', genp() gave similar results to pctile (reltol = `reltol', tol = `tol')"
 50.             }
 51.         }
 52.         else {
 53.             di as txt "    compare_pctile (passed): gquantiles pctile = `anything', genp() gave similar results to pctile (reltol = `reltol', tol = `tol')"
 54.         }
 55.     }
 56. 
.     if ( ("`table'" != "") | ("`benchmode'" != "") ) {
 57.         local rs = `time_pctile'  / `time_gpctile'
 58.         di as txt "    `:di %6.3g `time_pctile'' | `:di %10.3g `time_gpctile'' | `:di %11.3g `rs'' | `anything' (`note')"
 59.     }
 60. end

. 
. capture program drop _compare_inner__pctile

. program _compare_inner__pctile
  1.     syntax anything [if] [in], [benchmode table qopts(str) reltol(real 1e-9) tol(real 1e-6) note(str) *]
  2.     tempvar exp
  3.     qui gen double `exp' = `anything'
  4. 
.     timer clear
  5.     timer on 43
  6.     qui gquantiles `exp' `if' `in', _pctile `qopts' v bench(2)
  7.     timer off 43
  8.     qui timer list
  9.     local time_gpctile = r(t43)
 10.     local nq = `r(nqused)'
 11.     forvalues q = 1 / `nq' {
 12.         local qr_`q' = `r(r`q')'
 13.     }
 14. 
.     timer clear
 15.     timer on 42
 16.     qui _pctile `exp' `if' `in', `qopts'
 17.     timer off 42
 18.     qui timer list
 19.     local time_pctile = r(t42)
 20.     forvalues q = 1 / `nq' {
 21.         local r_`q' = `r(r`q')'
 22.     }
 23. 
.     forvalues q = 1 / `nq' {
 24.         if ( abs(`qr_`q'' - `r_`q'') > `tol' ) {
 25.             local comp = `r_`q'' * `reltol'
 26.             local comp = cond(`comp' < `tol', `tol', `comp')
 27.             if ( abs(`qr_`q'' - `r_`q'') > `comp' ) {
 28.                 di as err "    compare__pctile (failed): gquantiles `anything', _pctile gave different percentiles to _pctile (reltol = `reltol')"
 29.                 exit 198
 30.             }
 31.         }
 32.     }
 33. 
.     if ( "`benchmode'" == "" ) {
 34.         di as txt "    compare_pctile (passed): gquantiles `anything', _pctile gave similar results to _pctile (reltol = `reltol', tol = `tol')"
 35.     }
 36. 
.     if ( ("`table'" != "") | ("`benchmode'" != "") ) {
 37.         local rs = `time_pctile'  / `time_gpctile'
 38.         di as txt "    `:di %7.3g `time_pctile'' | `:di %10.3g `time_gpctile'' | `:di %11.3g `rs'' | `anything' (`note')"
 39.     }
 40. end

. capture program drop checks_gegen

. program checks_gegen
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "checks_egen, `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     qui `noisily' gen_data, n(5000) random(2)
  4.     qui expand 2
  5.     gen long ix = _n
  6. 
.     checks_inner_egen, `options'
  7. 
.     checks_inner_egen -str_12,              `options'
  8.     checks_inner_egen str_12 -str_32,       `options'
  9.     checks_inner_egen str_12 -str_32 str_4, `options'
 10. 
.     checks_inner_egen -double1,                 `options'
 11.     checks_inner_egen double1 -double2,         `options'
 12.     checks_inner_egen double1 -double2 double3, `options'
 13. 
.     checks_inner_egen -int1,           `options'
 14.     checks_inner_egen int1 -int2,      `options'
 15.     checks_inner_egen int1 -int2 int3, `options'
 16. 
.     checks_inner_egen -int1 -str_32 -double1,                                         `options'
 17.     checks_inner_egen int1 -str_32 double1 -int2 str_12 -double2,                     `options'
 18.     checks_inner_egen int1 -str_32 double1 -int2 str_12 -double2 int3 -str_4 double3, `options'
 19. 
.     clear
 20.     gen x = 1
 21.     cap gegen y = group(x)
 22.     assert _rc == 111
 23. 
.     clear
 24.     set obs 10
 25.     gen x = 1
 26.     gegen y = group(x) if x > 1
 27.     gegen z = tag(x)   if x > 1
 28. end

. 
. capture program drop checks_inner_egen

. program checks_inner_egen
  1.     syntax [anything], [tol(real 1e-6) *]
  2. 
.     local stats total sum mean sd max min count median iqr percent first last firstnm lastnm
  3.     local percentiles 1 10 30.5 50 70.5 90 99
  4. 
.     tempvar gvar
  5.     foreach fun of local stats {
  6.         `noisily' gegen `gvar' = `fun'(random1), by(`anything') replace `options'
  7.         `noisily' gegen `gvar' = `fun'(random*), by(`anything') replace `options'
  8.     }
  9. 
.     foreach p in `percentiles' {
 10.         `noisily' gegen `gvar' = pctile(random1), p(`p') by(`anything') replace `options'
 11.         `noisily' gegen `gvar' = pctile(random*), p(`p') by(`anything') replace `options'
 12.     }
 13. 
.     if ( "`anything'" != "" ) {
 14.         `noisily' gegen `gvar' = tag(`anything'),   replace `options'
 15.         `noisily' gegen `gvar' = group(`anything'), replace `options'
 16.         `noisily' gegen `gvar' = count(1), by(`anything') replace `options'
 17.     }
 18. end

. 
. ***********************************************************************
. *                               Compare                               *
. ***********************************************************************
. 
. capture program drop compare_egen

. program compare_egen
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "consistency_egen, `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     qui `noisily' gen_data, n(1000) random(2)
  4.     qui expand 100
  5. 
.     compare_inner_egen, `options' tol(`tol')
  6. 
.     compare_inner_egen str_12,              `options' tol(`tol')
  7.     compare_inner_egen str_12 str_32,       `options' tol(`tol') sort
  8.     compare_inner_egen str_12 str_32 str_4, `options' tol(`tol') shuffle
  9. 
.     compare_inner_egen double1,                 `options' tol(`tol') shuffle
 10.     compare_inner_egen double1 double2,         `options' tol(`tol')
 11.     compare_inner_egen double1 double2 double3, `options' tol(`tol') sort
 12. 
.     compare_inner_egen int1,           `options' tol(`tol') sort
 13.     compare_inner_egen int1 int2,      `options' tol(`tol') shuffle
 14.     compare_inner_egen int1 int2 int3, `options' tol(`tol')
 15. 
.     compare_inner_egen int1 str_32 double1,                                        `options' tol(`tol')
 16.     compare_inner_egen int1 str_32 double1 int2 str_12 double2,                    `options' tol(`tol')
 17.     compare_inner_egen int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options' tol(`tol')
 18. end

. 
. capture program drop compare_inner_egen

. program compare_inner_egen
  1.     syntax [anything], [tol(real 1e-6) sort shuffle *]
  2. 
.     tempvar rsort
  3.     if ( "`shuffle'" != "" ) gen `rsort' = runiform()
  4.     if ( "`shuffle'" != "" ) sort `rsort'
  5.     if ( ("`sort'" != "") & ("`anything'" != "") ) hashsort `anything'
  6. 
.     local N = trim("`: di %15.0gc _N'")
  7.     local hlen = 31 + length("`anything'") + length("`N'")
  8. 
.     di _n(2) "Checking egen. N = `N'; varlist = `anything'" _n(1) "{hline `hlen'}"
  9. 
.     _compare_inner_egen `anything', `options' tol(`tol')
 10. 
.     local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 11.     local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 12.     local from = cond(`in1' < `in2', `in1', `in2')
 13.     local to   = cond(`in1' > `in2', `in1', `in2')
 14.     _compare_inner_egen `anything' in `from' / `to', `options' tol(`tol')
 15. 
.     _compare_inner_egen `anything' if random2 > 0, `options' tol(`tol')
 16. 
.     local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 17.     local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 18.     local from = cond(`in1' < `in2', `in1', `in2')
 19.     local to   = cond(`in1' > `in2', `in1', `in2')
 20.     _compare_inner_egen `anything' if random2 < 0 in `from' / `to', `options' tol(`tol')
 21. end

. 
. capture program drop _compare_inner_egen

. program _compare_inner_egen
  1.     syntax [anything] [if] [in], [tol(real 1e-6) *]
  2. 
.     local stats       total sum mean sd max min count median iqr
  3.     local percentiles 1 10 30 50 70 90 99
  4. 
.     cap drop g*_*
  5.     cap drop c*_*
  6. 
.     tempvar g_fun
  7. 
.     if ( "`if'`in'" == "" ) {
  8.         di _n(1) "Checking full egen range: `anything'"
  9.     }
 10.     else if ( "`if'`in'" != "" ) {
 11.         di _n(1) "Checking [`if' `in'] egen range: `anything'"
 12.     }
 13. 
.     foreach fun of local stats {
 14.         timer clear
 15.         timer on 43
 16.         qui `noisily' gegen float `g_fun' = `fun'(random1) `if' `in', by(`anything') replace `options'
 17.         timer off 43
 18.         qui timer list
 19.         local time_gegen = r(t43)
 20. 
. 
.         timer clear
 21.         timer on 42
 22.         qui `noisily'  egen float c_`fun' = `fun'(random1) `if' `in', by(`anything')
 23.         timer off 42
 24.         qui timer list
 25.         local time_egen = r(t42)
 26. 
.         local rs = `time_egen'  / `time_gegen'
 27.         local tinfo `:di %4.3g `time_gegen'' vs `:di %4.3g `time_egen'', ratio `:di %4.3g `rs''
 28. 
.         cap noi assert (`g_fun' == c_`fun') | abs(`g_fun' - c_`fun') < `tol'
 29.         if ( _rc ) {
 30.             di as err "    compare_egen (failed): gegen `fun' not equal to egen (tol = `tol'; `tinfo')"
 31.             exit _rc
 32.         }
 33.         else di as txt "    compare_egen (passed): gegen `fun' results similar to egen (tol = `tol'; `tinfo')"
 34.     }
 35. 
.     foreach p in `percentiles' {
 36.         timer clear
 37.         timer on 43
 38.         qui  `noisily' gegen float `g_fun' = pctile(random1) `if' `in', by(`anything') p(`p') replace `options'
 39.         timer off 43
 40.         qui timer list
 41.         local time_gegen = r(t43)
 42. 
. 
.         timer clear
 43.         timer on 42
 44.         qui  `noisily'  egen float c_p`p'  = pctile(random1) `if' `in', by(`anything') p(`p')
 45.         timer off 42
 46.         qui timer list
 47.         local time_egen = r(t42)
 48. 
.         local rs = `time_egen'  / `time_gegen'
 49.         local tinfo `:di %4.3g `time_gegen'' vs `:di %4.3g `time_egen'', ratio `:di %4.3g `rs''
 50. 
.         cap noi assert (`g_fun' == c_p`p') | abs(`g_fun' - c_p`p') < `tol'
 51.         if ( _rc ) {
 52.             di as err "    compare_egen (failed): gegen percentile `p' not equal to egen (tol = `tol'; `tinfo')"
 53.             exit _rc
 54.         }
 55.         else di as txt "    compare_egen (passed): gegen percentile `p' results similar to egen (tol = `tol'; `tinfo')"
 56.     }
 57. 
.     foreach fun in tag group {
 58.         timer clear
 59.         timer on 43
 60.         qui  `noisily' gegen float `g_fun' = `fun'(`anything') `if' `in', replace `options'
 61.         timer off 43
 62.         qui timer list
 63.         local time_gegen = r(t43)
 64. 
. 
.         timer clear
 65.         timer on 42
 66.         qui  `noisily'  egen float c_`fun' = `fun'(`anything') `if' `in'
 67.         timer off 42
 68.         qui timer list
 69.         local time_egen = r(t42)
 70. 
.         local rs = `time_egen'  / `time_gegen'
 71.         local tinfo `:di %4.3g `time_gegen'' vs `:di %4.3g `time_egen'', ratio `:di %4.3g `rs''
 72. 
.         cap noi assert (`g_fun' == c_`fun') | abs(`g_fun' - c_`fun') < `tol'
 73.         if ( _rc ) {
 74.             di as err "    compare_egen (failed): gegen `fun' not equal to egen (tol = `tol'; `tinfo')"
 75.             exit _rc
 76.         }
 77.         else di as txt "    compare_egen (passed): gegen `fun' results similar to egen (tol = `tol'; `tinfo')"
 78. 
.         timer clear
 79.         timer on 43
 80.         qui  `noisily' gegen float `g_fun' = `fun'(`anything') `if' `in', missing replace `options'
 81.         timer off 43
 82.         qui timer list
 83.         local time_gegen = r(t43)
 84. 
. 
.         timer clear
 85.         timer on 42
 86.         qui  `noisily'  egen float c_`fun'2 = `fun'(`anything') `if' `in', missing
 87.         timer off 42
 88.         qui timer list
 89.         local time_egen = r(t42)
 90. 
.         local rs = `time_egen'  / `time_gegen'
 91.         local tinfo `:di %4.3g `time_gegen'' vs `:di %4.3g `time_egen'', ratio `:di %4.3g `rs''
 92. 
.         cap noi assert (`g_fun' == c_`fun'2) | abs(`g_fun' - c_`fun'2) < `tol'
 93.         if ( _rc ) {
 94.             di as err "    compare_egen (failed): gegen `fun', missing not equal to egen (tol = `tol'; `tinfo')"
 95.             exit _rc
 96.         }
 97.         else di as txt "    compare_egen (passed): gegen `fun', missing results similar to egen (tol = `tol'; `tinfo')"
 98.     }
 99. 
.     {
100.         qui  `noisily' gegen g_g1 = group(`anything') `if' `in', counts(g_c1) fill(.) v `options' missing
101.         qui  `noisily' gegen g_g2 = group(`anything') `if' `in', counts(g_c2)         v `options' missing
102.         qui  `noisily' gegen g_c3 = count(1) `if' `in', by(`anything')
103.         qui  `noisily'  egen c_t1 = tag(`anything') `if' `in',  missing
104.         cap noi assert ( (g_c1 == g_c3) | ((c_t1 == 0) & (g_c1 == .)) ) & (g_c2 == g_c3)
105.         if ( _rc ) {
106.             di as err "    compare_egen (failed): gegen `fun' counts not equal to gegen count (tol = `tol')"
107.             exit _rc
108.         }
109.         else di as txt "    compare_egen (passed): gegen `fun' counts results similar to gegen count (tol = `tol')"
110.     }
111. 
.     cap drop g_*
112.     cap drop c_*
113. end

. 
. ***********************************************************************
. *                             Benchmarks                              *
. ***********************************************************************
. 
. capture program drop bench_egen

. program bench_egen
  1.     syntax, [tol(real 1e-6) bench(int 1) n(int 1000) NOIsily *]
  2. 
.     qui gen_data, n(`n') random(1)
  3.     qui expand `=100 * `bench''
  4.     qui sort random1
  5. 
.     local N = trim("`: di %15.0gc _N'")
  6.     local J = trim("`: di %15.0gc `n''")
  7. 
.     di _n(1)
  8.     di "Benchmark vs egen, obs = `N', J = `J' (in seconds)"
  9.     di "     egen | fegen | gegen | ratio (e/g) | ratio (f/g) | varlist"
 10.     di "     ---- | ----- | ----- | ----------- | ----------- | -------"
 11. 
.     versus_egen str_12,              `options' fegen
 12.     versus_egen str_12 str_32,       `options' fegen
 13.     versus_egen str_12 str_32 str_4, `options' fegen
 14. 
.     versus_egen double1,                 `options' fegen
 15.     versus_egen double1 double2,         `options' fegen
 16.     versus_egen double1 double2 double3, `options' fegen
 17. 
.     versus_egen int1,           `options' fegen
 18.     versus_egen int1 int2,      `options' fegen
 19.     versus_egen int1 int2 int3, `options' fegen
 20. 
.     versus_egen int1 str_32 double1,                                        `options'
 21.     versus_egen int1 str_32 double1 int2 str_12 double2,                    `options'
 22.     versus_egen int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options'
 23. 
.     di _n(1) "{hline 80}" _n(1) "bench_egen, `options'" _n(1) "{hline 80}" _n(1)
 24. end

. 
. capture program drop versus_egen

. program versus_egen, rclass
  1.     syntax varlist, [fegen *]
  2. 
.     preserve
  3.         timer clear
  4.         timer on 42
  5.         cap egen id = group(`varlist')
  6.         timer off 42
  7.         qui timer list
  8.         local time_egen = r(t42)
  9.     restore
 10. 
.     preserve
 11.         timer clear
 12.         timer on 43
 13.         cap gegen id = group(`varlist'), `options'
 14.         timer off 43
 15.         qui timer list
 16.         local time_gegen = r(t43)
 17.     restore
 18. 
.     if ( "`fegen'" == "fegen" ) {
 19.     preserve
 20.         timer clear
 21.         timer on 44
 22.         cap fegen id = group(`varlist')
 23.         timer off 44
 24.         qui timer list
 25.         local time_fegen = r(t44)
 26.     restore
 27.     }
 28.     else {
 29.         local time_fegen = .
 30.     }
 31. 
.     local rs = `time_egen'  / `time_gegen'
 32.     local rf = `time_fegen' / `time_gegen'
 33.     di "    `:di %5.3g `time_egen'' | `:di %5.3g `time_fegen'' | `:di %5.3g `time_gegen'' | `:di %11.3g `rs'' | `:di %11.3g `rf'' | `varlist'"
 34. end

. capture program drop checks_unique

. program checks_unique
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "checks_unique, `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     qui `noisily' gen_data, n(5000)
  4.     qui expand 2
  5.     gen long ix = _n
  6. 
.     checks_inner_unique str_12,              `options'
  7.     checks_inner_unique str_12 str_32,       `options' by(str_4) replace
  8.     checks_inner_unique str_12 str_32 str_4, `options'
  9. 
.     checks_inner_unique double1,                 `options'
 10.     checks_inner_unique double1 double2,         `options' by(double3) replace
 11.     checks_inner_unique double1 double2 double3, `options'
 12. 
.     checks_inner_unique int1,           `options'
 13.     checks_inner_unique int1 int2,      `options' by(int3) replace
 14.     checks_inner_unique int1 int2 int3, `options'
 15. 
.     checks_inner_unique int1 str_32 double1,                                        `options'
 16.     checks_inner_unique int1 str_32 double1 int2 str_12 double2,                    `options' by(int3 str_4 double3) replace
 17.     checks_inner_unique int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options'
 18. 
.     clear
 19.     gen x = 1
 20.     cap gunique x
 21.     assert _rc == 2000
 22. 
.     clear
 23.     set obs 10
 24.     gen x = 1
 25.     cap gunique x if x < 0
 26.     assert _rc == 0
 27. end

. 
. capture program drop checks_inner_unique

. program checks_inner_unique
  1.     syntax varlist, [*]
  2.     cap gunique `varlist', `options' v bench miss
  3.     assert _rc == 0
  4. 
.     cap gunique `varlist' in 1, `options' miss d
  5.     assert _rc == 0
  6.     assert `r(N)' == `r(J)'
  7.     assert `r(J)' == 1
  8. 
.     cap gunique `varlist' if _n == 1, `options' miss
  9.     assert _rc == 0
 10.     assert `r(N)' == `r(J)'
 11.     assert `r(J)' == 1
 12. 
.     cap gunique `varlist' if _n < 10 in 5, `options' miss d
 13.     assert _rc == 0
 14.     assert `r(N)' == `r(J)'
 15.     assert `r(J)' == 1
 16. end

. 
. ***********************************************************************
. *                               Compare                               *
. ***********************************************************************
. 
. capture program drop compare_unique

. program compare_unique
  1.     syntax, [tol(real 1e-6) NOIsily distinct unique *]
  2. 
.     if ( "`distinct'`unique'" == "" ) local unique unique
  3.     if ( ("`distinct'" != "") & ("`unique'" != "") ) {
  4.         di as err "Specify only one of: unique distinct"
  5.         exit 198
  6.     }
  7. 
.     qui `noisily' gen_data, n(1000)
  8.     qui expand 100
  9. 
.     local N    = trim("`: di %15.0gc _N'")
 10.     local hlen = 22 + length("`options'") + length("`N'")
 11.     di _n(1) "{hline 80}" _n(1) "compare_`distinct'`unique', N = `N', `options'" _n(1) "{hline 80}" _n(1)
 12. 
.     local options `options' `distinct'`unique'
 13. 
.     compare_inner_unique str_12,              `options' sort
 14.     compare_inner_unique str_12 str_32,       `options' shuffle
 15.     compare_inner_unique str_12 str_32 str_4, `options'
 16. 
.     compare_inner_unique double1,                 `options'
 17.     compare_inner_unique double1 double2,         `options' sort
 18.     compare_inner_unique double1 double2 double3, `options' shuffle
 19. 
.     compare_inner_unique int1,           `options' shuffle
 20.     compare_inner_unique int1 int2,      `options'
 21.     compare_inner_unique int1 int2 int3, `options' sort
 22. 
.     compare_inner_unique int1 str_32 double1,                                        `options'
 23.     compare_inner_unique int1 str_32 double1 int2 str_12 double2,                    `options'
 24.     compare_inner_unique int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options'
 25. end

. 
. capture program drop compare_inner_unique

. program compare_inner_unique
  1.     syntax varlist, [distinct unique sort shuffle *]
  2. 
.     tempvar rsort
  3.     if ( "`shuffle'" != "" ) gen `rsort' = runiform()
  4.     if ( "`shuffle'" != "" ) sort `rsort'
  5.     if ( ("`sort'" != "") & ("`anything'" != "") ) hashsort `anything'
  6. 
.     if ( "`distinct'" != "" ) {
  7.         local joint joint
  8.         local rname ndistinct
  9.     }
 10.     else {
 11.         local joint
 12.         local rname unique
 13.     }
 14. 
.     local options `options' `joint'
 15. 
.     tempvar rsort ix
 16.     gen `rsort' = runiform()
 17.     gen long `ix' = _n
 18. 
.     cap `distinct'`unique' `varlist', `joint'
 19.     local nJ_`distinct'`unique' = `r(`rname')'
 20.     cap g`distinct'`unique' `varlist', `options'
 21.     local nJ_g`distinct'`unique' = `r(`rname')'
 22.     check_nlevels `nJ_`distinct'`unique'' `nJ_g`distinct'`unique'' , by( `varlist') `distinct'`unique'
 23. 
.     cap `distinct'`unique' `ix' `varlist', `joint'
 24.     local nJ_`distinct'`unique' = `r(`rname')'
 25.     cap g`distinct'`unique' `ix' `varlist', `options'
 26.     local nJ_g`distinct'`unique' = `r(`rname')'
 27.     check_nlevels `nJ_`distinct'`unique'' `nJ_g`distinct'`unique'' , by( ix `varlist') `distinct'`unique'
 28. 
.     cap `distinct'`unique' `rsort' `varlist', `joint'
 29.     local nJ_`distinct'`unique' = `r(`rname')'
 30.     cap g`distinct'`unique' `rsort' `varlist', `options'
 31.     local nJ_g`distinct'`unique' = `r(`rname')'
 32.     check_nlevels `nJ_`distinct'`unique'' `nJ_g`distinct'`unique'' , by( rsort `varlist') `distinct'`unique'
 33. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.     qui replace `ix' = `=_N / 2' if _n > `=_N / 2'
 34.     cap `distinct'`unique' `ix', `joint'
 35.     local nJ_`distinct'`unique' = `r(`rname')'
 36.     cap g`distinct'`unique' `ix', `options'
 37.     local nJ_g`distinct'`unique' = `r(`rname')'
 38.     check_nlevels `nJ_`distinct'`unique'' `nJ_g`distinct'`unique'' , by( ix) `distinct'`unique'
 39. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.     preserve
 40.         qui keep in 100 / `=ceil(`=_N / 2')'
 41.         cap `distinct'`unique' `ix' `varlist', `joint'
 42.         local nJ_`distinct'`unique' = `r(`rname')'
 43.     restore
 44.     cap g`distinct'`unique' `ix' `varlist' in 100 / `=ceil(`=_N / 2')', `options'
 45.     local nJ_g`distinct'`unique' = `r(`rname')'
 46.     check_nlevels  `nJ_`distinct'`unique'' `nJ_g`distinct'`unique'' , by( ix `varlist' in 100 / `=ceil(`=_N / 2')') `distinct'`unique'
 47. 
.     preserve
 48.         qui keep in `=ceil(`=_N / 2')' / `=_N'
 49.         cap `distinct'`unique' `ix' `varlist', `joint'
 50.         local nJ_`distinct'`unique' = `r(`rname')'
 51.     restore
 52.     cap g`distinct'`unique' `ix' `varlist' in `=ceil(`=_N / 2')' / `=_N', `options'
 53.     local nJ_g`distinct'`unique' = `r(`rname')'
 54.     check_nlevels  `nJ_`distinct'`unique'' `nJ_g`distinct'`unique'' , by( ix `varlist' in `=ceil(`=_N / 2')' / `=_N') `distinct'`unique'
 55. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.     preserve
 56.         qui keep if _n < `=_N / 2'
 57.         cap `distinct'`unique' `ix' `varlist', `joint'
 58.         local nJ_`distinct'`unique' = `r(`rname')'
 59.     restore
 60.     cap g`distinct'`unique' `ix' `varlist' if _n < `=_N / 2', `options'
 61.     local nJ_g`distinct'`unique' = `r(`rname')'
 62.     check_nlevels  `nJ_`distinct'`unique'' `nJ_g`distinct'`unique'' , by( ix `varlist' if _n < `=_N / 2') `distinct'`unique'
 63. 
.     preserve
 64.         qui keep if _n > `=_N / 2'
 65.         cap `distinct'`unique' `ix' `varlist', `joint'
 66.         local nJ_`distinct'`unique' = `r(`rname')'
 67.     restore
 68.     cap g`distinct'`unique' `ix' `varlist' if _n > `=_N / 2', `options'
 69.     local nJ_g`distinct'`unique' = `r(`rname')'
 70.     check_nlevels  `nJ_`distinct'`unique'' `nJ_g`distinct'`unique'' , by( ix `varlist' if _n > `=_N / 2') `distinct'`unique'
 71. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.     qui replace `ix' = 100 in 1 / 100
 72. 
.     preserve
 73.         qui keep if _n < `=_N / 4' in 100 / `=ceil(`=_N / 2')'
 74.         cap `distinct'`unique' `ix' `varlist', `joint'
 75.         local nJ_`distinct'`unique' = `r(`rname')'
 76.     restore
 77.     cap g`distinct'`unique' `ix' `varlist' if _n < `=_N / 4' in 100 / `=ceil(`=_N / 2')', `options'
 78.     local nJ_g`distinct'`unique' = `r(`rname')'
 79.     check_nlevels  `nJ_`distinct'`unique'' `nJ_g`distinct'`unique'' , by( ix `varlist' if _n < `=_N / 4' in 100 / `=ceil(`=_N / 2')') `distinct'`unique'
 80. 
.     preserve
 81.         qui keep if _n > `=_N / 4' in `=ceil(`=_N / 1.5')' / `=_N'
 82.         cap `distinct'`unique' `ix' `varlist', `joint'
 83.         local nJ_`distinct'`unique' = `r(`rname')'
 84.     restore
 85.     cap g`distinct'`unique' `ix' `varlist' if _n > `=_N / 4' in `=ceil(`=_N / 1.5')' / `=_N', `options'
 86.     local nJ_g`distinct'`unique' = `r(`rname')'
 87.     check_nlevels  `nJ_`distinct'`unique'' `nJ_g`distinct'`unique'' , by( ix `varlist' if _n > `=_N / 4' in `=ceil(`=_N / 1.5')' / `=_N') `distinct'`unique'
 88. 
.     di _n(1)
 89. end

. 
. capture program drop check_nlevels

. program check_nlevels
  1.     syntax anything, by(str) [distinct unique]
  2. 
.     tokenize `anything'
  3.     local nJ   `1'
  4.     local nJ_g `2'
  5. 
.     if ( `nJ' != `nJ_g' ) {
  6.         di as err "    compare_`distinct'`unique' (failed): `distinct'`unique' `by' gave `nJ' levels but g`distinct'`unique' gave `nJ_g'"
  7.         exit 198
  8.     }
  9.     else {
 10.         di as txt "    compare_`distinct'`unique' (passed): `distinct'`unique' and g`distinct'`unique' `by' gave the same number of levels"
 11.     }
 12. end

. 
. ***********************************************************************
. *                             Benchmarks                              *
. ***********************************************************************
. 
. capture program drop bench_unique

. program bench_unique
  1.     syntax, [tol(real 1e-6) bench(int 1) n(int 1000) NOIsily distinct joint distunique *]
  2. 
.     if ( "`distinct'" != "" ) {
  3.         local dstr distinct
  4.         local dsep --------
  5.     }
  6.     else {
  7.         local dstr unique
  8.         local dsep ------
  9.     }
 10. 
.     if ( "`joint'" != "" ) {
 11.         local dj   , joint;
 12.     }
 13.     else {
 14.         local dj   ,
 15.     }
 16. 
.     local options `options' `distinct' `joint' `distunique'
 17. 
.     qui `noisily' gen_data, n(`n')
 18.     qui expand `=100 * `bench''
 19.     qui gen rsort = rnormal()
 20.     qui sort rsort
 21. 
.     local N = trim("`: di %15.0gc _N'")
 22.     local J = trim("`: di %15.0gc `n''")
 23. 
.     if ( ("`distunique'" != "") & ("`joint'" != "") ) {
 24.         di as txt _n(1)
 25.         di as txt "Benchmark vs `dstr'`dj' obs = `N', all calls include a unique index (in seconds)"
 26.         di as txt "     `dstr' |    unique | g`dstr' | ratio (d/g) | ratio (u/g) | varlist"
 27.         di as txt "     `dsep' | -`dsep' | -`dsep' | ----------- | ----------- | -------"
 28.     }
 29.     else {
 30.         di as txt _n(1)
 31.         di as txt "Benchmark vs `dstr'`dj' obs = `N', all calls include a unique index (in seconds)"
 32.         di as txt "     `dstr' | f`dstr' | g`dstr' | ratio (d/g) | ratio (u/g) | varlist"
 33.         di as txt "     `dsep' | -`dsep' | -`dsep' | ----------- | ----------- | -------"
 34.     }
 35. 
.     versus_unique str_12,              `options' funique unique
 36.     versus_unique str_12 str_32,       `options' funique unique
 37.     versus_unique str_12 str_32 str_4, `options' funique unique
 38. 
.     versus_unique double1,                 `options' funique unique
 39.     versus_unique double1 double2,         `options' funique unique
 40.     versus_unique double1 double2 double3, `options' funique unique
 41. 
.     versus_unique int1,           `options' funique unique
 42.     versus_unique int1 int2,      `options' funique unique
 43.     versus_unique int1 int2 int3, `options' funique unique
 44. 
.     versus_unique int1 str_32 double1,                                        unique `options'
 45.     versus_unique int1 str_32 double1 int2 str_12 double2,                    unique `options'
 46.     versus_unique int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, unique `options'
 47. 
.     if ( ("`distunique'" != "") & ("`joint'" != "") ) {
 48.         di as txt _n(1)
 49.         di as txt "Benchmark vs `dstr'`dj' obs = `N', J = `J' (in seconds)"
 50.         di as txt "     `dstr' |    unique | g`dstr' | ratio (d/g) | ratio (u/g) | varlist"
 51.         di as txt "     `dsep' | -`dsep' | -`dsep' | ----------- | ----------- | -------"
 52.     }
 53.     else {
 54.         di as txt _n(1)
 55.         di as txt "Benchmark vs `dstr'`dj' obs = `N', J = `J' (in seconds)"
 56.         di as txt "     `dstr' | f`dstr' | g`dstr' | ratio (u/g) | ratio (f/g) | varlist"
 57.         di as txt "     `dsep' | -`dsep' | -`dsep' | ----------- | ----------- | -------"
 58.     }
 59. 
.     versus_unique str_12,              `options' funique
 60.     versus_unique str_12 str_32,       `options' funique
 61.     versus_unique str_12 str_32 str_4, `options' funique
 62. 
.     versus_unique double1,                 `options' funique
 63.     versus_unique double1 double2,         `options' funique
 64.     versus_unique double1 double2 double3, `options' funique
 65. 
.     versus_unique int1,           `options' funique
 66.     versus_unique int1 int2,      `options' funique
 67.     versus_unique int1 int2 int3, `options' funique
 68. 
.     versus_unique int1 str_32 double1,                                        `options'
 69.     versus_unique int1 str_32 double1 int2 str_12 double2,                    `options'
 70.     versus_unique int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options'
 71. 
.     di as txt _n(1) "{hline 80}" _n(1) "bench_unique, `options'" _n(1) "{hline 80}" _n(1)
 72. end

. 
. capture program drop versus_unique

. program versus_unique, rclass
  1.     syntax varlist, [funique unique distinct joint distunique *]
  2.     if ( "`unique'" == "unique" ) {
  3.         tempvar ix
  4.         gen `ix' = `=_N' - _n
  5.         if ( strpos("`varlist'", "str") ) qui tostring `ix', replace
  6.     }
  7. 
.     preserve
  8.         timer clear
  9.         timer on 42
 10.         cap unique `varlist' `ix'
 11.         assert inlist(_rc, 0, 459)
 12.         timer off 42
 13.         qui timer list
 14.         local time_unique = r(t42)
 15.     restore
 16. 
.     preserve
 17.         timer clear
 18.         timer on 43
 19.         cap gunique `varlist' `ix', `options'
 20.         assert inlist(_rc, 0, 459)
 21.         timer off 43
 22.         qui timer list
 23.         local time_gunique = r(t43)
 24.     restore
 25. 
.     if ( ("`funique'" == "funique") & ("`distinct'" == "") ) {
 26.     preserve
 27.         timer clear
 28.         timer on 44
 29.         cap funique `varlist' `ix'
 30.         assert inlist(_rc, 0, 459)
 31.         timer off 44
 32.         qui timer list
 33.         local time_funique = r(t44)
 34.     restore
 35.     }
 36.     else if ( "`distunique'" != "" ) {
 37.     preserve
 38.         timer clear
 39.         timer on 44
 40.         cap unique `varlist' `ix'
 41.         assert inlist(_rc, 0, 459)
 42.         timer off 44
 43.         qui timer list
 44.         local time_funique = r(t44)
 45.     restore
 46.     }
 47.     else {
 48.         local time_funique = .
 49.     }
 50. 
.     local rs = `time_unique'  / `time_gunique'
 51.     local rf = `time_funique' / `time_gunique'
 52. 
.     if ( "`distinct'" == "" ) {
 53.     di as txt "    `:di %7.3g `time_unique'' | `:di %7.3g `time_funique'' | `:di %7.3g `time_gunique'' | `:di %11.3g `rs'' | `:di %11.3g `rf'' | `varlist'"
 54.     }
 55.     else {
 56.     di as txt "    `:di %9.3g `time_unique'' | `:di %9.3g `time_funique'' | `:di %9.3g `time_gunique'' | `:di %11.3g `rs'' | `:di %11.3g `rf'' | `varlist'"
 57.     }
 58. end

. 
. * Prototype of -unique-
. * ---------------------
. 
. cap mata: mata drop funique()

. cap pr drop funique

. program funique
  1.         syntax varlist [if] [in], [Detail]
  2.         
.         mata: funique("`varlist'", "`detail'"!="")
  3. end

. 
. mata:
------------------------------------------------- mata (type end to exit) -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
: mata set matastrict off

: void funique(string scalar varlist, real scalar detail)
> {
>         class Factor scalar F
>         F = factor(varlist)
>         printf("{txt}Number of unique values of turn is {res}%-11.0f{txt}\n", F.num_levels)
>         printf("{txt}Number of records is {res}%-11.0f{txt}\n", F.num_obs)
>         if (detail) {
>                 (void) st_addvar("long", tempvar=st_tempname())
>                 st_store(1::F.num_levels, tempvar, F.counts)
>                 st_varlabel(tempvar, "Records per " + invtokens(F.varlist))
>                 stata("su " + tempvar + ", detail")
>         }
> }

: end
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

. capture program drop checks_levelsof

. program checks_levelsof
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "checks_levelsof, `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     qui `noisily' gen_data, n(50)
  4.     qui expand 200
  5.     gen long ix = _n
  6. 
.     checks_inner_levelsof str_12,              `options'
  7.     checks_inner_levelsof str_12 str_32,       `options'
  8.     checks_inner_levelsof str_12 str_32 str_4, `options'
  9. 
.     checks_inner_levelsof double1,                 `options'
 10.     checks_inner_levelsof double1 double2,         `options'
 11.     checks_inner_levelsof double1 double2 double3, `options'
 12. 
.     checks_inner_levelsof int1,           `options'
 13.     checks_inner_levelsof int1 int2,      `options'
 14.     checks_inner_levelsof int1 int2 int3, `options'
 15. 
.     checks_inner_levelsof int1 str_32 double1,                                        `options'
 16.     checks_inner_levelsof int1 str_32 double1 int2 str_12 double2,                    `options'
 17.     checks_inner_levelsof int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options'
 18. 
.     clear
 19.     gen x = 1
 20.     cap glevelsof x
 21.     assert _rc == 2000
 22. 
.     clear
 23.     set obs 100000
 24.     gen x = _n
 25.     cap glevelsof x in 1 / 10000 if mod(x, 3) == 0
 26.     assert _rc == 0
 27. end

. 
. capture program drop checks_inner_levelsof

. program checks_inner_levelsof
  1.     syntax varlist, [*]
  2.     cap noi glevelsof `varlist', `options' v bench clean silent
  3.     assert _rc == 0
  4. 
.     cap glevelsof `varlist' in 1, `options' silent miss
  5.     assert _rc == 0
  6. 
.     cap glevelsof `varlist' in 1, `options' miss
  7.     assert _rc == 0
  8. 
.     cap glevelsof `varlist' if _n == 1, `options' local(hi) miss
  9.     assert _rc == 0
 10.     assert `"`r(levels)'"' == `"`hi'"'
 11. 
.     cap glevelsof `varlist' if _n < 10 in 5, `options' s(" | ") cols(", ") miss
 12.     assert _rc == 0
 13. end

. 
. ***********************************************************************
. *                               Compare                               *
. ***********************************************************************
. 
. capture program drop compare_levelsof

. program compare_levelsof
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2. 
.     qui `noisily' gen_data, n(50)
  3.     qui expand 10000
  4. 
.     local N    = trim("`: di %15.0gc _N'")
  5.     local hlen = 24 + length("`options'") + length("`N'")
  6.     di _n(1) "{hline 80}" _n(1) "compare_levelsof, N = `N', `options'" _n(1) "{hline 80}" _n(1)
  7. 
.     compare_inner_levelsof str_12, `options' sort
  8.     compare_inner_levelsof str_32, `options' shuffle
  9.     compare_inner_levelsof str_4,  `options'
 10. 
.     compare_inner_levelsof double1, `options' round
 11.     compare_inner_levelsof double2, `options' round sort
 12.     compare_inner_levelsof double3, `options' round shuffle
 13. 
.     compare_inner_levelsof int1, `options' shuffle
 14.     compare_inner_levelsof int2, `options'
 15.     compare_inner_levelsof int3, `options' sort
 16. end

. 
. capture program drop compare_inner_levelsof

. program compare_inner_levelsof
  1.     syntax varlist, [round shuffle sort *]
  2. 
.     tempvar rsort
  3.     if ( "`shuffle'" != "" ) gen `rsort' = runiform()
  4.     if ( "`shuffle'" != "" ) sort `rsort'
  5.     if ( ("`sort'" != "") & ("`anything'" != "") ) hashsort `anything'
  6. 
.     cap  levelsof `varlist', s(" | ") local(l_stata)
  7.     cap glevelsof `varlist', s(" | ") local(l_gtools) `options'
  8.     if ( `"`l_stata'"' != `"`l_gtools'"' ) {
  9.         if ( "`round'" != "" ) {
 10.             while ( `"`l_stata'`l_gtools'"' != "" ) {
 11.                 gettoken l_scmp l_stata:  l_stata,  p(" | ")
 12.                 gettoken _      l_stata:  l_stata,  p(" | ")
 13.                 gettoken l_gcmp l_gtools: l_gtools, p(" | ")
 14.                 gettoken _      l_gtools: l_gtools, p(" | ")
 15.                 if ( `"`l_gcmp'"' != `"`l_scmp'"' ) {
 16.                     cap assert abs(`l_gcmp' - `l_scmp') < 1e-15
 17.                     if ( _rc ) {
 18.                         di as err "    compare_levelsof (failed): glevelsof `varlist' returned different levels with rounding"
 19.                         exit 198
 20.                     }
 21.                 }
 22.             }
 23.             di as txt "    compare_levelsof (passed): glevelsof `varlist' returned similar levels as levelsof (tol = 1e-15)"
 24.         }
 25.         else {
 26.             di as err "    compare_levelsof (failed): glevelsof `varlist' returned different levels to levelsof"
 27.             exit 198
 28.         }
 29.     }
 30.     else {
 31.         di as txt "    compare_levelsof (passed): glevelsof `varlist' returned the same levels as levelsof"
 32.     }
 33. 
.     cap  levelsof `varlist', local(l_stata)  miss
 34.     cap glevelsof `varlist', local(l_gtools) miss `options'
 35.     if ( `"`l_stata'"' != `"`l_gtools'"' ) {
 36.         if ( "`round'" != "" ) {
 37.             while ( `"`l_stata'`l_gtools'"' != "" ) {
 38.                 gettoken l_scmp l_stata:  l_stata,  p(" | ")
 39.                 gettoken _      l_stata:  l_stata,  p(" | ")
 40.                 gettoken l_gcmp l_gtools: l_gtools, p(" | ")
 41.                 gettoken _      l_gtools: l_gtools, p(" | ")
 42.                 if ( `"`l_gcmp'"' != `"`l_scmp'"' ) {
 43.                     cap assert abs(`l_gcmp' - `l_scmp') < 1e-15
 44.                     if ( _rc ) {
 45.                         di as err "    compare_levelsof (failed): glevelsof `varlist' returned different levels with rounding"
 46.                         exit 198
 47.                     }
 48.                 }
 49.             }
 50.             di as txt "    compare_levelsof (passed): glevelsof `varlist' returned similar levels as levelsof (tol = 1e-15)"
 51.         }
 52.         else {
 53.             di as err "    compare_levelsof (failed): glevelsof `varlist' returned different levels to levelsof"
 54.             exit 198
 55.         }
 56.     }
 57.     else {
 58.         di as txt "    compare_levelsof (passed): glevelsof `varlist' returned the same levels as levelsof"
 59.     }
 60. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.         cap  levelsof `varlist' in 100 / `=ceil(`=_N / 2')', local(l_stata)  miss
 61.         cap glevelsof `varlist' in 100 / `=ceil(`=_N / 2')', local(l_gtools) miss `options'
 62.         if ( `"`l_stata'"' != `"`l_gtools'"' ) {
 63.             if ( "`round'" != "" ) {
 64.                 while ( `"`l_stata'`l_gtools'"' != "" ) {
 65.                     gettoken l_scmp l_stata:  l_stata,  p(" | ")
 66.                     gettoken _      l_stata:  l_stata,  p(" | ")
 67.                     gettoken l_gcmp l_gtools: l_gtools, p(" | ")
 68.                     gettoken _      l_gtools: l_gtools, p(" | ")
 69.                     if ( `"`l_gcmp'"' != `"`l_scmp'"' ) {
 70.                         cap assert abs(`l_gcmp' - `l_scmp') < 1e-15
 71.                         if ( _rc ) {
 72.                             di as err "    compare_levelsof (failed): glevelsof `varlist' [in] returned different levels with rounding"
 73.                             exit 198
 74.                         }
 75.                     }
 76.                 }
 77.                 di as txt "    compare_levelsof (passed): glevelsof `varlist' [in] returned similar levels as levelsof (tol = 1e-15)"
 78.             }
 79.             else {
 80.                 di as err "    compare_levelsof (failed): glevelsof `varlist' [in] returned different levels to levelsof"
 81.                 exit 198
 82.             }
 83.         }
 84.         else {
 85.             di as txt "    compare_levelsof (passed): glevelsof `varlist' [in] returned the same levels as levelsof"
 86.         }
 87. 
.         cap glevelsof `varlist' in `=ceil(`=_N / 2')' / `=_N', local(l_stata)
 88.         cap glevelsof `varlist' in `=ceil(`=_N / 2')' / `=_N', local(l_gtools) `options'
 89.         if ( `"`l_stata'"' != `"`l_gtools'"' ) {
 90.             if ( "`round'" != "" ) {
 91.                 while ( `"`l_stata'`l_gtools'"' != "" ) {
 92.                     gettoken l_scmp l_stata:  l_stata,  p(" | ")
 93.                     gettoken _      l_stata:  l_stata,  p(" | ")
 94.                     gettoken l_gcmp l_gtools: l_gtools, p(" | ")
 95.                     gettoken _      l_gtools: l_gtools, p(" | ")
 96.                     if ( `"`l_gcmp'"' != `"`l_scmp'"' ) {
 97.                         cap assert abs(`l_gcmp' - `l_scmp') < 1e-15
 98.                         if ( _rc ) {
 99.                             di as err "    compare_levelsof (failed): glevelsof `varlist' [in] returned different levels with rounding"
100.                             exit 198
101.                         }
102.                     }
103.                 }
104.                 di as txt "    compare_levelsof (passed): glevelsof `varlist' [in] returned similar levels as levelsof (tol = 1e-15)"
105.             }
106.             else {
107.                 di as err "    compare_levelsof (failed): glevelsof `varlist' [in] returned different levels to levelsof"
108.                 exit 198
109.             }
110.         }
111.         else {
112.             di as txt "    compare_levelsof (passed): glevelsof `varlist' [in] returned the same levels as levelsof"
113.         }
114. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.         cap  levelsof `varlist' if _n > `=_N / 2', local(l_stata)  miss
115.         cap glevelsof `varlist' if _n > `=_N / 2', local(l_gtools) miss `options'
116.         if ( `"`l_stata'"' != `"`l_gtools'"' ) {
117.             if ( "`round'" != "" ) {
118.                 while ( `"`l_stata'`l_gtools'"' != "" ) {
119.                     gettoken l_scmp l_stata:  l_stata,  p(" | ")
120.                     gettoken _      l_stata:  l_stata,  p(" | ")
121.                     gettoken l_gcmp l_gtools: l_gtools, p(" | ")
122.                     gettoken _      l_gtools: l_gtools, p(" | ")
123.                     if ( `"`l_gcmp'"' != `"`l_scmp'"' ) {
124.                         cap assert abs(`l_gcmp' - `l_scmp') < 1e-15
125.                         if ( _rc ) {
126.                             di as err "    compare_levelsof (failed): glevelsof `varlist' [if] returned different levels with rounding"
127.                             exit 198
128.                         }
129.                     }
130.                 }
131.                 di as txt "    compare_levelsof (passed): glevelsof `varlist' [if] returned similar levels as levelsof (tol = 1e-15)"
132.             }
133.             else {
134.                 di as err "    compare_levelsof (failed): glevelsof `varlist' [if] returned different levels to levelsof"
135.                 exit 198
136.             }
137.         }
138.         else {
139.             di as txt "    compare_levelsof (passed): glevelsof `varlist' [if] returned the same levels as levelsof"
140.         }
141. 
.         cap glevelsof `varlist' if _n < `=_N / 2', local(l_stata)
142.         cap glevelsof `varlist' if _n < `=_N / 2', local(l_gtools) `options'
143.         if ( `"`l_stata'"' != `"`l_gtools'"' ) {
144.             if ( "`round'" != "" ) {
145.                 while ( `"`l_stata'`l_gtools'"' != "" ) {
146.                     gettoken l_scmp l_stata:  l_stata,  p(" | ")
147.                     gettoken _      l_stata:  l_stata,  p(" | ")
148.                     gettoken l_gcmp l_gtools: l_gtools, p(" | ")
149.                     gettoken _      l_gtools: l_gtools, p(" | ")
150.                     if ( `"`l_gcmp'"' != `"`l_scmp'"' ) {
151.                         cap assert abs(`l_gcmp' - `l_scmp') < 1e-15
152.                         if ( _rc ) {
153.                             di as err "    compare_levelsof (failed): glevelsof `varlist' [if] returned different levels with rounding"
154.                             exit 198
155.                         }
156.                     }
157.                 }
158.                 di as txt "    compare_levelsof (passed): glevelsof `varlist' [if] returned similar levels as levelsof (tol = 1e-15)"
159.             }
160.             else {
161.                 di as err "    compare_levelsof (failed): glevelsof `varlist' [if] returned different levels to levelsof"
162.                 exit 198
163.             }
164.         }
165.         else {
166.             di as txt "    compare_levelsof (passed): glevelsof `varlist' [if] returned the same levels as levelsof"
167.         }
168. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.         cap  levelsof `varlist' if _n < `=_N / 4' in 100 / `=ceil(`=_N / 2')', local(l_stata)  miss
169.         cap glevelsof `varlist' if _n < `=_N / 4' in 100 / `=ceil(`=_N / 2')', local(l_gtools) miss `options'
170.         if ( `"`l_stata'"' != `"`l_gtools'"' ) {
171.             if ( "`round'" != "" ) {
172.                 while ( `"`l_stata'`l_gtools'"' != "" ) {
173.                     gettoken l_scmp l_stata:  l_stata,  p(" | ")
174.                     gettoken _      l_stata:  l_stata,  p(" | ")
175.                     gettoken l_gcmp l_gtools: l_gtools, p(" | ")
176.                     gettoken _      l_gtools: l_gtools, p(" | ")
177.                     if ( `"`l_gcmp'"' != `"`l_scmp'"' ) {
178.                         cap assert abs(`l_gcmp' - `l_scmp') < 1e-15
179.                         if ( _rc ) {
180.                             di as err "    compare_levelsof (failed): glevelsof `varlist' [if] [in] returned different levels with rounding"
181.                             exit 198
182.                         }
183.                     }
184.                 }
185.                 di as txt "    compare_levelsof (passed): glevelsof `varlist'  if] [in] returned similar levels as levelsof (tol = 1e-15)"
186.             }
187.             else {
188.                 di as err "    compare_levelsof (failed): glevelsof `varlist' [if] [in] returned different levels to levelsof"
189.                 exit 198
190.             }
191.         }
192.         else {
193.             di as txt "    compare_levelsof (passed): glevelsof `varlist' [if] [in] returned the same levels as levelsof"
194.         }
195. 
.         cap glevelsof `varlist' if _n > `=_N / 4' in `=ceil(`=_N / 1.5')' / `=_N', local(l_stata)
196.         cap glevelsof `varlist' if _n > `=_N / 4' in `=ceil(`=_N / 1.5')' / `=_N', local(l_gtools) `options'
197.         if ( `"`l_stata'"' != `"`l_gtools'"' ) {
198.             if ( "`round'" != "" ) {
199.                 while ( `"`l_stata'`l_gtools'"' != "" ) {
200.                     gettoken l_scmp l_stata:  l_stata,  p(" | ")
201.                     gettoken _      l_stata:  l_stata,  p(" | ")
202.                     gettoken l_gcmp l_gtools: l_gtools, p(" | ")
203.                     gettoken _      l_gtools: l_gtools, p(" | ")
204.                     if ( `"`l_gcmp'"' != `"`l_scmp'"' ) {
205.                         cap assert abs(`l_gcmp' - `l_scmp') < 1e-15
206.                         if ( _rc ) {
207.                             di as err "    compare_levelsof (failed): glevelsof `varlist' [if] [in] returned different levels with rounding"
208.                             exit 198
209.                         }
210.                     }
211.                 }
212.                 di as txt "    compare_levelsof (passed): glevelsof `varlist'  if] [in] returned similar levels as levelsof (tol = 1e-15)"
213.             }
214.             else {
215.                 di as err "    compare_levelsof (failed): glevelsof `varlist' [if] [in] returned different levels to levelsof"
216.                 exit 198
217.             }
218.         }
219.         else {
220.             di as txt "    compare_levelsof (passed): glevelsof `varlist' [if] [in] returned the same levels as levelsof"
221.         }
222. 
.     di _n(1)
223. end

. 
. ***********************************************************************
. *                             Benchmarks                              *
. ***********************************************************************
. 
. capture program drop bench_levelsof

. program bench_levelsof
  1.     syntax, [tol(real 1e-6) bench(int 1) n(int 100) NOIsily *]
  2. 
.     qui `noisily' gen_data, n(`n')
  3.     qui expand `=1000 * `bench''
  4.     qui gen rsort = rnormal()
  5.     qui sort rsort
  6. 
.     local N = trim("`: di %15.0gc _N'")
  7.     local J = trim("`: di %15.0gc `n''")
  8. 
.     di as txt _n(1)
  9.     di as txt "Benchmark vs levelsof, obs = `N', J = `J' (in seconds)"
 10.     di as txt "    levelsof | flevelsof | glevelsof | ratio (l/g) | ratio (f/g) | varlist"
 11.     di as txt "    -------- | --------- | --------- | ----------- | ----------- | -------"
 12. 
.     versus_levelsof str_12, `options' flevelsof
 13.     versus_levelsof str_32, `options' flevelsof
 14.     versus_levelsof str_4,  `options' flevelsof
 15. 
.     versus_levelsof double1, `options' flevelsof
 16.     versus_levelsof double2, `options' flevelsof
 17.     versus_levelsof double3, `options' flevelsof
 18. 
.     versus_levelsof int1, `options' flevelsof
 19.     versus_levelsof int2, `options' flevelsof
 20.     versus_levelsof int3, `options' flevelsof
 21. 
.     di as txt _n(1) "{hline 80}" _n(1) "bench_levelsof, `options'" _n(1) "{hline 80}" _n(1)
 22. end

. 
. capture program drop versus_levelsof

. program versus_levelsof, rclass
  1.     syntax varlist, [flevelsof unique *]
  2.     if ( "`unique'" == "unique" ) {
  3.         tempvar ix
  4.         gen `ix' = `=_N' - _n
  5.         if ( strpos("`varlist'", "str") ) qui tostring `ix', replace
  6.     }
  7. 
.     preserve
  8.         timer clear
  9.         timer on 42
 10.         qui levelsof `varlist' `ix'
 11.         timer off 42
 12.         qui timer list
 13.         local time_levelsof = r(t42)
 14.     restore
 15. 
.     preserve
 16.         timer clear
 17.         timer on 43
 18.         qui glevelsof `varlist' `ix', `options'
 19.         timer off 43
 20.         qui timer list
 21.         local time_glevelsof = r(t43) 
 22.     restore
 23. 
.     if ( "`flevelsof'" == "flevelsof" ) {
 24.     preserve
 25.         timer clear
 26.         timer on 44
 27.         qui flevelsof `varlist' `ix'
 28.         timer off 44
 29.         qui timer list
 30.         local time_flevelsof = r(t44)
 31.     restore
 32.     }
 33.     else {
 34.         local time_flevelsof = .
 35.     }
 36. 
.     local rs = `time_levelsof'  / `time_glevelsof'
 37.     local rf = `time_flevelsof' / `time_glevelsof'
 38.     di as txt "    `:di %8.3g `time_levelsof'' | `:di %9.3g `time_flevelsof'' | `:di %9.3g `time_glevelsof'' | `:di %11.3g `rs'' | `:di %11.3g `rf'' | `varlist'"
 39. end

. capture program drop checks_toplevelsof

. program checks_toplevelsof
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "checks_toplevelsof, `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     qui `noisily' gen_data, n(50)
  4.     qui expand 200
  5.     gen long ix = _n
  6. 
.     checks_inner_toplevelsof -str_12,              `options'
  7.     checks_inner_toplevelsof str_12 -str_32,       `options'
  8.     checks_inner_toplevelsof str_12 -str_32 str_4, `options'
  9. 
.     checks_inner_toplevelsof -double1,                 `options'
 10.     checks_inner_toplevelsof double1 -double2,         `options'
 11.     checks_inner_toplevelsof double1 -double2 double3, `options'
 12. 
.     checks_inner_toplevelsof -int1,           `options'
 13.     checks_inner_toplevelsof int1 -int2,      `options'
 14.     checks_inner_toplevelsof int1 -int2 int3, `options'
 15. 
.     checks_inner_toplevelsof -int1 -str_32 -double1,                                         `options'
 16.     checks_inner_toplevelsof int1 -str_32 double1 -int2 str_12 -double2,                     `options'
 17.     checks_inner_toplevelsof int1 -str_32 double1 -int2 str_12 -double2 int3 -str_4 double3, `options'
 18. 
.     clear
 19.     gen x = 1
 20.     gtoplevelsof x
 21. 
.     clear
 22.     set obs 100000
 23.     gen x = _n
 24.     gtoplevelsof x in 1 / 10000 if mod(x, 3) == 0
 25.     gtoplevelsof x if _n < 1
 26. end

. 
. capture program drop checks_inner_toplevelsof

. program checks_inner_toplevelsof
  1.     syntax anything, [*]
  2.     gtoplevelsof `anything' in 1, `options' miss
  3.     gtoplevelsof `anything' in 1, `options' miss
  4.     gtoplevelsof `anything' if _n == 1, `options' local(hi) miss
  5.     gtoplevelsof `anything' if _n < 10 in 5, `options' s(" | ") cols(", ") miss
  6.     gtoplevelsof `anything', `options' v bench
  7.     gtoplevelsof `anything', `options' ntop(2)
  8.     gtoplevelsof `anything', `options' ntop(0)
  9.     gtoplevelsof `anything', `options' ntop(0) noother
 10.     gtoplevelsof `anything', `options' ntop(0) missrow
 11.     gtoplevelsof `anything', `options' freqabove(10000)
 12.     gtoplevelsof `anything', `options' pctabove(5)
 13.     gtoplevelsof `anything', `options' pctabove(100)
 14.     gtoplevelsof `anything', `options' pctabove(100) noother
 15.     gtoplevelsof `anything', `options' groupmiss
 16.     gtoplevelsof `anything', `options' nomiss
 17.     gtoplevelsof `anything', `options' nooth
 18.     gtoplevelsof `anything', `options' oth
 19.     gtoplevelsof `anything', `options' oth(I'm some other group)
 20.     gtoplevelsof `anything', `options' missrow
 21.     gtoplevelsof `anything', `options' missrow(Hello, I'm missing)
 22.     gtoplevelsof `anything', `options' pctfmt(%15.6f)
 23.     gtoplevelsof `anything', `options' novaluelab
 24.     gtoplevelsof `anything', `options' hidecont
 25.     gtoplevelsof `anything', `options' varabb(5)
 26.     gtoplevelsof `anything', `options' colmax(3)
 27.     gtoplevelsof `anything', `options' colstrmax(2)
 28.     gtoplevelsof `anything', `options' numfmt(%9.4f)
 29.     gtoplevelsof `anything', `options' s(", ") cols(" | ")
 30.     gtoplevelsof `anything', `options' v bench
 31.     gtoplevelsof `anything', `options' colstrmax(0) numfmt(%.5g) colmax(0) varabb(1) freqabove(100) nooth
 32.     gtoplevelsof `anything', `options' missrow nooth groupmiss pctabove(2.5)
 33.     gtoplevelsof `anything', `options' missrow groupmiss pctabove(2.5)
 34.     gtoplevelsof `anything', `options' missrow groupmiss pctabove(99)
 35.     gtoplevelsof `anything', `options' s(|) cols(<<) missrow("I am missing ):")
 36.     gtoplevelsof `anything', `options' s(|) cols(<<) matrix(zz) loc(oo)
 37.     gtoplevelsof `anything', `options' loc(toplevels) mat(topmat)
 38.     disp `"`toplevels'"'
 39.     matrix list topmat
 40. end

. 
. ***********************************************************************
. *                               Compare                               *
. ***********************************************************************
. 
. capture program drop compare_toplevelsof

. program compare_toplevelsof
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2. 
.     qui `noisily' gen_data, n(1000) random(2)
  3.     qui expand 100
  4. 
.     local N = trim("`: di %15.0gc _N'")
  5.     di _n(1) "{hline 80}" _n(1) "consistency_gtoplevelsof_gcontract, N = `N', `options'" _n(1) "{hline 80}" _n(1)
  6. 
.     compare_inner_gtoplevelsof -str_12,              `options' tol(`tol')
  7.     compare_inner_gtoplevelsof str_12 -str_32,       `options' tol(`tol')
  8.     compare_inner_gtoplevelsof str_12 -str_32 str_4, `options' tol(`tol')
  9. 
.     compare_inner_gtoplevelsof -double1,                 `options' tol(`tol')
 10.     compare_inner_gtoplevelsof double1 -double2,         `options' tol(`tol')
 11.     compare_inner_gtoplevelsof double1 -double2 double3, `options' tol(`tol')
 12. 
.     compare_inner_gtoplevelsof -int1,           `options' tol(`tol')
 13.     compare_inner_gtoplevelsof int1 -int2,      `options' tol(`tol')
 14.     compare_inner_gtoplevelsof int1 int2  int3, `options' tol(`tol')
 15. 
.     compare_inner_gtoplevelsof -int1 -str_32 -double1,                                         `options' tol(`tol')
 16.     compare_inner_gtoplevelsof int1 -str_32 double1 -int2 str_12 -double2,                     `options' tol(`tol')
 17.     compare_inner_gtoplevelsof int1 -str_32 double1 -int2 str_12 -double2 int3 -str_4 double3, `options' tol(`tol')
 18. end

. 
. capture program drop compare_inner_gtoplevelsof

. program compare_inner_gtoplevelsof
  1.     syntax [anything], [tol(real 1e-6) *]
  2. 
.     local N = trim("`: di %15.0gc _N'")
  3.     local hlen = 35 + length("`anything'") + length("`N'")
  4.     di as txt _n(2) "Checking contract. N = `N'; varlist = `anything'" _n(1) "{hline `hlen'}"
  5. 
.     preserve
  6.         _compare_inner_gtoplevelsof `anything', `options' tol(`tol')
  7.     restore, preserve
  8.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
  9.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 10.         local from = cond(`in1' < `in2', `in1', `in2')
 11.         local to   = cond(`in1' > `in2', `in1', `in2')
 12.         _compare_inner_gtoplevelsof  `anything' in `from' / `to', `options' tol(`tol')
 13.     restore, preserve
 14.         _compare_inner_gtoplevelsof `anything' if random2 > 0, `options' tol(`tol')
 15.     restore, preserve
 16.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 17.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 18.         local from = cond(`in1' < `in2', `in1', `in2')
 19.         local to   = cond(`in1' > `in2', `in1', `in2')
 20.         _compare_inner_gtoplevelsof `anything' if random2 < 0 in `from' / `to', `options' tol(`tol')
 21.     restore
 22. end

. 
. capture program drop _compare_inner_gtoplevelsof

. program _compare_inner_gtoplevelsof
  1.     syntax [anything] [if] [in], [tol(real 1e-6) *]
  2. 
.     * cf(Cum) p(Pct) cp(PctCum)
.     local opts freq(N)
  3.     preserve
  4.         qui {
  5.             `noisily' gcontract `anything' `if' `in', `opts'
  6.             local r_N = `r(N)'
  7.             hashsort -N `anything'
  8.             keep in 1/10
  9.             set obs 11
 10.             gen byte ID = 1
 11.             replace ID  = 3 in 11
 12.             gen long ix = _n
 13.             gen long Cum = sum(N)
 14.             gen double Pct = 100 * N / `r_N'
 15.             gen double PctCum = 100 * Cum / `r_N'
 16.             replace Pct       = 100 - PctCum[10] in 11
 17.             replace PctCum    = 100 in 11
 18.             replace N         = `r_N' - Cum[10] in 11
 19.             replace Cum       = `r_N' in 11
 20.         }
 21.         tempfile fg
 22.         qui save `fg'
 23.     restore
 24. 
.     tempname gmat
 25.     preserve
 26.         qui {
 27.             `noisily' gtoplevelsof `anything' `if' `in', mat(`gmat')
 28.             clear
 29.             svmat `gmat', names(col)
 30.             gen long ix = _n
 31.         }
 32.         tempfile fc
 33.         qui save `fc'
 34.     restore
 35. 
.     preserve
 36.     use `fc', clear
 37.         local bad_any = 0
 38.         local bad `anything'
 39.         local bad: subinstr local bad "-" "", all
 40.         local bad: subinstr local bad "+" "", all
 41.         foreach var in N Cum Pct PctCum {
 42.             rename `var' c_`var'
 43.         }
 44.         qui merge 1:1 ix using `fg', assert(3)
 45.         foreach var in N Cum Pct PctCum {
 46.             qui count if ( (abs(`var' - c_`var') > `tol') & (`var' != c_`var'))
 47.             if ( `r(N)' > 0 ) {
 48.                 gen bad_`var' = abs(`var' - c_`var') * (`var' != c_`var')
 49.                 local bad `bad' *`var'
 50.                 di "    `var' has `:di r(N)' mismatches".
 51.                 local bad_any = 1
 52.                 order *`var'
 53.             }
 54.         }
 55.         if ( `bad_any' ) {
 56.             if ( "`if'`in'" == "" ) {
 57.                 di "    compare_gtoplevelsof_gcontract (failed): full range, `anything'"
 58.             }
 59.             else if ( "`if'`in'" != "" ) {
 60.                 di "    compare_gtoplevelsof_gcontract (failed): [`if' `in'], `anything'"
 61.             }
 62.             order `bad'
 63.             egen bad_any = rowmax(bad_*)
 64.             l `bad' if bad_any
 65.             sum bad_*
 66.             desc
 67.             exit 9
 68.         }
 69.         else {
 70.             if ( "`if'`in'" == "" ) {
 71.                 di "    compare_gtoplevelsof_gcontract (passed): full range, gcontract results equal to contract (tol = `tol')"
 72.             }
 73.             else if ( "`if'`in'" != "" ) {
 74.                 di "    compare_gtoplevelsof_gcontract (passed): [`if' `in'], gcontract results equal to contract (tol = `tol')"
 75.             }
 76.         }
 77.     restore
 78. end

. 
. ***********************************************************************
. *                             Benchmarks                              *
. ***********************************************************************
. 
. capture program drop bench_toplevelsof

. program bench_toplevelsof
  1.     syntax, [tol(real 1e-6) bench(real 1) n(int 1000) NOIsily *]
  2. 
.     qui gen_data, n(`n') random(1) double
  3.     qui expand `=100 * `bench''
  4.     qui hashsort random1
  5. 
.     local N = trim("`: di %15.0gc _N'")
  6.     local J = trim("`: di %15.0gc `n''")
  7. 
.     di as txt _n(1)
  8.     di as txt "Benchmark toplevelsof vs contract (unsorted), obs = `N', J = `J' (in seconds)"
  9.     di as txt "    gcontract | gtoplevelsof | ratio (c/t) | varlist"
 10.     di as txt "    --------- | ------------ | ----------- | -------"
 11. 
.     versus_toplevelsof str_12,              `options'
 12.     versus_toplevelsof str_12 str_32,       `options'
 13.     versus_toplevelsof str_12 str_32 str_4, `options'
 14. 
.     versus_toplevelsof double1,                 `options'
 15.     versus_toplevelsof double1 double2,         `options'
 16.     versus_toplevelsof double1 double2 double3, `options'
 17. 
.     versus_toplevelsof int1,           `options'
 18.     versus_toplevelsof int1 int2,      `options'
 19.     versus_toplevelsof int1 int2 int3, `options'
 20. 
.     versus_toplevelsof int1 str_32 double1,                                        `options'
 21.     versus_toplevelsof int1 str_32 double1 int2 str_12 double2,                    `options'
 22.     versus_toplevelsof int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options'
 23. 
.     di as txt _n(1)
 24.     di as txt "Benchmark toplevelsof vs contract (plus preserve, sort, keep, restore), obs = `N', J = `J' (in seconds)"
 25.     di as txt "    gcontract | gtoplevelsof | ratio (c/t) | varlist"
 26.     di as txt "    --------- | ------------ | ----------- | -------"
 27. 
.     versus_toplevelsof str_12,              `options' sorted
 28.     versus_toplevelsof str_12 str_32,       `options' sorted
 29.     versus_toplevelsof str_12 str_32 str_4, `options' sorted
 30. 
.     versus_toplevelsof double1,                 `options' sorted
 31.     versus_toplevelsof double1 double2,         `options' sorted
 32.     versus_toplevelsof double1 double2 double3, `options' sorted
 33. 
.     versus_toplevelsof int1,           `options' sorted
 34.     versus_toplevelsof int1 int2,      `options' sorted
 35.     versus_toplevelsof int1 int2 int3, `options' sorted
 36. 
.     versus_toplevelsof int1 str_32 double1,                                        `options' sorted
 37.     versus_toplevelsof int1 str_32 double1 int2 str_12 double2,                    `options' sorted
 38.     versus_toplevelsof int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options' sorted
 39. 
.     di _n(1) "{hline 80}" _n(1) "bench_toplevelsof, `options'" _n(1) "{hline 80}" _n(1)
 40. end

. 
. capture program drop versus_toplevelsof

. program versus_toplevelsof, rclass
  1.     syntax [anything], [sorted *]
  2. 
.     local stats       ""
  3.     local percentiles ""
  4. 
.     local opts freq(freq) cf(cf) p(p) cp(cp)
  5. 
.     if ( "`sorted'" == "" ) {
  6.     preserve
  7.         timer clear
  8.         timer on 42
  9.         qui gcontract `anything' `if' `in', `opts'
 10.         timer off 42
 11.         qui timer list
 12.         local time_contract = r(t42)
 13.     restore
 14.     }
 15.     else {
 16.         timer clear
 17.         timer on 42
 18.         qui {
 19.             preserve
 20.             gcontract `anything' `if' `in', `opts'
 21.             hashsort -freq `anything'
 22.             keep in 1/10
 23.             restore
 24.         }
 25.         timer off 42
 26.         qui timer list
 27.         local time_contract = r(t42)
 28.     }
 29. 
.     timer clear
 30.     timer on 43
 31.     qui gtoplevelsof `anything' `if' `in'
 32.     timer off 43
 33.     qui timer list
 34.     local time_gcontract = r(t43)
 35. 
.     local rs = `time_contract'  / `time_gcontract'
 36.     di as txt "    `:di %9.3g `time_contract'' | `:di %12.3g `time_gcontract'' | `:di %11.3g `rs'' | `anything'"
 37. end

. capture program drop checks_isid

. program checks_isid
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "checks_isid, `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     qui `noisily' gen_data, n(5000)
  4.     qui expand 2
  5.     gen long ix  = _n
  6.     gen byte ind = 0
  7. 
.     checks_inner_isid str_12,              `options'
  8.     checks_inner_isid str_12 str_32,       `options'
  9.     checks_inner_isid str_12 str_32 str_4, `options'
 10. 
.     checks_inner_isid double1,                 `options'
 11.     checks_inner_isid double1 double2,         `options'
 12.     checks_inner_isid double1 double2 double3, `options'
 13. 
.     checks_inner_isid int1,           `options'
 14.     checks_inner_isid int1 int2,      `options'
 15.     checks_inner_isid int1 int2 int3, `options'
 16. 
.     checks_inner_isid int1 str_32 double1,                                        `options'
 17.     checks_inner_isid int1 str_32 double1 int2 str_12 double2,                    `options'
 18.     checks_inner_isid int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options'
 19. 
.     clear
 20.     gen x = 1
 21.     cap gisid x
 22.     assert _rc == 0
 23. 
.     clear
 24.     set obs 4
 25.     gen x = 1
 26.     gen y = _n
 27.     gen z = _n
 28.     replace y = 1 in 1/2
 29.     replace x = 2 in 3/4
 30.     gisid x y z, v
 31. 
.     replace y = x
 32.     replace z = 1 in 1/2
 33.     cap noi gisid x y z, v
 34.     assert _rc == 459
 35. end

. 
. capture program drop checks_inner_isid

. program checks_inner_isid
  1.     syntax varlist, [*]
  2.     cap gisid `varlist', `options' v bench missok
  3.     assert _rc == 459
  4. 
.     cap gisid `varlist' in 1, `options' missok
  5.     assert _rc == 0
  6. 
.     cap gisid `varlist' if _n == 1, `options' missok
  7.     assert _rc == 0
  8. 
.     cap gisid `varlist' if _n < 10 in 5, `options' missok
  9.     assert _rc == 0
 10. 
.     cap gisid ix `varlist', `options' v bench missok
 11.     assert _rc == 0
 12. 
.     preserve
 13.     sort `varlist'
 14.     cap gisid `varlist' ix, `options' v bench missok
 15.     assert _rc == 0
 16. 
.     qui replace ix  = _n
 17.     qui replace ix  = 1 in 1/2
 18.     qui replace ind = 1 in 3/4
 19.     cap gisid  ind ix `varlist', `options' v bench missok
 20.     assert _rc == 459
 21.     restore
 22. end

. 
. ***********************************************************************
. *                               Compare                               *
. ***********************************************************************
. 
. capture program drop compare_isid

. program compare_isid
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2. 
.     qui `noisily' gen_data, n(1000)
  3.     qui expand 100
  4. 
.     local N    = trim("`: di %15.0gc _N'")
  5.     local hlen = 20 + length("`options'") + length("`N'")
  6.     di _n(1) "{hline 80}" _n(1) "compare_isid, N = `N', `options'" _n(1) "{hline 80}" _n(1)
  7. 
.     compare_inner_isid str_12,              `options'
  8.     compare_inner_isid str_12 str_32,       `options'
  9.     compare_inner_isid str_12 str_32 str_4, `options'
 10. 
.     compare_inner_isid double1,                 `options'
 11.     compare_inner_isid double1 double2,         `options'
 12.     compare_inner_isid double1 double2 double3, `options'
 13. 
.     compare_inner_isid int1,           `options'
 14.     compare_inner_isid int1 int2,      `options'
 15.     compare_inner_isid int1 int2 int3, `options'
 16. 
.     compare_inner_isid int1 str_32 double1,                                        `options'
 17.     compare_inner_isid int1 str_32 double1 int2 str_12 double2,                    `options'
 18.     compare_inner_isid int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options'
 19. end

. 
. capture program drop compare_inner_isid

. program compare_inner_isid
  1.     syntax varlist, [*]
  2. 
.     tempvar rsort ix
  3.     gen `rsort' = runiform()
  4.     sort `rsort'
  5.     gen long `ix' = _n
  6. 
.     cap isid `varlist', missok
  7.     local rc_isid = _rc
  8.     cap gisid `varlist', missok `options'
  9.     local rc_gisid = _rc
 10.     check_rc `rc_isid' `rc_gisid' , by( `varlist')
 11. 
.     * make sure sorted check gives same result
.     hashsort `varlist'
 12.     cap gisid `varlist', missok `options'
 13.     local rc_gisid = _rc
 14.     check_rc `rc_isid' `rc_gisid' , by([sorted] `varlist')
 15. 
.     cap isid `ix' `varlist', missok
 16.     local rc_isid = _rc
 17.     cap gisid `ix' `varlist', missok `options'
 18.     local rc_gisid = _rc
 19.     check_rc `rc_isid' `rc_gisid' , by( ix `varlist')
 20. 
.     * make sure sorted check gives same result
.     hashsort `ix' `varlist'
 21.     cap gisid `ix' `varlist', missok `options'
 22.     local rc_gisid = _rc
 23.     check_rc `rc_isid' `rc_gisid' , by([sorted] ix `varlist')
 24. 
.     cap isid `rsort' `varlist', missok
 25.     local rc_isid = _rc
 26.     cap gisid `rsort' `varlist', missok `options'
 27.     local rc_gisid = _rc
 28.     check_rc `rc_isid' `rc_gisid' , by( rsort `varlist')
 29. 
.     * make sure sorted check gives same result
.     hashsort `rsort' `varlist'
 30.     cap isid `rsort' `varlist', missok
 31.     local rc_isid = _rc
 32.     cap gisid `rsort' `varlist', missok `options'
 33.     local rc_gisid = _rc
 34.     check_rc `rc_isid' `rc_gisid' , by([sorted] rsort `varlist')
 35. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.     qui replace `ix' = `=_N / 2' if _n > `=_N / 2'
 36.     cap isid `ix'
 37.     local rc_isid = _rc
 38.     cap gisid `ix', `options'
 39.     local rc_gisid = _rc
 40.     check_rc `rc_isid' `rc_gisid' , by( ix)
 41. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.     preserve
 42.         qui keep in 100 / `=ceil(`=_N / 2')'
 43.         cap isid `ix' `varlist', missok
 44.         local rc_isid = _rc
 45.     restore
 46.     cap gisid `ix' `varlist' in 100 / `=ceil(`=_N / 2')', missok `options'
 47.     local rc_gisid = _rc
 48.     check_rc  `rc_isid' `rc_gisid' , by( ix `varlist' in 100 / `=ceil(`=_N / 2')')
 49. 
.     preserve
 50.         qui keep in `=ceil(`=_N / 2')' / `=_N'
 51.         cap isid `ix' `varlist', missok
 52.         local rc_isid = _rc
 53.     restore
 54.     cap gisid `ix' `varlist' in `=ceil(`=_N / 2')' / `=_N', missok `options'
 55.     local rc_gisid = _rc
 56.     check_rc  `rc_isid' `rc_gisid' , by( ix `varlist' in `=ceil(`=_N / 2')' / `=_N')
 57. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.     preserve
 58.         qui keep if _n < `=_N / 2'
 59.         cap isid `ix' `varlist', missok
 60.         local rc_isid = _rc
 61.     restore
 62.     cap gisid `ix' `varlist' if _n < `=_N / 2', missok
 63.     local rc_gisid = _rc
 64.     check_rc  `rc_isid' `rc_gisid' , by( ix `varlist' if _n < `=_N / 2')
 65. 
.     preserve
 66.         qui keep if _n > `=_N / 2'
 67.         cap isid `ix' `varlist', missok
 68.         local rc_isid = _rc
 69.     restore
 70.     cap gisid `ix' `varlist' if _n > `=_N / 2', missok `options'
 71.     local rc_gisid = _rc
 72.     check_rc  `rc_isid' `rc_gisid' , by( ix `varlist' if _n > `=_N / 2')
 73. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.     qui replace `ix' = 100 in 1 / 100
 74. 
.     preserve
 75.         qui keep if _n < `=_N / 4' in 100 / `=ceil(`=_N / 2')'
 76.         cap isid `ix' `varlist', missok
 77.         local rc_isid = _rc
 78.     restore
 79.     cap gisid `ix' `varlist' if _n < `=_N / 4' in 100 / `=ceil(`=_N / 2')', missok `options'
 80.     local rc_gisid = _rc
 81.     check_rc  `rc_isid' `rc_gisid' , by( ix `varlist' if _n < `=_N / 4' in 100 / `=ceil(`=_N / 2')')
 82. 
.     preserve
 83.         qui keep if _n > `=_N / 4' in `=ceil(`=_N / 1.5')' / `=_N'
 84.         cap isid `ix' `varlist', missok
 85.         local rc_isid = _rc
 86.     restore
 87.     cap gisid `ix' `varlist' if _n > `=_N / 4' in `=ceil(`=_N / 1.5')' / `=_N', missok
 88.     local rc_gisid = _rc
 89.     check_rc  `rc_isid' `rc_gisid' , by( ix `varlist' if _n > `=_N / 4' in `=ceil(`=_N / 1.5')' / `=_N')
 90. 
.     di _n(1)
 91. end

. 
. capture program drop check_rc

. program check_rc
  1.     syntax anything, by(str)
  2. 
.     tokenize `anything'
  3.     local rc_isid  `1'
  4.     local rc_gisid `2'
  5. 
.     if ( `rc_isid' != `rc_gisid' ) {
  6.         if ( `rc_isid' & (`rc_gisid' == 0) ) {
  7.             di as err "    compare_isid (failed): gisid `by' was an id but isid returned error r(`rc_isid')"
  8.             exit `rc_isid'
  9.         }
 10.         else if ( (`rc_isid' == 0) & `rc_gisid' ) {
 11.             di as err "    compare_isid (failed): isid `by' was an id but gisid returned error r(`rc_gisid')"
 12.             exit `rc_gisigd'
 13.         }
 14.         else {
 15.             di as err "    compare_isid (failed): `by' was not an id but isid and gisid returned different errors r(`rc_isid') vs r(`rc_gisid')"
 16.             exit `rc_gisid'
 17.         }
 18.     }
 19.     else {
 20.         if ( _rc ) {
 21.             di as txt "    compare_isid (passed): `by' was not an id"
 22.         }
 23.         else {
 24.             di as txt "    compare_isid (passed): `by' was an id"
 25.         }
 26.     }
 27. end

. 
. ***********************************************************************
. *                             Benchmarks                              *
. ***********************************************************************
. 
. capture program drop bench_isid

. program bench_isid
  1.     syntax, [tol(real 1e-6) bench(int 1) n(int 1000) NOIsily *]
  2. 
.     qui `noisily' gen_data, n(`n')
  3.     qui expand `=100 * `bench''
  4.     qui gen rsort = rnormal()
  5.     qui sort rsort
  6. 
.     local N = trim("`: di %15.0gc _N'")
  7.     local J = trim("`: di %15.0gc `n''")
  8. 
.     di as txt _n(1)
  9.     di as txt "Benchmark vs isid, obs = `N', all calls include an index to ensure uniqueness (in seconds)"
 10.     di as txt "     isid | fisid | gisid | ratio (i/g) | ratio (f/g) | varlist"
 11.     di as txt "     ---- | ----- | ----- | ----------- | ----------- | -------"
 12. 
.     versus_isid str_12,              `options' fisid unique
 13.     versus_isid str_12 str_32,       `options' fisid unique
 14.     versus_isid str_12 str_32 str_4, `options' fisid unique
 15. 
.     versus_isid double1,                 `options' fisid unique
 16.     versus_isid double1 double2,         `options' fisid unique
 17.     versus_isid double1 double2 double3, `options' fisid unique
 18. 
.     versus_isid int1,           `options' fisid unique
 19.     versus_isid int1 int2,      `options' fisid unique
 20.     versus_isid int1 int2 int3, `options' fisid unique
 21. 
.     versus_isid int1 str_32 double1,                                        unique `options'
 22.     versus_isid int1 str_32 double1 int2 str_12 double2,                    unique `options'
 23.     versus_isid int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, unique `options'
 24. 
.     di as txt _n(1)
 25.     di as txt "Benchmark vs isid, obs = `N', J = `J' (in seconds)"
 26.     di as txt "     isid | fisid | gisid | ratio (i/g) | ratio (f/g) | varlist"
 27.     di as txt "     ---- | ----- | ----- | ----------- | ----------- | -------"
 28. 
.     versus_isid str_12,              `options' fisid
 29.     versus_isid str_12 str_32,       `options' fisid
 30.     versus_isid str_12 str_32 str_4, `options' fisid
 31. 
.     versus_isid double1,                 `options' fisid
 32.     versus_isid double1 double2,         `options' fisid
 33.     versus_isid double1 double2 double3, `options' fisid
 34. 
.     versus_isid int1,           `options' fisid
 35.     versus_isid int1 int2,      `options' fisid
 36.     versus_isid int1 int2 int3, `options' fisid
 37. 
.     versus_isid int1 str_32 double1,                                        `options'
 38.     versus_isid int1 str_32 double1 int2 str_12 double2,                    `options'
 39.     versus_isid int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options'
 40. 
.     di as txt _n(1) "{hline 80}" _n(1) "bench_isid, `options'" _n(1) "{hline 80}" _n(1)
 41. end

. 
. capture program drop versus_isid

. program versus_isid, rclass
  1.     syntax varlist, [fisid unique *]
  2.     if ( "`unique'" == "unique" ) {
  3.         tempvar ix
  4.         gen `ix' = `=_N' - _n
  5.         if ( strpos("`varlist'", "str") ) qui tostring `ix', replace
  6.     }
  7. 
.     preserve
  8.         timer clear
  9.         timer on 42
 10.         cap isid `varlist' `ix', missok
 11.         assert inlist(_rc, 0, 459)
 12.         timer off 42
 13.         qui timer list
 14.         local time_isid = r(t42)
 15.     restore
 16. 
.     preserve
 17.         timer clear
 18.         timer on 43
 19.         cap gisid `varlist' `ix', `options' missok
 20.         assert inlist(_rc, 0, 459)
 21.         timer off 43
 22.         qui timer list
 23.         local time_gisid = r(t43)
 24.     restore
 25. 
.     if ( "`fisid'" == "fisid" ) {
 26.     preserve
 27.         timer clear
 28.         timer on 44
 29.         cap fisid `varlist' `ix', missok
 30.         assert inlist(_rc, 0, 459)
 31.         timer off 44
 32.         qui timer list
 33.         local time_fisid = r(t44)
 34.     restore
 35.     }
 36.     else {
 37.         local time_fisid = .
 38.     }
 39. 
.     local rs = `time_isid'  / `time_gisid'
 40.     local rf = `time_fisid' / `time_gisid'
 41.     di as txt "    `:di %5.3g `time_isid'' | `:di %5.3g `time_fisid'' | `:di %5.3g `time_gisid'' | `:di %11.3g `rs'' | `:di %11.3g `rf'' | `varlist'"
 42. end

. capture program drop checks_hashsort

. program checks_hashsort
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "checks_hashsort, `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     qui `noisily' gen_data, n(5000)
  4.     qui expand 2
  5.     gen long ix = _n
  6. 
.     checks_inner_hashsort -str_12,              `options'
  7.     checks_inner_hashsort str_12 -str_32,       `options'
  8.     checks_inner_hashsort str_12 -str_32 str_4, `options'
  9. 
.     checks_inner_hashsort -double1,                 `options'
 10.     checks_inner_hashsort double1 -double2,         `options'
 11.     checks_inner_hashsort double1 -double2 double3, `options'
 12. 
.     checks_inner_hashsort -int1,           `options'
 13.     checks_inner_hashsort int1 -int2,      `options'
 14.     checks_inner_hashsort int1 -int2 int3, `options'
 15. 
.     checks_inner_hashsort -int1 -str_32 -double1,                                         `options'
 16.     checks_inner_hashsort int1 -str_32 double1 -int2 str_12 -double2,                     `options'
 17.     checks_inner_hashsort int1 -str_32 double1 -int2 str_12 -double2 int3 -str_4 double3, `options'
 18. 
.     sysuse auto, clear
 19.     gen idx = _n
 20.     hashsort -foreign rep78 make -mpg, `options'
 21.     hashsort idx,                      `options'
 22.     hashsort -foreign -rep78,          `options'
 23.     hashsort idx,                      `options'
 24.     hashsort foreign rep78 mpg,        `options'
 25.     hashsort idx,                      `options' v bench
 26. end

. 
. capture program drop checks_inner_hashsort

. program checks_inner_hashsort
  1.     syntax anything, [*]
  2.     tempvar ix
  3.     hashsort `anything', `options' gen(`ix')
  4.     hashsort `: subinstr local anything "-" "", all', `options'
  5.     hashsort ix, `options'
  6. end

. 
. capture program drop bench_hashsort

. program bench_hashsort
  1.     compare_hashsort `0'
  2. end

. 
. capture program drop compare_hashsort

. program compare_hashsort
  1.     syntax, [tol(real 1e-6) NOIsily bench(int 1) n(int 1000) benchmode *]
  2.     local options `options' `benchmode'
  3.     if ( "`benchmode'" == "" ) {
  4.         local benchcomp Comparison
  5.     }
  6.     else {
  7.         local benchcomp Benchmark
  8.     }
  9. 
.     cap gen_data, n(`n')
 10.     qui expand 10 * `bench'
 11.     qui gen rsort = rnormal()
 12.     qui sort rsort
 13. 
.     local N = trim("`: di %15.0gc _N'")
 14.     local J = trim("`: di %15.0gc `n''")
 15. 
.     di _n(1)
 16.     di "`benchcomp' vs gsort, obs = `N', J = `J' (in seconds; datasets are compared via {opt cf})"
 17.     di "    gsort | hashsort | ratio (g/h) | varlist"
 18.     di "    ----- | -------- | ----------- | -------"
 19. 
.     compare_gsort -str_12,              `options'
 20.     compare_gsort str_12 -str_32,       `options'
 21.     compare_gsort str_12 -str_32 str_4, `options'
 22. 
.     compare_gsort -double1,                 `options'
 23.     compare_gsort double1 -double2,         `options'
 24.     compare_gsort double1 -double2 double3, `options'
 25. 
.     compare_gsort -int1,           `options'
 26.     compare_gsort int1 -int2,      `options'
 27.     compare_gsort int1 -int2 int3, `options'
 28. 
.     compare_gsort -int1 -str_32 -double1,                                         `options'
 29.     compare_gsort int1 -str_32 double1 -int2 str_12 -double2,                     `options'
 30.     compare_gsort int1 -str_32 double1 -int2 str_12 -double2 int3 -str_4 double3, `options'
 31. 
.     qui expand 10
 32.     local N = trim("`: di %15.0gc _N'")
 33. 
.     di _n(1)
 34.     di "`benchcomp' vs sort (stable), obs = `N', J = `J' (in seconds; datasets are compared via {opt cf})"
 35.     di "     sort | fsort | hashsort | ratio (s/h) | ratio (f/h) | varlist"
 36.     di "     ---- | ----- | -------- | ----------- | ----------- | -------"
 37. 
.     compare_sort str_12,              `options' fsort
 38.     compare_sort str_12 str_32,       `options' fsort
 39.     compare_sort str_12 str_32 str_4, `options' fsort
 40. 
.     compare_sort double1,                 `options' fsort
 41.     compare_sort double1 double2,         `options' fsort
 42.     compare_sort double1 double2 double3, `options' fsort
 43. 
.     compare_sort int1,           `options' fsort
 44.     compare_sort int1 int2,      `options' fsort
 45.     compare_sort int1 int2 int3, `options' fsort
 46. 
.     compare_sort int1 str_32 double1,                                        `options'
 47.     compare_sort int1 str_32 double1 int2 str_12 double2,                    `options'
 48.     compare_sort int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options'
 49. 
.     di _n(1) "{hline 80}" _n(1) "compare_hashsort, `options'" _n(1) "{hline 80}" _n(1)
 50. end

. 
. capture program drop compare_sort

. program compare_sort, rclass
  1.     syntax varlist, [fsort benchmode *]
  2.     local rc = 0
  3. 
.     timer clear
  4.     preserve
  5.         timer on 42
  6.         sort `varlist' , stable
  7.         timer off 42
  8.         tempfile file_sort
  9.         qui save `file_sort'
 10.     restore
 11.     qui timer list
 12.     local time_sort = r(t42)
 13. 
.     timer clear
 14.     preserve
 15.         timer on 43
 16.         qui hashsort `varlist', `options'
 17.         timer off 43
 18.         cap noi cf * using `file_sort'
 19.         if ( _rc ) {
 20.             qui ds *
 21.             local memvars `r(varlist)' 
 22.             local firstvar: word 1 of `varlist'
 23.             local compvars: list memvars - firstvar
 24.             if ( "`compvars'" != "" ) {
 25.                 cf `compvars' using `file_sort'
 26.             }
 27.             keep `firstvar'
 28.             tempfile file_first
 29.             qui save `file_first'
 30. 
.             use `firstvar' using `file_sort', clear
 31.             rename `firstvar' c_`firstvar'
 32.             qui merge 1:1 _n using `file_first'
 33.             cap noi assert (`firstvar' == c_`firstvar') | (abs(`firstvar' - c_`firstvar') < 1e-15)
 34.             if ( _rc ) {
 35.                 local rc = _rc
 36.                 di as err "hashsort gave different sort order to sort"
 37.             }
 38.             else {
 39.                 if ("`benchmode'" == "") di as txt "    hashsort same as sort but sortpreserve trick caused some loss of precision (< 1e-15)"
 40.             }
 41.         }
 42. 
.         * Make sure already sorted check is OK
.         qui gen byte one = 1
 43.         hashsort one `varlist', `options'
 44.         qui drop one
 45.         cap cf * using `file_sort'
 46.         if ( _rc ) {
 47.             qui ds *
 48.             local memvars `r(varlist)' 
 49.             local firstvar: word 1 of `varlist'
 50.             local compvars: list memvars - firstvar
 51.             if ( "`compvars'" != "" ) {
 52.                 cf `compvars' using `file_sort'
 53.             }
 54.             keep `firstvar'
 55.             tempfile file_one
 56.             qui save `file_one'
 57. 
.             use `firstvar' using `file_sort', clear
 58.             rename `firstvar' c_`firstvar'
 59.             qui merge 1:1 _n using `file_one'
 60.             cap noi assert (`firstvar' == c_`firstvar') | (abs(`firstvar' - c_`firstvar') < 1e-15)
 61.             if ( _rc ) {
 62.                 local rc = _rc
 63.                 di as err "hashsort gave different sort order to sort"
 64.             }
 65.             else {
 66.                 if ("`benchmode'" == "") di as txt "    hashsort same as sort but sortpreserve trick caused some loss of precision (< 1e-15)"
 67.             }
 68.         }
 69.     restore
 70.     qui timer list
 71.     local time_hashsort = r(t43)
 72. 
.     if ( `rc' ) exit `rc'
 73. 
.     if ( "`fsort'" == "fsort" ) {
 74.         timer clear
 75.         preserve
 76.             timer on 44
 77.             qui fsort `varlist'
 78.             timer off 44
 79.             cf * using `file_sort'
 80.         restore
 81.         qui timer list
 82.         local time_fsort = r(t44)
 83.     }
 84.     else {
 85.         local time_fsort = .
 86.     }
 87. 
.     local rs = `time_sort'  / `time_hashsort'
 88.     local rf = `time_fsort' / `time_hashsort'
 89.     di "    `:di %5.3g `time_sort'' | `:di %5.3g `time_fsort'' | `:di %8.3g `time_hashsort'' | `:di %11.3g `rs'' | `:di %11.3g `rf'' | `varlist'"
 90. end

. 
. capture program drop compare_gsort

. program compare_gsort, rclass
  1.     syntax anything, [benchmode *]
  2.     tempvar ix
  3.     gen long `ix' = _n
  4.     if ( "`benchmode'" == "" ) local gstable `ix'
  5. 
.     timer clear
  6.     preserve
  7.         timer on 42
  8.         gsort `anything' `gstable', mfirst
  9.         timer off 42
 10.         tempfile file_sort
 11.         qui save `file_sort'
 12.     restore
 13.     qui timer list
 14.     local time_sort = r(t42)
 15. 
.     timer clear
 16.     preserve
 17.         timer on 43
 18.         qui hashsort `anything', `options'
 19.         timer off 43
 20.         cf `:di subinstr("`anything'", "-", "", .)' using `file_sort'
 21.     restore
 22.     qui timer list
 23.     local time_hashsort = r(t43)
 24. 
.     local rs = `time_sort'  / `time_hashsort'
 25.     di "    `:di %5.3g `time_sort'' | `:di %8.3g `time_hashsort'' | `:di %11.3g `rs'' | `anything'"
 26. end

. 
. * ---------------------------------------------------------------------
. * Run the things
. 
. main, dependencies basic_checks comparisons bench_test


Compare _pctile
     - opts:  p(0.1 5 10 30 50 70 90 95 99.9)
     - if in: 
     - obs:   10,000,000
    _pctile | gquantiles | ratio (_/g) | varlist
    ------- | ---------- | ----------- | -------
       9.54 |       1.53 |        6.23 | double1 (~ U(0,  1000), no missings, groups of size )
       7.36 |       1.65 |        4.46 | double3 (~ N(10, 5), many missings, groups of size )
       9.41 |       2.56 |        3.67 | ru (~ N(0, 100), few missings, unique)
        6.8 |       1.41 |        4.83 | int1 (discrete (no missings, many groups))
       5.44 |        .49 |        11.1 | int3 (discrete (many missings, few groups))
       8.69 |       2.06 |        4.22 | ix (discrete (few missings, unique))
         12 |        2.1 |        5.71 | int1^2 + 3 * double1 ()
        9.1 |       2.02 |        4.51 | 2 * int1 + log(double1) ()
       5.14 |       1.14 |         4.5 | int1 * double3 + exp(double3) ()


Compare _pctile
     - opts:  nq(10)
     - if in: 
     - obs:   10,000,000
    _pctile | gquantiles | ratio (_/g) | varlist
    ------- | ---------- | ----------- | -------
       6.34 |       2.09 |        3.04 | double1 (~ U(0,  1000), no missings, groups of size )
       5.68 |       1.22 |        4.66 | double3 (~ N(10, 5), many missings, groups of size )
       7.56 |       2.45 |        3.09 | ru (~ N(0, 100), few missings, unique)
        4.9 |       .613 |        7.99 | int1 (discrete (no missings, many groups))
       4.16 |       .354 |        11.8 | int3 (discrete (many missings, few groups))
       5.88 |       1.85 |        3.17 | ix (discrete (few missings, unique))
       5.89 |       1.38 |        4.29 | int1^2 + 3 * double1 ()
       5.36 |       1.48 |        3.61 | 2 * int1 + log(double1) ()
        4.4 |       1.24 |        3.54 | int1 * double3 + exp(double3) ()


Compare xtile
     - opts:  nq(10)
     - if in: 
     - obs:   10,000,000
    xtile | fastxtile | gquantiles | ratio (x/g) | ratio (f/g) | varlist
    ----- | --------- | ---------- | ----------- | ----------- | -------
     32.2 |      7.75 |       2.08 |        15.5 |        3.73 | double1 (~ U(0,  1000), no missings, groups of size )
     31.6 |      9.43 |       2.65 |        11.9 |        3.56 | double3 (~ N(10, 5), many missings, groups of size )
     37.3 |      11.5 |       5.74 |         6.5 |        2.01 | ru (~ N(0, 100), few missings, unique)
     33.4 |      7.53 |       2.98 |        11.2 |        2.53 | int1 (discrete (no missings, many groups))
     25.5 |      5.12 |       1.06 |        23.9 |        4.81 | int3 (discrete (many missings, few groups))
     28.6 |      8.22 |       2.95 |        9.67 |        2.79 | ix (discrete (few missings, unique))
(note: fastxtile failed where xtile succeeded)
     29.4 |         . |       3.26 |        9.03 |           . | int1^2 + 3 * double1 ()
(note: fastxtile failed where xtile succeeded)
     34.9 |         . |       3.98 |        8.77 |           . | 2 * int1 + log(double1) ()
(note: fastxtile failed where xtile succeeded)
     30.7 |         . |       4.35 |        7.06 |           . | int1 * double3 + exp(double3) ()


Compare pctile
     - opts:  nq(10)
     - if in: 
     - obs:   10,000,000
    pctile | gquantiles | ratio (p/g) | varlist
    ------ | ---------- | ----------- | -------
      7.52 |        1.8 |        4.18 | double1 ()
      8.08 |       1.58 |        5.11 | double3 ()
      9.26 |        2.9 |        3.19 | ru ()
      8.93 |        1.2 |        7.45 | int1 ()
      7.73 |       .637 |        12.1 | int3 ()
      8.48 |       2.25 |        3.77 | ix ()
      8.61 |        2.7 |        3.19 | int1^2 + 3 * double1 ()
      8.27 |       2.73 |        3.03 | 2 * int1 + log(double1) ()
      7.73 |       2.56 |        3.01 | int1 * double3 + exp(double3) ()
r(17999);

end of do-file
r(17999);
