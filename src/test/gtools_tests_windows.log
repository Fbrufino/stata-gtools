----------------------------------------------------------------------------------------------------------------------
      name:  <unnamed>
       log:  C:\cygwin64\home\mauricio\gtools\build\gtools_tests_windows.log
  log type:  text
 opened on:   9 Oct 2017, 08:32:12

. do C:\cygwin64\home\mauricio\gtools\build\gtools_tests.do

. * ---------------------------------------------------------------------
. * Project: gtools
. * Program: gtools_tests.do
. * Author:  Mauricio Caceres Bravo <mauricio.caceres.bravo@gmail.com>
. * Created: Tue May 16 07:23:02 EDT 2017
. * Updated: Sun Oct  8 13:21:53 EDT 2017
. * Purpose: Unit tests for gtools
. * Version: 0.7.5
. * Manual:  help gcollapse, help gegen
. 
. * Stata start-up options
. * ----------------------
. 
. version 13

. clear all

. set more off

. set varabbrev off

. * set seed 42
. set seed 1729

. set linesize 128

. ssc install ralpha
checking ralpha consistency and verifying not already installed...
all files already exist and are up to date.

. 
. * Main program wrapper
. * --------------------
. 
. program main
  1.     syntax, [CAPture NOIsily *]
  2. 
.     * Set up
.     * ------
. 
.     local  progname tests
  3.     local  start_time "$S_TIME $S_DATE"
  4.     di "Start: `start_time'"
  5. 
.     * Run the things
.     * --------------
. 
.     `capture' `noisily' {
  6.         * do test_gcollapse.do
.         * do test_gegen.do
.         * do test_hashsort.do
.         * do test_gisid.do
.         * do test_glevelsof.do
.         * do bench_gcollapse.do
. 
.         if ( `:list posof "checks" in options' ) {
  7. 
.             di ""
  8.             di "-------------------------------------"
  9.             di "Basic unit-tests $S_TIME $S_DATE"
 10.             di "-------------------------------------"
 11. 
.             unit_test, `noisily' test(checks_corners, oncollision(error) debug_force_single)
 12. 
.             unit_test, `noisily' test(checks_byvars_gcollapse,  oncollision(error) debug_force_single)
 13.             unit_test, `noisily' test(checks_byvars_gcollapse,  oncollision(error) debug_force_single forceio debug_io_read
> _method(0))
 14.             unit_test, `noisily' test(checks_byvars_gcollapse,  oncollision(error) debug_force_single forceio debug_io_read
> _method(1))
 15. 
.             unit_test, `noisily' test(checks_options_gcollapse, oncollision(error) debug_force_single)
 16.             unit_test, `noisily' test(checks_options_gcollapse, oncollision(error) debug_force_single debug_io_read_method(
> 0))
 17.             unit_test, `noisily' test(checks_options_gcollapse, oncollision(error) debug_force_single debug_io_read_method(
> 1))
 18. 
.             if !inlist("`c(os)'", "Windows") {
 19.                 unit_test, `noisily' test(checks_corners, oncollision(error) debug_force_multi)
 20. 
.                 unit_test, `noisily' test(checks_byvars_gcollapse,  oncollision(error) debug_force_multi)
 21.                 unit_test, `noisily' test(checks_byvars_gcollapse,  oncollision(error) debug_force_multi forceio debug_io_r
> ead_method(0))
 22.                 unit_test, `noisily' test(checks_byvars_gcollapse,  oncollision(error) debug_force_multi forceio debug_io_r
> ead_method(1))
 23. 
.                 unit_test, `noisily' test(checks_options_gcollapse, oncollision(error) debug_force_multi)
 24.                 unit_test, `noisily' test(checks_options_gcollapse, oncollision(error) debug_force_multi debug_io_read_meth
> od(0))
 25.                 unit_test, `noisily' test(checks_options_gcollapse, oncollision(error) debug_force_multi debug_io_read_meth
> od(1))
 26.             }
 27. 
.             di ""
 28.             di "-----------------------------------------------------------"
 29.             di "Consistency checks (vs collapse, egen) $S_TIME $S_DATE"
 30.             di "-----------------------------------------------------------"
 31. 
.             consistency_gcollapse,       `noisily' oncollision(error) debug_force_single
 32.             consistency_gcollapse,       `noisily' oncollision(error) debug_force_single forceio debug_io_read_method(0)
 33.             consistency_gcollapse,       `noisily' oncollision(error) debug_force_single forceio debug_io_read_method(1)
 34.             consistency_gcollapse,       `noisily' oncollision(error) debug_force_single debug_io_check(1) debug_io_thresho
> ld(0.1)
 35.             consistency_gcollapse,       `noisily' oncollision(error) debug_force_single debug_io_check(1) debug_io_thresho
> ld(1000000)
 36.             consistency_gegen,           `noisily' oncollision(error) debug_force_single
 37.             consistency_gegen_gcollapse, `noisily' oncollision(error) debug_force_single
 38. 
.             if !inlist("`c(os)'", "Windows") {
 39.                 consistency_gcollapse,       `noisily' oncollision(error) debug_force_multi
 40.                 consistency_gcollapse,       `noisily' oncollision(error) debug_force_multi forceio debug_io_read_method(0)
 41.                 consistency_gcollapse,       `noisily' oncollision(error) debug_force_multi forceio debug_io_read_method(1)
 42.                 consistency_gcollapse,       `noisily' oncollision(error) debug_force_multi debug_io_check(1) debug_io_thre
> shold(0.1)
 43.                 consistency_gcollapse,       `noisily' oncollision(error) debug_force_multi debug_io_check(1) debug_io_thre
> shold(1000000)
 44.                 consistency_gegen,           `noisily' oncollision(error) debug_force_multi
 45.                 consistency_gegen_gcollapse, `noisily' oncollision(error) debug_force_multi
 46.             }
 47. 
.             di ""
 48.             di "--------------------------------"
 49.             di "Check extra $S_TIME $S_DATE"     
 50.             di "--------------------------------"
 51. 
.             unit_test, `noisily' test(checks_hashsort, `noisily' oncollision(error))
 52.             unit_test, `noisily' test(checks_isid,     `noisily' oncollision(error))
 53.             unit_test, `noisily' test(checks_levelsof, `noisily' oncollision(error))
 54. 
.             compare_isid,     `noisily' oncollision(error)
 55.             compare_levelsof, `noisily' oncollision(error)
 56.             compare_hashsort, `noisily' oncollision(error)
 57.         }
 58. 
.         if ( `:list posof "bench_gtools" in options' ) {
 59.             bench_switch_fcoll y1 y2 y3 y4 y5 y6 y7 y8 y9 y10 y11 y12 y13 y14 y15, by(x3) kmin(4) kmax(7) kvars(15) style(f
> tools) gcoll(debug_force_single)
 60.             bench_switch_fcoll y1 y2 y3,          by(x3)  kmin(4) kmax(7) kvars(3) stats(mean median)               style(f
> tools) gcoll(debug_force_single)
 61.             bench_switch_fcoll y1 y2 y3 y4 y5 y6, by(x3)  kmin(4) kmax(7) kvars(6) stats(sum mean count min max)    style(f
> tools) gcoll(debug_force_single)
 62.             bench_switch_fcoll x1 x2, margin(N) by(group) kmin(4) kmax(7) pct(median iqr p23 p77)                   style(g
> tools) gcoll(debug_force_single)
 63.             bench_switch_fcoll x1 x2, margin(J) by(group) kmin(1) kmax(6) pct(median iqr p23 p77) obsexp(6)         style(g
> tools) gcoll(debug_force_single)
 64.         }
 65. 
.         if ( `:list posof "test" in options' ) {
 66.             cap ssc install ftools
 67.             cap ssc install moremata
 68. 
.             di "Short (quick) versions of the benchmarks"
 69.             bench_ftools y1 y2 y3 y4 y5 y6 y7 y8 y9 y10 y11 y12 y13 y14 y15, by(x3) kmin(3) kmax(4) kvars(15)
 70.             bench_ftools y1 y2 y3,          by(x3) kmin(3) kmax(4) kvars(3) stats(mean median)
 71.             bench_ftools y1 y2 y3 y4 y5 y6, by(x3) kmin(3) kmax(4) kvars(6) stats(sum mean count min max)
 72.             bench_sample_size x1 x2, by(group) kmin(3) kmax(4) pct(median iqr p23 p77)
 73.             bench_group_size  x1 x2, by(group) kmin(2) kmax(3) pct(median iqr p23 p77) obsexp(3)
 74. 
.             bench_switch_fcoll y1 y2 y3 y4 y5 y6 y7 y8 y9 y10 y11 y12 y13 y14 y15, by(x3) kmin(3) kmax(4) kvars(15) style(ftoo
> ls)
 75.             bench_switch_fcoll y1 y2 y3,          by(x3)    kmin(3) kmax(4) kvars(3) stats(mean median)             style(f
> tools)
 76.             bench_switch_fcoll y1 y2 y3 y4 y5 y6, by(x3)    kmin(3) kmax(4) kvars(6) stats(sum mean count min max)  style(f
> tools)
 77.             bench_switch_fcoll x1 x2, margin(N)   by(group) kmin(3) kmax(4) pct(median iqr p23 p77)                 style(g
> tools)
 78.             bench_switch_fcoll x1 x2, margin(J)   by(group) kmin(2) kmax(3) pct(median iqr p23 p77) obsexp(3)       style(g
> tools)
 79.         }
 80. 
.         if ( `:list posof "benchmark" in options' ) {
 81.             cap ssc install ftools
 82.             cap ssc install moremata
 83. 
.             bench_ftools y1 y2 y3 y4 y5 y6 y7 y8 y9 y10 y11 y12 y13 y14 y15, by(x3) kmin(5) kmax(7) kvars(15)
 84.             bench_ftools y1 y2 y3,             by(x3)    kmin(5) kmax(7) kvars(3) stats(mean median)
 85.             bench_ftools y1 y2 y3 y4 y5 y6,    by(x3)    kmin(5) kmax(7) kvars(6) stats(sum mean count min max)
 86.             bench_sample_size x1 x2, margin(N) by(group) kmin(5) kmax(7) pct(median iqr p23 p77)
 87.             bench_group_size  x1 x2, margin(J) by(group) kmin(4) kmax(6) pct(median iqr p23 p77) obsexp(6)
 88.         }
 89. 
.         if ( `:list posof "bench_fcoll" in options' ) {
 90.             cap ssc install ftools
 91.             cap ssc install moremata
 92. 
.             bench_switch_fcoll y1 y2 y3 y4 y5 y6 y7 y8 y9 y10 y11 y12 y13 y14 y15, by(x3) kmin(4) kmax(7) kvars(15) style(ftoo
> ls)
 93.             bench_switch_fcoll y1 y2 y3,          by(x3)  kmin(4) kmax(7) kvars(3) stats(mean median)               style(f
> tools)
 94.             bench_switch_fcoll y1 y2 y3 y4 y5 y6, by(x3)  kmin(4) kmax(7) kvars(6) stats(sum mean count min max)    style(f
> tools)
 95.             bench_switch_fcoll x1 x2, margin(N) by(group) kmin(4) kmax(7) pct(median iqr p23 p77)                   style(g
> tools)
 96.             bench_switch_fcoll x1 x2, margin(J) by(group) kmin(1) kmax(6) pct(median iqr p23 p77) obsexp(6)         style(g
> tools)
 97.         }
 98. 
.         if ( `:list posof "bench_extra" in options' ) {
 99.             compare_hashsort, bench(10)
100.             bench_levelsof,   bench(10)
101.             bench_isid,       bench(10)
102.             bench_egen,       bench(10)
103.         }
104.     }
105.     local rc = _rc
106. 
.     exit_message, rc(`rc') progname(`progname') start_time(`start_time') `capture'
107.     exit `rc'
108. end

. 
. * ---------------------------------------------------------------------
. * Aux programs
. 
. capture program drop exit_message

. program exit_message
  1.     syntax, rc(int) progname(str) start_time(str) [CAPture]
  2.     local end_time "$S_TIME $S_DATE"
  3.     local time     "Start: `start_time'" _n(1) "End: `end_time'"
  4.     di ""
  5.     if (`rc' == 0) {
  6.         di "End: $S_TIME $S_DATE"
  7.         local paux      ran
  8.         local message "`progname' finished running" _n(2) "`time'"
  9.         local subject "`progname' `paux'"
 10.     }
 11.     else if ("`capture'" == "") {
 12.         di "WARNING: $S_TIME $S_DATE"
 13.         local paux ran with non-0 exit status
 14.         local message "`progname' ran but Stata gave error code r(`rc')" _n(2) "`time'"
 15.         local subject "`progname' `paux'"
 16.     }
 17.     else {
 18.         di "ERROR: $S_TIME $S_DATE"
 19.         local paux ran with errors
 20.         local message "`progname' stopped with error code r(`rc')" _n(2) "`time'"
 21.         local subject "`progname' `paux'"
 22.     }
 23.     di "`subject'"
 24.     di ""
 25.     di "`message'"
 26. end

. 
. * Wrapper for easy timer use
. cap program drop mytimer

. program mytimer, rclass
  1.     * args number what step
.     syntax anything, [minutes ts]
  2. 
.     tokenize `anything'
  3.     local number `1'
  4.     local what   `2'
  5.     local step   `3'
  6. 
.     if ("`what'" == "end") {
  7.         qui {
  8.             timer clear `number'
  9.             timer off   `number'
 10.         }
 11.         if ("`ts'" == "ts") mytimer_ts `step'
 12.     }
 13.     else if ("`what'" == "info") {
 14.         qui {
 15.             timer off `number'
 16.             timer list `number'
 17.         }
 18.         local seconds = r(t`number')
 19.         local prints  `:di trim("`:di %21.2gc `seconds''")' seconds
 20.         if ("`minutes'" != "") {
 21.             local minutes = `seconds' / 60
 22.             local prints  `:di trim("`:di %21.3gc `minutes''")' minutes
 23.         }
 24.         mytimer_ts Step `step' took `prints'
 25.         qui {
 26.             timer clear `number'
 27.             timer on    `number'
 28.         }
 29.     }
 30.     else {
 31.         qui {
 32.             timer clear `number'
 33.             timer on    `number'
 34.             timer off   `number'
 35.             timer list  `number'
 36.             timer on    `number'
 37.         }
 38.         if ("`ts'" == "ts") mytimer_ts `step'
 39.     }
 40. end

. 
. capture program drop mytimer_ts

. program mytimer_ts
  1.     display _n(1) "{hline 79}"
  2.     if ("`0'" != "") display `"`0'"'
  3.     display `"        Base: $S_FN"'
  4.     display  "        In memory: `:di trim("`:di %21.0gc _N'")' observations"
  5.     display  "        Timestamp: $S_TIME $S_DATE"
  6.     display  "{hline 79}" _n(1)
  7. end

. 
. capture program drop unit_test

. program unit_test
  1.     syntax, test(str) [NOIsily tab(int 4)]
  2.     local tabs `""'
  3.     forvalues i = 1 / `tab' {
  4.         local tabs "`tabs' "
  5.     }
  6.     cap `noisily' `test'
  7.     if ( _rc ) {
  8.         di as error `"`tabs'test(failed): `test'"'
  9.         exit _rc
 10.     }
 11.     else di as txt `"`tabs'test(passed): `test'"'
 12. end

. 
. capture program drop sim

. program sim, rclass
  1.     syntax, [offset(str) n(int 100) nj(int 10) njsub(int 2) string float sortg replace groupmiss outmiss]
  2.     qui {
  3.         if ("`offset'" == "") local offset 0
  4.         clear
  5.         set obs `n'
  6.         gen group  = ceil(`nj' *  _n / _N) + `offset'
  7.         bys group: gen groupsub   = ceil(`njsub' *  _n / _N)
  8.         bys group: gen groupfloat = ceil(`njsub' *  _n / _N) + 0.5
  9.         gen rsort = runiform() - 0.5
 10.         gen rnorm = rnormal()
 11.         if ( "`sortg'"     == "" ) sort rsort
 12.         if ( "`groupmiss'" != "" ) replace group = . if runiform() < 0.1
 13.         if ( "`outmiss'"   != "" ) replace rsort = . if runiform() < 0.1
 14.         if ( "`outmiss'"   != "" ) replace rnorm = . if runiform() < 0.1
 15.         if ( "`float'"     != "" ) replace group = group / `nj'
 16.         if ( "`string'" != "" ) {
 17.             tostring group,    `:di cond("`replace'" == "", "gen(groupstr)",    "replace")'
 18.             tostring groupsub, `:di cond("`replace'" == "", "gen(groupsubstr)", "replace")'
 19.             if ( "`replace'" == "replace" ) {
 20.                 replace group    = "" if group    == "."
 21.                 replace groupsub = "" if groupsub == "."
 22.             }
 23.             else {
 24.                 replace groupstr    = "" if mi(group)
 25.                 replace groupsubstr = "" if mi(groupsub)
 26.             }
 27.             local target `:di cond("`replace'" == "", "groupstr", "group")'
 28.             replace `target' = "i am a modesly long string" + `target' if !mi(`target')
 29.             local target `:di cond("`replace'" == "", "groupstr", "group")'
 30.             replace `target' = "ss" + `target' if !mi(`target')
 31.         }
 32.         gen long grouplong = ceil(`nj' *  _n / _N) + `offset'
 33.     }
 34.     qui sum rsort
 35.     di "Obs = " trim("`:di %21.0gc _N'") "; Groups = " trim("`:di %21.0gc `nj''")
 36.     compress
 37.     return local n  = `n'
 38.     return local nj = `nj'
 39.     return local offset = `offset'
 40.     return local string = ("`string'" != "")
 41. end

. 
. * ---------------------------------------------------------------------
. capture program drop consistency_gcollapse

. program consistency_gcollapse
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "consistency_gcollapse, `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     local stats sum mean sd max min count percent first last firstnm lastnm median iqr
  4.     local percentiles p1 p13 p30 p50 p70 p87 p99
  5.     local collapse_str ""
  6.     foreach stat of local stats {
  7.         local collapse_str `collapse_str' (`stat') `stat' = rnorm
  8.     }
  9.     foreach pct of local percentiles {
 10.         local collapse_str `collapse_str' (`pct') `pct' = rnorm
 11.     }
 12. 
.     qui sim, n(50000) nj(8) njsub(4) string groupmiss outmiss float
 13.     mytimer 9
 14.     qui `noisily' foreach i in 0 3 6 9 {
 15.         if ( `i' == 0 ) local by groupsub groupstr
 16.         if ( `i' == 3 ) local by groupstr groupsubstr 
 17.         if ( `i' == 6 ) local by groupsub group
 18.         if ( `i' == 9 ) local by grouplong
 19.     preserve
 20.         mytimer 9 info
 21.         gcollapse `collapse_str', by(`by') verbose benchmark `options'
 22.         mytimer 9 info "gcollapse to groups"
 23.         tempfile f`i'
 24.         save `f`i''
 25.     restore, preserve
 26.         mytimer 9 info
 27.         collapse `collapse_str', by(`by')
 28.         mytimer 9 info "collapse to groups"
 29.         tempfile f`:di `i' + 2'
 30.         save `f`:di `i' + 2''
 31.     restore
 32.     }
 33.     mytimer 9 off
 34. 
.     qui sim, n(50000) nj(8000) njsub(4) string groupmiss outmiss
 35.     qui `noisily' foreach i in 12 15 18 21 {
 36.         if (`i' == 12) local by groupsub groupstr
 37.         if (`i' == 15) local by groupstr
 38.         if (`i' == 18) local by groupsub group
 39.         if (`i' == 21) local by grouplong
 40.     preserve
 41.         mytimer 9 info
 42.         gcollapse `collapse_str', by(`by') verbose benchmark `options'
 43.         mytimer 9 info "gcollapse to groups"
 44.         tempfile f`i'
 45.         save `f`i''
 46.     restore, preserve
 47.         mytimer 9 info
 48.         collapse `collapse_str', by(`by')
 49.         mytimer 9 info "collapse to groups"
 50.         tempfile f`:di `i' + 2'
 51.         save `f`:di `i' + 2''
 52.     restore
 53.     }
 54. 
.     qui sim, n(50000) nj(8000) njsub(4) string groupmiss outmiss
 55.     qui `noisily' foreach i in 24 27 30 33 {
 56.         if (`i' == 24) local by groupsub groupstr
 57.         if (`i' == 27) local by groupstr
 58.         if (`i' == 30) local by groupsub group
 59.         if (`i' == 33) local by grouplong
 60.         local in1  = ceil((0.00 + 0.25 * runiform()) * `=_N')
 61.         local in2  = ceil((0.75 + 0.25 * runiform()) * `=_N')
 62.         local from = cond(`in1' < `in2', `in1', `in2')
 63.         local to   = cond(`in1' > `in2', `in1', `in2')
 64.         local ifin if rsort < 0 in `from' / `to'
 65.         qui count `ifin'
 66.         if (`r(N)' == 0) {
 67.             local in1  = ceil(runiform() * 10)
 68.             local in2  = ceil(`=_N' - runiform() * 10)
 69.             local from = cond(`in1' < `in2', `in1', `in2')
 70.             local to   = cond(`in1' > `in2', `in1', `in2')
 71.             local ifin if rsort < 0 in `from' / `to'
 72.         }
 73.     preserve
 74.         mytimer 9 info
 75.         gcollapse `collapse_str' `ifin', by(`by') verbose benchmark `options'
 76.         mytimer 9 info "gcollapse to groups"
 77.         tempfile f`i'
 78.         save `f`i''
 79.     restore, preserve
 80.         mytimer 9 info
 81.         collapse `collapse_str' `ifin', by(`by')
 82.         mytimer 9 info "collapse to groups"
 83.         tempfile f`:di `i' + 2'
 84.         save `f`:di `i' + 2''
 85.     restore
 86.     }
 87. 
.     foreach i in 0 3 6 9 12 15 18 21 24 27 30 33 {
 88.     preserve
 89.     use `f`:di `i' + 2'', clear
 90.         local bad_any = 0
 91.         if (`i' == 0  ) local bad groupsub groupstr
 92.         if (`i' == 3  ) local bad groupstr groupsubstr 
 93.         if (`i' == 6  ) local bad groupsub group
 94.         if (`i' == 9  ) local bad grouplong
 95.         if (`i' == 12 ) local bad groupsub groupstr
 96.         if (`i' == 15 ) local bad groupstr
 97.         if (`i' == 18 ) local bad groupsub group
 98.         if (`i' == 21 ) local bad grouplong
 99.         if (`i' == 24 ) local bad groupsub groupstr
100.         if (`i' == 27 ) local bad groupstr
101.         if (`i' == 30 ) local bad groupsub group
102.         if (`i' == 33 ) local bad grouplong
103.         if ( `i' == 0 ) {
104.             di _n(1) "Comparing collapse for N = 50,000 with J1 = 8 and J2 = 4"
105.         }
106.         if ( `i' == 12 ) {
107.             di _n(1) "Comparing collapse for N = 50,000 with J1 = 8,000 and J2 = 4"
108.         }
109.         if ( `i' == 24 ) {
110.             di _n(1) "Comparing collapse for N = 50,000 with J1 = 8,000 and J2 = 4 (if in)"
111.         }
112.         local by `bad'
113.         foreach var in `stats' `percentiles' {
114.             rename `var' c_`var'
115.         }
116.         qui merge 1:1 `by' using `f`i'', assert(3)
117.         foreach var in `stats' `percentiles' {
118.             qui count if ( (abs(`var' - c_`var') > `tol') & (`var' != c_`var'))
119.             if ( `r(N)' > 0 ) {
120.                 gen bad_`var' = abs(`var' - c_`var') * (`var' != c_`var')
121.                 local bad `bad' *`var'
122.                 di "`var' has `:di r(N)' mismatches".
123.                 local bad_any = 1
124.             }
125.         }
126.         if ( `bad_any' ) {
127.             order `bad'
128.             egen bad_any = rowmax(bad_*)
129.             l *count* `bad' if bad_any
130.             sum bad_*
131.             exit 9
132.         }
133.         else {
134.             di "    compare_collapse (passed): gcollapse results equal to collapse (tol = `tol', `by')"
135.         }
136.     restore
137.     }
138. end

. 
. capture program drop checks_byvars_gcollapse

. program checks_byvars_gcollapse
  1.     syntax, [*]
  2.     di _n(1) "{hline 80}" _n(1) "checks_byvars_gcollapse `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     sim, n(1000) nj(250) string
  4. 
.     set rmsg on
  5.     preserve
  6.         gcollapse (mean) rnorm (sum) sum = rnorm (sd) sd = rnorm, verbose `options' by(groupstr)
  7.     restore, preserve
  8.         gcollapse (mean) rnorm (sum) sum = rnorm (sd) sd = rnorm, verbose `options' by(group)
  9.     restore, preserve
 10.         gcollapse (mean) rnorm (sum) sum = rnorm (sd) sd = rnorm, verbose `options' by(groupsub)
 11.     restore, preserve
 12.         gcollapse (mean) rnorm (sum) sum = rnorm (sd) sd = rnorm, verbose `options' by(grouplong)
 13.     restore, preserve
 14.         gcollapse (mean) rnorm (sum) sum = rnorm (sd) sd = rnorm, verbose `options' by(groupsub)
 15.     restore, preserve
 16.         gcollapse (mean) rnorm (sum) sum = rnorm (sd) sd = rnorm, verbose `options' by(group groupsub)
 17.     restore, preserve
 18.         gcollapse (mean) rnorm (sum) sum = rnorm (sd) sd = rnorm, verbose `options' by(grouplong groupsub)
 19.     restore, preserve
 20.         gcollapse (mean) rnorm (sum) sum = rnorm (sd) sd = rnorm, verbose `options' by(groupstr groupsub)
 21.     restore
 22.     set rmsg off
 23. 
.     di ""
 24.     di as txt "Passed! checks_byvars_gcollapse `options'"
 25. end

. 
. capture program drop checks_options_gcollapse

. program checks_options_gcollapse
  1.     syntax, [*]
  2.     di _n(1) "{hline 80}" _n(1) "checks_options_gcollapse `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     local stats mean count median iqr
  4.     local collapse_str ""
  5.     foreach stat of local stats {
  6.         local collapse_str `collapse_str' (`stat') `stat' = rnorm `stat'2 = rnorm
  7.     }
  8. 
.     sim, n(200) nj(10) string outmiss
  9.     preserve
 10.         gcollapse `collapse_str', by(groupstr) verbose benchmark `options'
 11.         if ( `=_N' > 10 ) l in 1/10
 12.         if ( `=_N' < 10 ) l
 13.     restore, preserve
 14.         gcollapse `collapse_str', by(groupstr) verbose forceio `options'
 15.         if ( `=_N' > 10 ) l in 1/10
 16.         if ( `=_N' < 10 ) l
 17.     restore, preserve
 18.         gcollapse `collapse_str', by(groupstr) verbose forcemem `options'
 19.         if ( `=_N' > 10 ) l in 1/10
 20.         if ( `=_N' < 10 ) l
 21.     restore, preserve
 22.         gcollapse `collapse_str', by(groupstr) verbose benchmark cw `options'
 23.         if ( `=_N' > 10 ) l in 1/10
 24.         if ( `=_N' < 10 ) l
 25.     restore, preserve
 26.         gcollapse `collapse_str', by(groupstr) verbose benchmark fast `options'
 27.         if ( `=_N' > 10 ) l in 1/10
 28.         if ( `=_N' < 10 ) l
 29.     restore, preserve
 30.         gcollapse `collapse_str', by(groupstr) double `options'
 31.         if ( `=_N' > 10 ) l in 1/10
 32.         if ( `=_N' < 10 ) l
 33.     restore, preserve
 34.         gcollapse `collapse_str', by(groupstr) merge `options'
 35.         if ( `=_N' > 10 ) l in 1/10
 36.         if ( `=_N' < 10 ) l
 37.     restore
 38. 
.     preserve
 39.         gcollapse `collapse_str', verbose benchmark `options'
 40.         if ( `=_N' > 10 ) l in 1/10
 41.         if ( `=_N' < 10 ) l
 42.     restore, preserve
 43.         gcollapse rnorm (mean) mean_rnorm = rnorm, by(groupstr groupsub) verbose benchmark `options'
 44.         assert rnorm == mean_rnorm
 45.         if ( `=_N' > 10 ) l in 1/10
 46.         if ( `=_N' < 10 ) l
 47.     restore, preserve
 48.         gcollapse rnorm, verbose benchmark `options'
 49.         if ( `=_N' > 10 ) l in 1/10
 50.         if ( `=_N' < 10 ) l
 51.     restore
 52. 
.     sort groupstr groupsub
 53.     preserve
 54.         gcollapse `collapse_str', by(groupstr groupsub) verbose benchmark `options'
 55.         if ( `=_N' > 10 ) l in 1/10
 56.         if ( `=_N' < 10 ) l
 57.     restore, preserve
 58.         gcollapse `collapse_str', by(groupstr groupsub) verbose benchmark smart `options'
 59.         if ( `=_N' > 10 ) l in 1/10
 60.         if ( `=_N' < 10 ) l
 61.     restore, preserve
 62.         gcollapse `collapse_str', by(groupsub groupstr) verbose benchmark smart `options'
 63.         if ( `=_N' > 10 ) l in 1/10
 64.         if ( `=_N' < 10 ) l
 65.     restore, preserve
 66.         gcollapse `collapse_str', by(groupstr) verbose benchmark `options'
 67.         if ( `=_N' > 10 ) l in 1/10
 68.         if ( `=_N' < 10 ) l
 69.     restore, preserve
 70.         gcollapse `collapse_str', by(groupstr) verbose benchmark smart `options'
 71.         if ( `=_N' > 10 ) l in 1/10
 72.         if ( `=_N' < 10 ) l
 73.     restore, preserve
 74.         gcollapse `collapse_str', by(groupsub) verbose benchmark smart `options'
 75.         if ( `=_N' > 10 ) l in 1/10
 76.         if ( `=_N' < 10 ) l
 77.     restore, preserve
 78.         gcollapse `collapse_str', by(groupsub) verbose benchmark `options'
 79.         if ( `=_N' > 10 ) l in 1/10
 80.         if ( `=_N' < 10 ) l
 81.     restore
 82. 
.     di ""
 83.     di as txt "Passed! checks_options_gcollapse `options'"
 84. end

. 
. capture program drop checks_corners

. program checks_corners
  1.     syntax, [*]
  2.     di _n(1) "{hline 80}" _n(1) "checks_corners `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     qui {
  4.         sysuse auto, clear
  5.         gen price2 = price
  6.         gcollapse price = price2, by(make)
  7.         gcollapse price in 1, by(make)
  8.     }
  9. 
.     qui {
 10.         clear
 11.         set matsize 100
 12.         set obs 10
 13.         forvalues i = 1/101 {
 14.             gen x`i' = 10
 15.         }
 16.         gen zz = runiform()
 17.         preserve
 18.             gcollapse zz, by(x*) `options'
 19.         restore, preserve
 20.             gcollapse x*, by(zz) `options'
 21.         restore
 22.     }
 23. 
.     qui {
 24.         clear
 25.         set matsize 400
 26.         set obs 10
 27.         forvalues i = 1/300 {
 28.             gen x`i' = 10
 29.         }
 30.         gen zz = runiform()
 31.         preserve
 32.             gcollapse zz, by(x*) `options'
 33.         restore, preserve
 34.             gcollapse x*, by(zz) `options'
 35.         restore
 36.     }
 37. 
.     qui {
 38.         clear
 39.         set obs 10
 40.         forvalues i = 1/800 {
 41.             gen x`i' = 10
 42.         }
 43.         gen zz = runiform()
 44.         preserve
 45.             gcollapse zz, by(x*) `options'
 46.         restore, preserve
 47.             gcollapse x*, by(zz) `options'
 48.         restore
 49. 
.         * Only fails in Stata/IC
.         * gen x801 = 10
.         * preserve
.         *     collapse zz, by(x*) `options'
.         * restore, preserve
.         *     collapse x*, by(zz) `options'
.         * restore
.     }
 50. 
.     di ""
 51.     di as txt "Passed! checks_corners `options'"
 52. end

. capture program drop consistency_gegen

. program consistency_gegen
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "consistency_gegen, `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     local stats total sum mean sd max min count median iqr
  4.     local percentiles 1 10 30 50 70 90 99
  5.     qui `noisily' sim, n(500000) nj(10000) njsub(4) string groupmiss outmiss
  6. 
.     cap drop g*_*
  7.     cap drop c*_*
  8.     di _n(1) "Checking full egen range"
  9.     foreach fun of local stats {
 10.         qui `noisily' gegen g_`fun' = `fun'(rnorm), by(groupstr groupsub) `options'
 11.         qui `noisily'  egen c_`fun' = `fun'(rnorm), by(groupstr groupsub)
 12.         cap noi assert (g_`fun' == c_`fun') | abs(g_`fun' - c_`fun') < `tol'
 13.         if ( _rc ) {
 14.             di as err "    compare_egen (failed): gegen `fun' not equal to egen (tol = `tol')"
 15.             exit _rc
 16.         }
 17.         else di as txt "    compare_egen (passed): gegen `fun' results similar to egen (tol = `tol')"
 18. 
.     }
 19. 
.     foreach p in `percentiles' {
 20.         qui  `noisily' gegen g_p`p' = pctile(rnorm), by(groupstr groupsub) p(`p') `options'
 21.         qui  `noisily'  egen c_p`p' = pctile(rnorm), by(groupstr groupsub) p(`p')
 22.         cap noi assert (g_p`p' == c_p`p') | abs(g_p`p' - c_p`p') < `tol'
 23.         if ( _rc ) {
 24.             di as err "    compare_egen (failed): gegen percentile `p' not equal to egen (tol = `tol')"
 25.             exit _rc
 26.         }
 27.         else di as txt "    compare_egen (passed): gegen percentile `p' results similar to egen (tol = `tol')"
 28.     }
 29. 
.     foreach fun in tag group {
 30.         qui  `noisily' gegen g_`fun' = `fun'(groupstr groupsub), v `options'
 31.         qui  `noisily'  egen c_`fun' = `fun'(groupstr groupsub)
 32.         cap noi assert (g_`fun' == c_`fun') | abs(g_`fun' - c_`fun') < `tol'
 33.         if ( _rc ) {
 34.             di as err "    compare_egen (failed): gegen `fun' not equal to egen (tol = `tol')"
 35.             exit _rc
 36.         }
 37.         else di as txt "    compare_egen (passed): gegen `fun' results similar to egen (tol = `tol')"
 38.     }
 39. 
.     {
 40.         qui  `noisily' gegen g_g1 = group(groupstr groupsub), counts(g_c1) fill(.)  v `options' missing
 41.         qui  `noisily' gegen g_g2 = group(groupstr groupsub), counts(g_c2)          v `options' missing
 42.         qui  `noisily' gegen g_c3 = count(1), by(groupstr groupsub)
 43.         qui  `noisily'  egen c_t1 = tag(groupstr groupsub),   missing
 44.         cap noi assert ( (g_c1 == g_c3) | (c_t1 == 0) ) & (g_c2 == g_c3)
 45.         if ( _rc ) {
 46.             di as err "    compare_egen (failed): gegen `fun' counts not equal to gegen count (tol = `tol')"
 47.             exit _rc
 48.         }
 49.         else di as txt "    compare_egen (passed): gegen `fun' counts results similar to gegen count (tol = `tol')"
 50.     }
 51. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.     cap drop g*_*
 52.     cap drop c*_*
 53.     di "Checking egen if range"
 54.     foreach fun of local stats {
 55.         qui  `noisily' gegen gif_`fun' = `fun'(rnorm) if rsort > 0, by(groupstr groupsub) `options'
 56.         qui  `noisily'  egen cif_`fun' = `fun'(rnorm) if rsort > 0, by(groupstr groupsub)
 57.         cap noi assert (gif_`fun' == cif_`fun') | abs(gif_`fun' - cif_`fun') < `tol'
 58.         if ( _rc ) {
 59.             di as err "    compare_egen_if (failed): gegen `fun' not equal to egen (tol = `tol')"
 60.             exit _rc
 61.         }
 62.         else di as txt "    compare_egen_if (passed): gegen `fun' results similar to egen (tol = `tol')"
 63.     }
 64. 
.     foreach p in `percentiles' {
 65.         qui  `noisily' gegen g_p`p' = pctile(rnorm) if rsort > 0, by(groupstr groupsub) p(`p') `options'
 66.         qui  `noisily'  egen c_p`p' = pctile(rnorm) if rsort > 0, by(groupstr groupsub) p(`p')
 67.         cap noi assert (g_p`p' == c_p`p') | abs(g_p`p' - c_p`p') < `tol'
 68.         if ( _rc ) {
 69.             di as err "    compare_egen_if (failed): gegen percentile `p' not equal to egen (tol = `tol')"
 70.             exit _rc
 71.         }
 72.         else di as txt "    compare_egen_if (passed): gegen percentile `p' results similar to egen (tol = `tol')"
 73.     }
 74. 
.     foreach fun in tag group {
 75.         qui  `noisily' gegen gif_`fun' = `fun'(groupstr groupsub) if rsort > 0, v `options'
 76.         qui  `noisily'  egen cif_`fun' = `fun'(groupstr groupsub) if rsort > 0
 77.         cap noi assert (gif_`fun' == cif_`fun') | abs(gif_`fun' - cif_`fun') < `tol'
 78.         if ( _rc ) {
 79.             di as err "    compare_egen_if (failed): gegen `fun' not equal to egen (tol = `tol')"
 80.             exit _rc
 81.         }
 82.         else di as txt "    compare_egen_if (passed): gegen `fun' results similar to egen (tol = `tol')"
 83.     }
 84. 
.     {
 85.         qui  `noisily' gegen g_g1 = group(groupstr groupsub) if rsort > 0, counts(g_c1) fill(.)  v `options' missing
 86.         qui  `noisily' gegen g_g2 = group(groupstr groupsub) if rsort > 0, counts(g_c2)          v `options' missing
 87.         qui  `noisily' gegen g_c3 = count(1) if rsort > 0, by(groupstr groupsub)
 88.         qui  `noisily'  egen c_t1 = tag(groupstr groupsub) if rsort > 0, missing
 89.         cap noi assert ( (g_c1 == g_c3) | (c_t1 == 0) ) & (g_c2 == g_c3)
 90.         if ( _rc ) {
 91.             di as err "    compare_egen (failed): gegen `fun' counts not equal to gegen count (tol = `tol')"
 92.             exit _rc
 93.         }
 94.         else di as txt "    compare_egen (passed): gegen `fun' counts results similar to gegen count (tol = `tol')"
 95.     }
 96. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.     cap drop g*_*
 97.     cap drop c*_*
 98.     di "Checking egen in range"
 99.     foreach fun of local stats {
100.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
101.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
102.         local from = cond(`in1' < `in2', `in1', `in2')
103.         local to   = cond(`in1' > `in2', `in1', `in2')
104.         qui  `noisily' gegen gin_`fun' = `fun'(rnorm) in `from' / `to', by(groupstr groupsub) `options'
105.         qui  `noisily'  egen cin_`fun' = `fun'(rnorm) in `from' / `to', by(groupstr groupsub)
106.         cap noi assert (gin_`fun' == cin_`fun') | abs(gin_`fun' - cin_`fun') < `tol'
107.         if ( _rc ) {
108.             di as err "    compare_egen_in (failed): gegen `fun' not equal to egen (tol = `tol')"
109.             exit _rc
110.         }
111.         else di as txt "    compare_egen_in (passed): gegen `fun' results similar to egen (tol = `tol')"
112.     }
113. 
.     foreach p in `percentiles' {
114.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
115.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
116.         local from = cond(`in1' < `in2', `in1', `in2')
117.         local to   = cond(`in1' > `in2', `in1', `in2')
118.         qui  `noisily' gegen g_p`p' = pctile(rnorm) in `from' / `to', by(groupstr groupsub) p(`p') `options'
119.         qui  `noisily'  egen c_p`p' = pctile(rnorm) in `from' / `to', by(groupstr groupsub) p(`p')
120.         cap noi assert (g_p`p' == c_p`p') | abs(g_p`p' - c_p`p') < `tol'
121.         if ( _rc ) {
122.             di as err "    compare_egen_in (failed): gegen percentile `p' not equal to egen (tol = `tol')"
123.             exit _rc
124.         }
125.         else di as txt "    compare_egen_in (passed): gegen percentile `p' results similar to egen (tol = `tol')"
126.     }
127. 
.     foreach fun in tag group {
128.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
129.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
130.         local from = cond(`in1' < `in2', `in1', `in2')
131.         local to   = cond(`in1' > `in2', `in1', `in2')
132.         qui  `noisily' gegen gin_`fun' = `fun'(groupstr groupsub) in `from' / `to', v b `options'
133.         qui  `noisily'  egen cin_`fun' = `fun'(groupstr groupsub) in `from' / `to'
134.         cap noi assert (gin_`fun' == cin_`fun') | abs(gin_`fun' - cin_`fun') < `tol'
135.         if ( _rc ) {
136.             di as err "    compare_egen_in (failed): gegen `fun' not equal to egen (tol = `tol')"
137.             exit _rc
138.         }
139.         else di as txt "    compare_egen_in (passed): gegen `fun' results similar to egen (tol = `tol')"
140.     }
141. 
.     {
142.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
143.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
144.         local from = cond(`in1' < `in2', `in1', `in2')
145.         local to   = cond(`in1' > `in2', `in1', `in2')
146.         qui  `noisily' gegen g_g1 = group(groupstr groupsub) in `from' / `to', counts(g_c1) fill(.)  v `options' missing
147.         qui  `noisily' gegen g_g2 = group(groupstr groupsub) in `from' / `to', counts(g_c2)          v `options' missing
148.         qui  `noisily' gegen g_c3 = count(1) in `from' / `to', by(groupstr groupsub)
149.         qui  `noisily'  egen c_t1 = tag(groupstr groupsub) in `from' / `to', missing
150.         cap noi assert ( (g_c1 == g_c3) | (c_t1 == 0) ) & (g_c2 == g_c3)
151.         if ( _rc ) {
152.             di as err "    compare_egen (failed): gegen `fun' counts not equal to gegen count (tol = `tol')"
153.             exit _rc
154.         }
155.         else di as txt "    compare_egen (passed): gegen `fun' counts results similar to gegen count (tol = `tol')"
156.     }
157. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.     cap drop g*_*
158.     cap drop c*_*
159.     di "Checking egen if in range"
160.     foreach fun of local stats {
161.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
162.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
163.         local from = cond(`in1' < `in2', `in1', `in2')
164.         local to   = cond(`in1' > `in2', `in1', `in2')
165.         qui  `noisily' gegen gifin_`fun' = `fun'(rnorm) if rsort < 0 in `from' / `to', by(groupstr groupsub) `options'
166.         qui  `noisily'  egen cifin_`fun' = `fun'(rnorm) if rsort < 0 in `from' / `to', by(groupstr groupsub)
167.         cap noi assert (gifin_`fun' == cifin_`fun') | abs(gifin_`fun' - cifin_`fun') < `tol'
168.         if ( _rc ) {
169.             di as err "    compare_egen_ifin (failed): gegen `fun' not equal to egen (tol = `tol')"
170.             exit _rc
171.         }
172.         else di as txt "    compare_egen_ifin (passed): gegen `fun' results similar to egen (tol = `tol')"
173.     }
174. 
.     foreach p in `percentiles' {
175.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
176.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
177.         local from = cond(`in1' < `in2', `in1', `in2')
178.         local to   = cond(`in1' > `in2', `in1', `in2')
179.         qui  `noisily' gegen g_p`p' = pctile(rnorm) if rsort < 0 in `from' / `to', by(groupstr groupsub) p(`p') `options'
180.         qui  `noisily'  egen c_p`p' = pctile(rnorm) if rsort < 0 in `from' / `to', by(groupstr groupsub) p(`p')
181.         cap noi assert (g_p`p' == c_p`p') | abs(g_p`p' - c_p`p') < `tol'
182.         if ( _rc ) {
183.             di as err "    compare_egen_ifin (failed): gegen percentile `p' not equal to egen (tol = `tol')"
184.             exit _rc
185.         }
186.         else di as txt "    compare_egen_ifin (passed): gegen percentile `p' results similar to egen (tol = `tol')"
187.     }
188. 
.     foreach fun in tag group {
189.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
190.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
191.         local from = cond(`in1' < `in2', `in1', `in2')
192.         local to   = cond(`in1' > `in2', `in1', `in2')
193.         qui  `noisily' gegen gifin_`fun' = `fun'(groupstr groupsub) if rsort < 0 in `from' / `to', v `options'
194.         qui  `noisily'  egen cifin_`fun' = `fun'(groupstr groupsub) if rsort < 0 in `from' / `to'
195.         cap noi assert (gifin_`fun' == cifin_`fun') | abs(gifin_`fun' - cifin_`fun') < `tol'
196.         if ( _rc ) {
197.             di as err "    compare_egen_ifin (failed): gegen `fun' not equal to egen (tol = `tol')"
198.             exit _rc
199.         }
200.         else di as txt "    compare_egen_ifin (passed): gegen `fun' results similar to egen (tol = `tol')"
201.     }
202. 
.     {
203.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
204.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
205.         local from = cond(`in1' < `in2', `in1', `in2')
206.         local to   = cond(`in1' > `in2', `in1', `in2')
207.         qui  `noisily' gegen g_g1 = group(groupstr groupsub) if rsort < 0 in `from' / `to', counts(g_c1) fill(.)  v `option
> s' missing
208.         qui  `noisily' gegen g_g2 = group(groupstr groupsub) if rsort < 0 in `from' / `to', counts(g_c2)          v `option
> s' missing
209.         qui  `noisily' gegen g_c3 = count(1) if rsort < 0 in `from' / `to', by(groupstr groupsub)
210.         qui  `noisily'  egen c_t1 = tag(groupstr groupsub) if rsort < 0 in `from' / `to', missing
211.         cap noi assert ( (g_c1 == g_c3) | (c_t1 == 0) ) & (g_c2 == g_c3)
212.         if ( _rc ) {
213.             di as err "    compare_egen (failed): gegen `fun' counts not equal to gegen count (tol = `tol')"
214.             exit _rc
215.         }
216.         else di as txt "    compare_egen (passed): gegen `fun' counts results similar to gegen count (tol = `tol')"
217.     }
218. end

. 
. capture program drop consistency_gegen_gcollapse

. program consistency_gegen_gcollapse
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "consistency_gegen_gcollapse, `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     qui `noisily' {
  4.         sim, n(20000) nj(100) njsub(2) string outmiss
  5.         gegen id = group(groupstr groupsub), `options'
  6.         gegen double mean    = mean   (rnorm),  by(groupstr groupsub) verbose benchmark `options'
  7.         gegen double sum     = sum    (rnorm),  by(groupstr groupsub) `options'
  8.         gegen double median  = median (rnorm),  by(groupstr groupsub) `options'
  9.         gegen double sd      = sd     (rnorm),  by(groupstr groupsub) `options'
 10.         gegen double iqr     = iqr    (rnorm),  by(groupstr groupsub) `options'
 11.         gegen double first   = first  (rnorm),  by(groupstr groupsub) `options' v b
 12.         gegen double last    = last   (rnorm),  by(groupstr groupsub) `options'
 13.         gegen double firstnm = firstnm(rnorm),  by(groupstr groupsub) `options'
 14.         gegen double lastnm  = lastnm (rnorm),  by(groupstr groupsub) `options'
 15.         gegen double q10     = pctile (rnorm),  by(groupstr groupsub) `options' p(10.5)
 16.         gegen double q30     = pctile (rnorm),  by(groupstr groupsub) `options' p(30)
 17.         gegen double q70     = pctile (rnorm),  by(groupstr groupsub) `options' p(70)
 18.         gegen double q90     = pctile (rnorm),  by(groupstr groupsub) `options' p(90.5)
 19. 
.         gcollapse (mean)    g_mean    = rnorm  ///
>                   (sum)     g_sum     = rnorm  ///
>                   (median)  g_median  = rnorm  ///
>                   (sd)      g_sd      = rnorm  ///
>                   (iqr)     g_iqr     = rnorm  ///
>                   (first)   g_first   = rnorm  ///
>                   (last)    g_last    = rnorm  ///
>                   (firstnm) g_firstnm = rnorm  ///
>                   (lastnm)  g_lastnm  = rnorm  ///
>                   (p10.5)   g_q10     = rnorm  ///
>                   (p30)     g_q30     = rnorm  ///
>                   (p70)     g_q70     = rnorm  ///
>                   (p90.5)   g_q90     = rnorm, by(id) benchmark verbose `options' merge double
 20.     }
 21. 
.     di _n(1) "Checking gegen vs gcollapse full range"
 22.     foreach fun in mean sum median sd iqr first last firstnm lastnm q10 q30 q70 q90 {
 23.         cap noi assert (g_`fun' == `fun') | abs(g_`fun' - `fun') < `tol'
 24.         if ( _rc ) {
 25.             recast double g_`fun' `fun'
 26.             cap noi assert (g_`fun' == `fun') | abs(g_`fun' - `fun') < `tol'
 27.             if ( _rc ) {
 28.                 di as err "    compare_gegen_gcollapse (failed): `fun' yielded different results (tol = `tol')"
 29.                 exit _rc
 30.             }
 31.             else di as txt "    compare_gegen_gcollapse (passed): `fun' yielded same results (tol = `tol')"
 32.         }
 33.         else di as txt "    compare_gegen_gcollapse (passed): `fun' yielded same results (tol = `tol')"
 34.     }
 35. 
.     qui `noisily' {
 36.         sim, n(20000) nj(100) njsub(2) string outmiss
 37. 
.         local in1  = ceil((0.00 + 0.25 * runiform()) * `=_N')
 38.         local in2  = ceil((0.75 + 0.25 * runiform()) * `=_N')
 39.         local from = cond(`in1' < `in2', `in1', `in2')
 40.         local to   = cond(`in1' > `in2', `in1', `in2')
 41.         qui count if rsort < 0 in `from' / `to'
 42.         if ( `r(N)' == 0 ) {
 43.             local in1  = ceil(runiform() * 10)
 44.             local in2  = ceil(`=_N' - runiform() * 10)
 45.             local from = cond(`in1' < `in2', `in1', `in2')
 46.             local to   = cond(`in1' > `in2', `in1', `in2')
 47.         }
 48. 
.         gegen id = group(groupstr groupsub) in `from' / `to', `options'
 49.         gegen double mean    = mean   (rnorm) in `from' / `to',  by(groupstr groupsub) verbose benchmark `options'
 50.         gegen double sum     = sum    (rnorm) in `from' / `to',  by(groupstr groupsub) `options'
 51.         gegen double median  = median (rnorm) in `from' / `to',  by(groupstr groupsub) `options'
 52.         gegen double sd      = sd     (rnorm) in `from' / `to',  by(groupstr groupsub) `options'
 53.         gegen double iqr     = iqr    (rnorm) in `from' / `to',  by(groupstr groupsub) `options'
 54.         gegen double first   = first  (rnorm) in `from' / `to',  by(groupstr groupsub) `options' v b
 55.         gegen double last    = last   (rnorm) in `from' / `to',  by(groupstr groupsub) `options'
 56.         gegen double firstnm = firstnm(rnorm) in `from' / `to',  by(groupstr groupsub) `options'
 57.         gegen double lastnm  = lastnm (rnorm) in `from' / `to',  by(groupstr groupsub) `options'
 58.         gegen double q10     = pctile (rnorm) in `from' / `to',  by(groupstr groupsub) `options' p(10.5)
 59.         gegen double q30     = pctile (rnorm) in `from' / `to',  by(groupstr groupsub) `options' p(30)
 60.         gegen double q70     = pctile (rnorm) in `from' / `to',  by(groupstr groupsub) `options' p(70)
 61.         gegen double q90     = pctile (rnorm) in `from' / `to',  by(groupstr groupsub) `options' p(90.5)
 62. 
.         gcollapse (mean)    g_mean    = rnorm  ///
>                   (sum)     g_sum     = rnorm  ///
>                   (median)  g_median  = rnorm  ///
>                   (sd)      g_sd      = rnorm  ///
>                   (iqr)     g_iqr     = rnorm  ///
>                   (first)   g_first   = rnorm  ///
>                   (last)    g_last    = rnorm  ///
>                   (firstnm) g_firstnm = rnorm  ///
>                   (lastnm)  g_lastnm  = rnorm  ///
>                   (p10.5)   g_q10     = rnorm  ///
>                   (p30)     g_q30     = rnorm  ///
>                   (p70)     g_q70     = rnorm  ///
>                   (p90.5)   g_q90     = rnorm in `from' / `to', by(id) benchmark verbose `options' merge double
 63.     }
 64. 
.     di _n(1) "Checking gegen vs gcollapse in range"
 65.     foreach fun in mean sum median sd iqr first last firstnm lastnm q10 q30 q70 q90 {
 66.         cap noi assert (g_`fun' == `fun') | abs(g_`fun' - `fun') < `tol'
 67.         if ( _rc ) {
 68.             recast double g_`fun' `fun'
 69.             cap noi assert (g_`fun' == `fun') | abs(g_`fun' - `fun') < `tol'
 70.             if ( _rc ) {
 71.                 di as err "    compare_gegen_gcollapse_in (failed): `fun' yielded different results (tol = `tol')"
 72.                 exit _rc
 73.             }
 74.             else di as txt "    compare_gegen_gcollapse_in (passed): `fun' yielded same results (tol = `tol')"
 75.         }
 76.         else di as txt "    compare_gegen_gcollapse_in (passed): `fun' yielded same results (tol = `tol')"
 77.     }
 78. 
.     qui `noisily' {
 79.         sim, n(20000) nj(100) njsub(2) string outmiss
 80. 
.         local in1  = ceil((0.00 + 0.25 * runiform()) * `=_N')
 81.         local in2  = ceil((0.75 + 0.25 * runiform()) * `=_N')
 82.         local from = cond(`in1' < `in2', `in1', `in2')
 83.         local to   = cond(`in1' > `in2', `in1', `in2')
 84.         qui count if rsort < 0 in `from' / `to'
 85.         if ( `r(N)' == 0 ) {
 86.             local in1  = ceil(runiform() * 10)
 87.             local in2  = ceil(`=_N' - runiform() * 10)
 88.             local from = cond(`in1' < `in2', `in1', `in2')
 89.             local to   = cond(`in1' > `in2', `in1', `in2')
 90.         }
 91. 
.         gegen id = group(groupstr groupsub)   if rsort < 0 in `from' / `to', `options'
 92.         gegen double mean    = mean   (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) verbose benchmark `opti
> ons'
 93.         gegen double sum     = sum    (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options'
 94.         gegen double median  = median (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options'
 95.         gegen double sd      = sd     (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options'
 96.         gegen double iqr     = iqr    (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options'
 97.         gegen double first   = first  (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options' v b
 98.         gegen double last    = last   (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options'
 99.         gegen double firstnm = firstnm(rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options'
100.         gegen double lastnm  = lastnm (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options'
101.         gegen double q10     = pctile (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options' p(10.5)
102.         gegen double q30     = pctile (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options' p(30)
103.         gegen double q70     = pctile (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options' p(70)
104.         gegen double q90     = pctile (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options' p(90.5)
105. 
.         keep if rsort < 0 in `from' / `to'
106.         gcollapse (mean)    g_mean    = rnorm  ///
>                   (sum)     g_sum     = rnorm  ///
>                   (median)  g_median  = rnorm  ///
>                   (sd)      g_sd      = rnorm  ///
>                   (iqr)     g_iqr     = rnorm  ///
>                   (first)   g_first   = rnorm  ///
>                   (last)    g_last    = rnorm  ///
>                   (firstnm) g_firstnm = rnorm  ///
>                   (lastnm)  g_lastnm  = rnorm  ///
>                   (p10.5)   g_q10     = rnorm  ///
>                   (p30)     g_q30     = rnorm  ///
>                   (p70)     g_q70     = rnorm  ///
>                   (p90.5)   g_q90     = rnorm, by(id) benchmark verbose `options' merge double
107.     }
108. 
.     di _n(1) "Checking gegen vs gcollapse if in range"
109.     foreach fun in mean sum median sd iqr first last firstnm lastnm q10 q30 q70 q90 {
110.         cap noi assert (g_`fun' == `fun') | abs(g_`fun' - `fun') < `tol'
111.         if ( _rc ) {
112.             recast double g_`fun' `fun'
113.             cap noi assert (g_`fun' == `fun') | abs(g_`fun' - `fun') < `tol'
114.             if ( _rc ) {
115.                 di as err "    compare_gegen_gcollapse_ifin (failed): `fun' yielded different results (tol = `tol')"
116.                 exit _rc
117.             }
118.             else di as txt "    compare_gegen_gcollapse_ifin (passed): `fun' yielded same results (tol = `tol')"
119.         }
120.         else di as txt "    compare_gegen_gcollapse_ifin (passed): `fun' yielded same results (tol = `tol')"
121.     }
122. end

. 
. ***********************************************************************
. *                             Benchmarks                              *
. ***********************************************************************
. 
. capture program drop bench_egen

. program bench_egen
  1.     syntax, [tol(real 1e-6) bench(int 1) NOIsily *]
  2. 
.     cap gen_data, n(10000) expand(`=100 * `bench'')
  3.     qui gen rsort = rnormal()
  4.     qui sort rsort
  5. 
.     local N = trim("`: di %15.0gc _N'")
  6. 
.     di _n(1)
  7.     di "Benchmark vs egen, obs = `N', J = 10,000 (in seconds)"
  8.     di "     egen | fegen | gegen | ratio (i/g) | ratio (f/g) | varlist"
  9.     di "     ---- | ----- | ----- | ----------- | ----------- | -------"
 10. 
.     versus_egen str_12,              `options' fegen
 11.     versus_egen str_12 str_32,       `options' fegen
 12.     versus_egen str_12 str_32 str_4, `options' fegen
 13. 
.     versus_egen double1,                 `options' fegen
 14.     versus_egen double1 double2,         `options' fegen
 15.     versus_egen double1 double2 double3, `options' fegen
 16. 
.     versus_egen int1,           `options' fegen
 17.     versus_egen int1 int2,      `options' fegen
 18.     versus_egen int1 int2 int3, `options' fegen
 19. 
.     versus_egen int1 str_32 double1,                                        `options'
 20.     versus_egen int1 str_32 double1 int2 str_12 double2,                    `options'
 21.     versus_egen int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options'
 22. 
.     di _n(1) "{hline 80}" _n(1) "bench_egen, `options'" _n(1) "{hline 80}" _n(1)
 23. end

. 
. capture program drop gen_data

. program gen_data
  1.     syntax, [n(int 100) expand(int 1)]
  2.     clear
  3.     set obs `n'
  4.     qui ralpha str_long,  l(5)
  5.     qui ralpha str_mid,   l(3)
  6.     qui ralpha str_short, l(1)
  7.     gen str32 str_32   = str_long + "this is some string padding"
  8.     gen str12 str_12   = str_mid  + "padding" + str_short + str_short
  9.     gen str4  str_4    = str_mid  + str_short
 10. 
.     gen long int1  = floor(rnormal())
 11.     gen long int2  = floor(uniform() * 1000)
 12.     gen long int3  = floor(rnormal() * 5 + 10)
 13. 
.     gen double double1 = rnormal()
 14.     gen double double2 = uniform() * 1000
 15.     gen double double3 = rnormal() * 5 + 10
 16. 
.     qui expand `expand'
 17. end

. 
. capture program drop versus_egen

. program versus_egen, rclass
  1.     syntax varlist, [fegen unique *]
  2. 
.     preserve
  3.         timer clear
  4.         timer on 42
  5.         cap egen id = group(`varlist')
  6.         timer off 42
  7.         qui timer list
  8.         local time_egen = r(t42)
  9.     restore
 10. 
.     preserve
 11.         timer clear
 12.         timer on 43
 13.         cap gegen id = group(`varlist'), `options'
 14.         timer off 43
 15.         qui timer list
 16.         local time_gegen = r(t43)
 17.     restore
 18. 
.     if ( "`fegen'" == "fegen" ) {
 19.     preserve
 20.         timer clear
 21.         timer on 44
 22.         cap fegen id = group(`varlist')
 23.         timer off 44
 24.         qui timer list
 25.         local time_fegen = r(t44)
 26.     restore
 27.     }
 28.     else {
 29.         local time_fegen = .
 30.     }
 31. 
.     local rs = `time_egen'  / `time_gegen'
 32.     local rf = `time_fegen' / `time_gegen'
 33.     di "    `:di %5.3g `time_egen'' | `:di %5.3g `time_fegen'' | `:di %5.3g `time_gegen'' | `:di %11.3g `rs'' | `:di %11.3g
>  `rf'' | `varlist'"
 34. end

. capture program drop checks_isid

. program checks_isid
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "consistency_isid, `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     qui `noisily' sim, n(5000) nj(100) njsub(4) string groupmiss outmiss
  4.     gen ix = _n
  5. 
.     foreach i in 0 3 6 9 {
  6.         if ( `i' == 0 ) local by groupsub groupstr
  7.         if ( `i' == 3 ) local by groupstr groupsubstr 
  8.         if ( `i' == 6 ) local by groupsub group
  9.         if ( `i' == 9 ) local by grouplong
 10.         cap gisid `by', `options' v b missok
 11.         assert _rc == 459
 12. 
.         cap gisid `by' in 1, `options'
 13.         assert _rc == 0
 14. 
.         cap gisid `by' if _n == 1, `options'
 15.         assert _rc == 0
 16. 
.         cap gisid `by' if _n < 10 in 5, `options'
 17.         assert _rc == 0
 18.     }
 19. 
.     clear
 20.     gen x = 1
 21.     cap gisid x
 22.     assert _rc == 0
 23. end

. 
. capture program drop compare_isid

. program compare_isid
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "consistency_isid, `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     qui `noisily' sim, n(500000) nj(10000) njsub(4) string groupmiss outmiss
  4.     gen ix = _n
  5. 
.     local i 0
  6.     foreach i in 0 3 6 9 {
  7.         if ( `i' == 0 ) local by groupsub groupstr
  8.         if ( `i' == 3 ) local by groupstr groupsubstr 
  9.         if ( `i' == 6 ) local by groupsub group
 10.         if ( `i' == 9 ) local by grouplong
 11.         cap isid `by', missok
 12.         local rc_isid = _rc
 13.         cap gisid `by', missok `options'
 14.         local rc_gisid = _rc
 15.         check_rc  `rc_isid' `rc_gisid' , by(`by')
 16.     }
 17. 
.     foreach i in 0 3 6 9 {
 18.         if ( `i' == 0 ) local by rsort rnorm groupsub groupstr
 19.         if ( `i' == 3 ) local by rsort rnorm groupstr
 20.         if ( `i' == 6 ) local by rsort rnorm groupsub group
 21.         if ( `i' == 9 ) local by rsort rnorm grouplong
 22.         cap isid `by', missok
 23.         local rc_isid = _rc
 24.         cap gisid `by', missok
 25.         local rc_gisid = _rc
 26.         check_rc  `rc_isid' `rc_gisid' , by(`by')
 27.     }
 28. 
.     foreach i in 0 3 6 9 {
 29.         if ( `i' == 0 ) local by ix groupsub groupstr
 30.         if ( `i' == 3 ) local by ix groupstr
 31.         if ( `i' == 6 ) local by ix groupsub group
 32.         if ( `i' == 9 ) local by ix grouplong
 33.         cap isid `by', missok
 34.         local rc_isid = _rc
 35.         cap gisid `by', missok `options'
 36.         local rc_gisid = _rc
 37.         check_rc  `rc_isid' `rc_gisid' , by(`by')
 38.     }
 39. 
.     qui replace ix = `=_N / 2' if _n > `=_N / 2'
 40.     cap isid ix
 41.     local rc_isid = _rc
 42.     cap gisid ix, `options'
 43.     local rc_gisid = _rc
 44.     check_rc `rc_isid' `rc_gisid' , by(ix)
 45. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.     foreach i in 0 3 6 9 {
 46.         if ( `i' == 0 ) local by ix groupsub groupstr
 47.         if ( `i' == 3 ) local by ix groupstr
 48.         if ( `i' == 6 ) local by ix groupsub group
 49.         if ( `i' == 9 ) local by ix grouplong
 50. 
.         preserve
 51.             qui keep in 100 / `=ceil(`=_N / 2')'
 52.             cap isid `by', missok
 53.             local rc_isid = _rc
 54.         restore
 55.         cap gisid `by' in 100 / `=ceil(`=_N / 2')', missok `options'
 56.         local rc_gisid = _rc
 57.         check_rc  `rc_isid' `rc_gisid' , by( `by' in 100 / `=ceil(`=_N / 2')')
 58. 
.         preserve
 59.             qui keep in `=ceil(`=_N / 2')' / `=_N'
 60.             cap isid `by', missok
 61.             local rc_isid = _rc
 62.         restore
 63.         cap gisid `by' in `=ceil(`=_N / 2')' / `=_N', missok `options'
 64.         local rc_gisid = _rc
 65.         check_rc  `rc_isid' `rc_gisid' , by(`by' in `=ceil(`=_N / 2')' / `=_N')
 66. 
.     di _n(1)
 67. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.         preserve
 68.             qui keep if _n < `=_N / 2'
 69.             cap isid `by', missok
 70.             local rc_isid = _rc
 71.         restore
 72.         cap gisid `by' if _n < `=_N / 2', missok
 73.         local rc_gisid = _rc
 74.         check_rc  `rc_isid' `rc_gisid' , by(`by' if _n < `=_N / 2')
 75. 
.         preserve
 76.             qui keep if _n > `=_N / 2'
 77.             cap isid `by', missok
 78.             local rc_isid = _rc
 79.         restore
 80.         cap gisid `by' if _n > `=_N / 2', missok `options'
 81.         local rc_gisid = _rc
 82.         check_rc  `rc_isid' `rc_gisid' , by(`by' if _n > `=_N / 2')
 83. 
.     di _n(1)
 84. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.         qui replace ix = 100 in 1 / 100
 85. 
.         preserve
 86.             qui keep if _n < `=_N / 4' in 100 / `=ceil(`=_N / 2')'
 87.             cap isid `by', missok
 88.             local rc_isid = _rc
 89.         restore
 90.         cap gisid `by' if _n < `=_N / 4' in 100 / `=ceil(`=_N / 2')', missok `options'
 91.         local rc_gisid = _rc
 92.         check_rc  `rc_isid' `rc_gisid' , by( `by' if _n < `=_N / 4' in 100 / `=ceil(`=_N / 2')')
 93. 
.         preserve
 94.             qui keep if _n > `=_N / 4' in `=ceil(`=_N / 1.5')' / `=_N'
 95.             cap isid `by', missok
 96.             local rc_isid = _rc
 97.         restore
 98.         cap gisid `by' if _n > `=_N / 4' in `=ceil(`=_N / 1.5')' / `=_N', missok
 99.         local rc_gisid = _rc
100.         check_rc  `rc_isid' `rc_gisid' , by( `by' if _n > `=_N / 4' in `=ceil(`=_N / 1.5')' / `=_N')
101. 
.         qui replace ix = _n in 1 / 100
102.     }
103. end

. 
. capture program drop check_rc

. program check_rc
  1.     syntax anything, by(str)
  2. 
.     tokenize `anything'
  3.     local rc_isid  `1'
  4.     local rc_gisid `2'
  5. 
.     if ( `rc_isid' != `rc_gisid' ) {
  6.         if ( `rc_isid' & (`rc_gisid' == 0) ) {
  7.             di as err "    compare_isid (failed): isid `by' was an id but gisid returned error r(`rc_isid')"
  8.             exit `rc_gisid'
  9.         }
 10.         else if ( (`rc_isid' == 0) & `rc_gisid' ) {
 11.             di as err "    compare_isid (failed): gisid `by' was an id but isid returned error r(`rc_gisid')"
 12.             exit `rc_isid'
 13.         }
 14.         else {
 15.             di as err "    compare_isid (failed): `by' was not an id but isid and gisid returned different errors r(`rc_isi
> d') vs r(`rc_gisid')"
 16.             exit `rc_gisid'
 17.         }
 18.     }
 19.     else {
 20.         if ( _rc ) {
 21.             di as txt "    compare_isid (passed): `by' was not an id"
 22.         }
 23.         else {
 24.             di as txt "    compare_isid (passed): `by' was an id"
 25.         }
 26.     }
 27. end

. 
. ***********************************************************************
. *                             Benchmarks                              *
. ***********************************************************************
. 
. capture program drop bench_isid

. program bench_isid
  1.     syntax, [tol(real 1e-6) bench(int 1) NOIsily *]
  2. 
.     cap gen_data, n(10000) expand(`=100 * `bench'')
  3.     qui gen rsort = rnormal()
  4.     qui sort rsort
  5. 
.     local N = trim("`: di %15.0gc _N'")
  6. 
.     di _n(1)
  7.     di "Benchmark vs isid, obs = `N', all calls include an index to ensure uniqueness (in seconds)"
  8.     di "     isid | fisid | gisid | ratio (i/g) | ratio (f/g) | varlist"
  9.     di "     ---- | ----- | ----- | ----------- | ----------- | -------"
 10. 
.     versus_isid str_12,              `options' fisid unique
 11.     versus_isid str_12 str_32,       `options' fisid unique
 12.     versus_isid str_12 str_32 str_4, `options' fisid unique
 13. 
.     versus_isid double1,                 `options' fisid unique
 14.     versus_isid double1 double2,         `options' fisid unique
 15.     versus_isid double1 double2 double3, `options' fisid unique
 16. 
.     versus_isid int1,           `options' fisid unique
 17.     versus_isid int1 int2,      `options' fisid unique
 18.     versus_isid int1 int2 int3, `options' fisid unique
 19. 
.     versus_isid int1 str_32 double1,                                        unique `options'
 20.     versus_isid int1 str_32 double1 int2 str_12 double2,                    unique `options'
 21.     versus_isid int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, unique `options'
 22. 
.     di _n(1)
 23.     di "Benchmark vs isid, obs = `N', J = 10,000 (in seconds)"
 24.     di "     isid | fisid | gisid | ratio (i/g) | ratio (f/g) | varlist"
 25.     di "     ---- | ----- | ----- | ----------- | ----------- | -------"
 26. 
.     versus_isid str_12,              `options' fisid
 27.     versus_isid str_12 str_32,       `options' fisid
 28.     versus_isid str_12 str_32 str_4, `options' fisid
 29. 
.     versus_isid double1,                 `options' fisid
 30.     versus_isid double1 double2,         `options' fisid
 31.     versus_isid double1 double2 double3, `options' fisid
 32. 
.     versus_isid int1,           `options' fisid
 33.     versus_isid int1 int2,      `options' fisid
 34.     versus_isid int1 int2 int3, `options' fisid
 35. 
.     versus_isid int1 str_32 double1,                                        `options'
 36.     versus_isid int1 str_32 double1 int2 str_12 double2,                    `options'
 37.     versus_isid int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options'
 38. 
.     di _n(1) "{hline 80}" _n(1) "bench_isid, `options'" _n(1) "{hline 80}" _n(1)
 39. end

. 
. capture program drop gen_data

. program gen_data
  1.     syntax, [n(int 100) expand(int 1)]
  2.     clear
  3.     set obs `n'
  4.     qui ralpha str_long,  l(5)
  5.     qui ralpha str_mid,   l(3)
  6.     qui ralpha str_short, l(1)
  7.     gen str32 str_32   = str_long + "this is some string padding"
  8.     gen str12 str_12   = str_mid  + "padding" + str_short + str_short
  9.     gen str4  str_4    = str_mid  + str_short
 10. 
.     gen long int1  = floor(rnormal())
 11.     gen long int2  = floor(uniform() * 1000)
 12.     gen long int3  = floor(rnormal() * 5 + 10)
 13. 
.     gen double double1 = rnormal()
 14.     gen double double2 = uniform() * 1000
 15.     gen double double3 = rnormal() * 5 + 10
 16. 
.     qui expand `expand'
 17. end

. 
. capture program drop versus_isid

. program versus_isid, rclass
  1.     syntax varlist, [fisid unique *]
  2.     if ( "`unique'" == "unique" ) {
  3.         tempvar ix
  4.         gen `ix' = `=_N' - _n
  5.         if ( strpos("`varlist'", "str") ) qui tostring `ix', replace
  6.     }
  7. 
.     preserve
  8.         timer clear
  9.         timer on 42
 10.         cap isid `varlist' `ix'
 11.         assert inlist(_rc, 0, 459)
 12.         timer off 42
 13.         qui timer list
 14.         local time_isid = r(t42)
 15.     restore
 16. 
.     preserve
 17.         timer clear
 18.         timer on 43
 19.         cap gisid `varlist' `ix', `options'
 20.         assert inlist(_rc, 0, 459)
 21.         timer off 43
 22.         qui timer list
 23.         local time_gisid = r(t43) 
 24.     restore
 25. 
.     if ( "`fisid'" == "fisid" ) {
 26.     preserve
 27.         timer clear
 28.         timer on 44
 29.         cap fisid `varlist' `ix'
 30.         assert inlist(_rc, 0, 459)
 31.         timer off 44
 32.         qui timer list
 33.         local time_fisid = r(t44)
 34.     restore
 35.     }
 36.     else {
 37.         local time_fisid = .
 38.     }
 39. 
.     local rs = `time_isid'  / `time_gisid'
 40.     local rf = `time_fisid' / `time_gisid'
 41.     di "    `:di %5.3g `time_isid'' | `:di %5.3g `time_fisid'' | `:di %5.3g `time_gisid'' | `:di %11.3g `rs'' | `:di %11.3g
>  `rf'' | `varlist'"
 42. end

. capture program drop checks_hashsort

. program checks_hashsort
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "checks_hashsort, `options'" _n(1) "{hline 80}" _n(1)
  3.     sysuse auto, clear
  4.     gen idx = _n
  5.     hashsort -foreign rep78 make -mpg, `options'
  6.     hashsort idx, `options'
  7.     hashsort -foreign rep78, `options'
  8.     hashsort idx, `options'
  9.     hashsort foreign rep78 mpg, `options'
 10.     hashsort idx, v b `options'
 11. end

. 
. capture program drop compare_hashsort

. program compare_hashsort
  1.     syntax, [tol(real 1e-6) NOIsily bench(int 1) *]
  2. 
.     cap gen_data, n(10000)
  3.     qui expand 10 * `bench'
  4.     qui gen rsort = rnormal()
  5.     qui sort rsort
  6. 
.     local N = trim("`: di %15.0gc _N'")
  7. 
.     di _n(1)
  8.     di "Benchmark vs gsort, obs = `N', J = 10,000 (in seconds; datasets are compared via {opt cf})"
  9.     di "    gsort | hashsort | ratio (g/h) | varlist"
 10.     di "    ----- | -------- | ----------- | -------"
 11. 
.     compare_gsort -str_12,              `options'
 12.     compare_gsort str_12 -str_32,       `options'
 13.     compare_gsort str_12 -str_32 str_4, `options'
 14. 
.     compare_gsort -double1,                 `options'
 15.     compare_gsort double1 -double2,         `options'
 16.     compare_gsort double1 -double2 double3, `options'
 17. 
.     compare_gsort -int1,           `options'
 18.     compare_gsort int1 -int2,      `options'
 19.     compare_gsort int1 -int2 int3, `options'
 20. 
.     compare_gsort -int1 -str_32 -double1,                                         `options'
 21.     compare_gsort int1 -str_32 double1 -int2 str_12 -double2,                     `options'
 22.     compare_gsort int1 -str_32 double1 -int2 str_12 -double2 int3 -str_4 double3, `options'
 23. 
.     qui expand 10
 24.     local N = trim("`: di %15.0gc _N'")
 25. 
.     di _n(1)
 26.     di "Benchmark vs sort, obs = `N', J = 10,000 (in seconds; datasets are compared via {opt cf})"
 27.     di "     sort | fsort | hashsort | ratio (g/h) | ratio (f/h) | varlist"
 28.     di "     ---- | ----- | -------- | ----------- | ----------- | -------"
 29. 
.     compare_sort str_12,              `options' fsort
 30.     compare_sort str_12 str_32,       `options' fsort
 31.     compare_sort str_12 str_32 str_4, `options' fsort
 32. 
.     compare_sort double1,                 `options' fsort
 33.     compare_sort double1 double2,         `options' fsort
 34.     compare_sort double1 double2 double3, `options' fsort
 35. 
.     compare_sort int1,           `options' fsort
 36.     compare_sort int1 int2,      `options' fsort
 37.     compare_sort int1 int2 int3, `options' fsort
 38. 
.     compare_sort int1 str_32 double1,                                        `options'
 39.     compare_sort int1 str_32 double1 int2 str_12 double2,                    `options'
 40.     compare_sort int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options'
 41. 
.     * cap gen_data, n(100)
.     * qui expand 10000
.     * compare_sort int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options'
.     * compare_gsort int1 -str_32 double1 -int2 str_12 -double2 int3 -str_4 double3, `options'
. 
.     di _n(1) "{hline 80}" _n(1) "compare_hashsort, `options'" _n(1) "{hline 80}" _n(1)
 42. end

. 
. capture program drop gen_data

. program gen_data
  1.     syntax, [n(int 100)]
  2.     clear
  3.     set obs `n'
  4.     qui ralpha str_long,  l(5)
  5.     qui ralpha str_mid,   l(3)
  6.     qui ralpha str_short, l(1)
  7.     gen str32 str_32   = str_long + "this is some string padding"
  8.     gen str12 str_12   = str_mid  + "padding" + str_short + str_short
  9.     gen str4  str_4    = str_mid  + str_short
 10. 
.     gen long int1  = floor(rnormal())
 11.     gen long int2  = floor(uniform() * 1000)
 12.     gen long int3  = floor(rnormal() * 5 + 10)
 13. 
.     gen double double1 = rnormal()
 14.     gen double double2 = uniform() * 1000
 15.     gen double double3 = rnormal() * 5 + 10
 16. end

. 
. capture program drop compare_sort

. program compare_sort, rclass
  1.     syntax varlist, [fsort *]
  2. 
.     timer clear
  3.     preserve
  4.         timer on 42
  5.         sort `varlist' , stable
  6.         timer off 42
  7.         tempfile file_sort
  8.         qui save `file_sort'
  9.     restore
 10.     qui timer list
 11.     local time_sort = r(t42)
 12. 
.     timer clear
 13.     preserve
 14.         timer on 43
 15.         qui hashsort `varlist', `options'
 16.         timer off 43
 17.         cf * using `file_sort'
 18.     restore
 19.     qui timer list
 20.     local time_hashsort = r(t43) 
 21. 
.     if ( "`fsort'" == "fsort" ) {
 22.         timer clear
 23.         preserve
 24.             timer on 44
 25.             qui fsort `varlist'
 26.             timer off 44
 27.             cf * using `file_sort'
 28.         restore
 29.         qui timer list
 30.         local time_fsort = r(t44)
 31.     }
 32.     else {
 33.         local time_fsort = .
 34.     }
 35. 
.     local rs = `time_sort'  / `time_hashsort'
 36.     local rf = `time_fsort' / `time_hashsort'
 37.     di "    `:di %5.3g `time_sort'' | `:di %5.3g `time_fsort'' | `:di %8.3g `time_hashsort'' | `:di %11.3g `rs'' | `:di %11
> .3g `rf'' | `varlist'"
 38. end

. 
. capture program drop compare_gsort

. program compare_gsort, rclass
  1.     syntax anything, [*]
  2.     tempvar ix
  3.     gen long `ix' = _n
  4. 
.     timer clear
  5.     preserve
  6.         timer on 42
  7.         gsort `anything'
  8.         timer off 42
  9.         tempfile file_sort
 10.         qui save `file_sort'
 11.     restore
 12.     qui timer list
 13.     local time_sort = r(t42)
 14. 
.     timer clear
 15.     preserve
 16.         timer on 43
 17.         qui hashsort `anything', `options'
 18.         timer off 43
 19.         cf `:di subinstr("`anything'", "-", "", .)' using `file_sort'
 20.     restore
 21.     qui timer list
 22.     local time_hashsort = r(t43) 
 23. 
.     local rs = `time_sort'  / `time_hashsort'
 24.     di "    `:di %5.3g `time_sort'' | `:di %8.3g `time_hashsort'' | `:di %11.3g `rs'' | `anything'"
 25. end

. capture program drop checks_levelsof

. program checks_levelsof
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "checks_levelsof, `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     qui `noisily' sim, n(5000) nj(100) njsub(4) string groupmiss outmiss
  4.     gen ix = _n
  5. 
.     foreach i in 0 3 6 9 {
  6.         if ( `i' == 0 ) local by groupsub groupstr
  7.         if ( `i' == 3 ) local by groupstr groupsubstr 
  8.         if ( `i' == 6 ) local by groupsub group
  9.         if ( `i' == 9 ) local by grouplong
 10.         cap noi glevelsof `by', `options' v b clean silent
 11.         assert _rc == 0
 12. 
.         cap glevelsof `by' in 1, `options' silent
 13.         assert _rc == 0
 14. 
.         cap glevelsof `by' in 1, `options' miss
 15.         assert _rc == 0
 16. 
.         cap glevelsof `by' if _n == 1, `options' local(hi)
 17.         assert _rc == 0
 18.         assert `"`r(levels)'"' == `"`hi'"'
 19. 
.         cap glevelsof `by' if _n < 10 in 5, `options' s(" | ") cols(", ")
 20.         assert _rc == 0
 21.     }
 22. 
.     clear
 23.     gen x = 1
 24.     cap glevelsof x
 25.     assert _rc == 2000
 26. 
.     clear
 27.     set obs 100000
 28.     gen x = _n
 29.     cap glevelsof x in 1 / 10000 if mod(x, 3) == 0
 30.     assert _rc == 0
 31. end

. 
. capture program drop compare_levelsof

. program compare_levelsof
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "compare_levelsof, `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     qui `noisily' sim, n(500000) nj(10) njsub(4) string groupmiss outmiss
  4.     gen ix = _n
  5. 
.     foreach i in 0 3 6 9 {
  6.         if ( `i' == 0 ) local by groupsub
  7.         if ( `i' == 3 ) local by groupstr  
  8.         if ( `i' == 6 ) local by groupsubstr
  9.         if ( `i' == 9 ) local by grouplong
 10.         cap  levelsof `by', s(" | ") local(l_stata)
 11.         cap glevelsof `by', s(" | ") local(l_gtools) `options'
 12.         if ( `"`l_stata'"' != `"`l_gtools'"' ) {
 13.             di as err "    compare_levelsof (failed): glevelsof `by' returned different levels to levelsof"
 14.             exit 198
 15.         }
 16.         else {
 17.             di as txt "    compare_levelsof (passed): glevelsof `by' returned the same levels as levelsof"
 18.         }
 19.     }
 20. 
.     foreach i in 0 3 6 9 {
 21.         if ( `i' == 0 ) local by groupsub
 22.         if ( `i' == 3 ) local by groupstr  
 23.         if ( `i' == 6 ) local by groupsubstr
 24.         if ( `i' == 9 ) local by grouplong
 25.         cap  levelsof `by', local(l_stata)  miss
 26.         cap glevelsof `by', local(l_gtools) miss `options'
 27.         if ( `"`l_stata'"' != `"`l_gtools'"' ) {
 28.             di as err "    compare_levelsof (failed): glevelsof `by' returned different levels to levelsof"
 29.             exit 198
 30.         }
 31.         else {
 32.             di as txt "    compare_levelsof (passed): glevelsof `by' returned the same levels as levelsof"
 33.         }
 34.     }
 35. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.     di _n(1)
 36. 
.     foreach i in 0 3 6 9 {
 37.         if ( `i' == 0 ) local by groupsub
 38.         if ( `i' == 3 ) local by groupstr  
 39.         if ( `i' == 6 ) local by groupsubstr
 40.         if ( `i' == 9 ) local by grouplong
 41. 
.         cap  levelsof `by' in 100 / `=ceil(`=_N / 2')', local(l_stata)  miss
 42.         cap glevelsof `by' in 100 / `=ceil(`=_N / 2')', local(l_gtools) miss `options'
 43.         if ( `"`l_stata'"' != `"`l_gtools'"' ) {
 44.             di as err "    compare_levelsof (failed): glevelsof `by' [in] returned different levels to levelsof"
 45.             exit 198
 46.         }
 47.         else {
 48.             di as txt "    compare_levelsof (passed): glevelsof `by' [in] returned the same levels as levelsof"
 49.         }
 50. 
.         cap glevelsof `by' in `=ceil(`=_N / 2')' / `=_N', local(l_stata)
 51.         cap glevelsof `by' in `=ceil(`=_N / 2')' / `=_N', local(l_gtools) `options'
 52.         if ( `"`l_stata'"' != `"`l_gtools'"' ) {
 53.             di as err "    compare_levelsof (failed): glevelsof `by' [in] returned different levels to levelsof"
 54.             exit 198
 55.         }
 56.         else {
 57.             di as txt "    compare_levelsof (passed): glevelsof `by' [in] returned the same levels as levelsof"
 58.         }
 59. 
.     di _n(1)
 60. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.         cap  levelsof `by' if _n > `=_N / 2', local(l_stata)  miss
 61.         cap glevelsof `by' if _n > `=_N / 2', local(l_gtools) miss `options'
 62.         if ( `"`l_stata'"' != `"`l_gtools'"' ) {
 63.             di as err "    compare_levelsof (failed): glevelsof `by' [if] returned different levels to levelsof"
 64.             exit 198
 65.         }
 66.         else {
 67.             di as txt "    compare_levelsof (passed): glevelsof `by' [if] returned the same levels as levelsof"
 68.         }
 69. 
.         cap glevelsof `by' if _n < `=_N / 2', local(l_stata)
 70.         cap glevelsof `by' if _n < `=_N / 2', local(l_gtools) `options'
 71.         if ( `"`l_stata'"' != `"`l_gtools'"' ) {
 72.             di as err "    compare_levelsof (failed): glevelsof `by' [if] returned different levels to levelsof"
 73.             exit 198
 74.         }
 75.         else {
 76.             di as txt "    compare_levelsof (passed): glevelsof `by' [if] returned the same levels as levelsof"
 77.         }
 78. 
.     di _n(1)
 79. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.         cap  levelsof `by' if _n < `=_N / 4' in 100 / `=ceil(`=_N / 2')', local(l_stata)  miss
 80.         cap glevelsof `by' if _n < `=_N / 4' in 100 / `=ceil(`=_N / 2')', local(l_gtools) miss `options'
 81.         if ( `"`l_stata'"' != `"`l_gtools'"' ) {
 82.             di as err "    compare_levelsof (failed): glevelsof `by' [if] [in] returned different levels to levelsof"
 83.             exit 198
 84.         }
 85.         else {
 86.             di as txt "    compare_levelsof (passed): glevelsof `by' [if] [in] returned the same levels as levelsof"
 87.         }
 88. 
.         cap glevelsof `by' if _n > `=_N / 4' in `=ceil(`=_N / 1.5')' / `=_N', local(l_stata)
 89.         cap glevelsof `by' if _n > `=_N / 4' in `=ceil(`=_N / 1.5')' / `=_N', local(l_gtools) `options'
 90.         if ( `"`l_stata'"' != `"`l_gtools'"' ) {
 91.             di as err "    compare_levelsof (failed): glevelsof `by' [if] [in] returned different levels to levelsof"
 92.             exit 198
 93.         }
 94.         else {
 95.             di as txt "    compare_levelsof (passed): glevelsof `by' [if] [in] returned the same levels as levelsof"
 96.         }
 97.     }
 98. end

. 
. ***********************************************************************
. *                             Benchmarks                              *
. ***********************************************************************
. 
. capture program drop bench_levelsof

. program bench_levelsof
  1.     syntax, [tol(real 1e-6) bench(int 1) NOIsily *]
  2. 
.     cap gen_data, n(100) expand(`=10000 * `bench'')
  3.     qui gen rsort = rnormal()
  4.     qui sort rsort
  5. 
.     local N = trim("`: di %15.0gc _N'")
  6. 
.     di _n(1)
  7.     di "Benchmark vs levelsof, obs = `N', J = 100 (in seconds)"
  8.     di "    levelsof | flevelsof | glevelsof | ratio (i/g) | ratio (f/g) | varlist"
  9.     di "    -------- | --------- | --------- | ----------- | ----------- | -------"
 10. 
.     versus_levelsof str_12, `options' flevelsof
 11.     versus_levelsof str_32, `options' flevelsof
 12.     versus_levelsof str_4,  `options' flevelsof
 13. 
.     versus_levelsof double1, `options' flevelsof
 14.     versus_levelsof double2, `options' flevelsof
 15.     versus_levelsof double3, `options' flevelsof
 16. 
.     versus_levelsof int1, `options' flevelsof
 17.     versus_levelsof int2, `options' flevelsof
 18.     versus_levelsof int3, `options' flevelsof
 19. 
.     di _n(1) "{hline 80}" _n(1) "bench_levelsof, `options'" _n(1) "{hline 80}" _n(1)
 20. end

. 
. capture program drop gen_data

. program gen_data
  1.     syntax, [n(int 100) expand(int 1)]
  2.     clear
  3.     set obs `n'
  4.     qui ralpha str_long,  l(5)
  5.     qui ralpha str_mid,   l(3)
  6.     qui ralpha str_short, l(1)
  7.     gen str32 str_32   = str_long + "this is some string padding"
  8.     gen str12 str_12   = str_mid  + "padding" + str_short + str_short
  9.     gen str4  str_4    = str_mid  + str_short
 10. 
.     gen long int1  = floor(rnormal())
 11.     gen long int2  = floor(uniform() * 1000)
 12.     gen long int3  = floor(rnormal() * 5 + 10)
 13. 
.     gen double double1 = rnormal()
 14.     gen double double2 = uniform() * 1000
 15.     gen double double3 = rnormal() * 5 + 10
 16. 
.     qui expand `expand'
 17. end

. 
. capture program drop versus_levelsof

. program versus_levelsof, rclass
  1.     syntax varlist, [flevelsof unique *]
  2.     if ( "`unique'" == "unique" ) {
  3.         tempvar ix
  4.         gen `ix' = `=_N' - _n
  5.         if ( strpos("`varlist'", "str") ) qui tostring `ix', replace
  6.     }
  7. 
.     preserve
  8.         timer clear
  9.         timer on 42
 10.         qui levelsof `varlist' `ix'
 11.         timer off 42
 12.         qui timer list
 13.         local time_levelsof = r(t42)
 14.     restore
 15. 
.     preserve
 16.         timer clear
 17.         timer on 43
 18.         qui glevelsof `varlist' `ix', `options'
 19.         timer off 43
 20.         qui timer list
 21.         local time_glevelsof = r(t43) 
 22.     restore
 23. 
.     if ( "`flevelsof'" == "flevelsof" ) {
 24.     preserve
 25.         timer clear
 26.         timer on 44
 27.         qui flevelsof `varlist' `ix'
 28.         timer off 44
 29.         qui timer list
 30.         local time_flevelsof = r(t44)
 31.     restore
 32.     }
 33.     else {
 34.         local time_flevelsof = .
 35.     }
 36. 
.     local rs = `time_levelsof'  / `time_glevelsof'
 37.     local rf = `time_flevelsof' / `time_glevelsof'
 38.     di "    `:di %8.3g `time_levelsof'' | `:di %9.3g `time_flevelsof'' | `:di %9.3g `time_glevelsof'' | `:di %11.3g `rs'' |
>  `:di %11.3g `rf'' | `varlist'"
 39. end

. ***********************************************************************
. *                           Data simulation                           *
. ***********************************************************************
. 
. capture program drop bench_sim

. program bench_sim
  1.     syntax, [n(int 100) nj(int 10) njsub(int 2) nvars(int 2)]
  2.     local offset = -123456
  3. 
.     clear
  4.     set obs `n'
  5.     gen group  = ceil(`nj' *  _n / _N) + `offset'
  6.     gen long grouplong = ceil(`nj' *  _n / _N) + `offset'
  7.     bys group: gen groupsub      = ceil(`njsub' *  _n / _N)
  8.     bys group: gen groupsubfloat = ceil(`njsub' *  _n / _N) + 0.5
  9.     tostring group, gen(groupstr)
 10.     replace groupstr = "i am a modestly long string" + groupstr
 11. 
.     forvalues i = 1 / `nvars' {
 12.         gen x`i' = rnormal()
 13.     }
 14.     gen rsort = runiform() - 0.5
 15.     sort rsort
 16. 
.     replace group = . if runiform() < 0.1
 17.     replace rsort = . if runiform() < 0.1
 18. end

. 
. capture program drop bench_sim_ftools

. program bench_sim_ftools
  1.     args n k
  2.     clear
  3.     qui set obs `n'
  4.     noi di "(obs set)"
  5.     loc m = ceil(`n' / 10)
  6.     gen long x1  = ceil(uniform() * 10000) * 100
  7.     gen int  x2  = ceil(uniform() * 3000)
  8.     gen byte x3  = ceil(uniform() * 100)
  9.     gen str  x4  = "u" + string(ceil(uniform() * 100), "%5.0f")
 10.     gen long x5  = ceil(uniform() * 5000)
 11.     gen str  x6  = "u" + string(ceil(uniform() * 10), "%5.0f")
 12.     noi di "(Xs set)"
 13.     forv i = 1 / `k' {
 14.         gen double y`i' = 123.456 + runiform()
 15.     }
 16.     loc obs_k = ceil(`c(N)' / 1000)
 17. end

. 
. ***********************************************************************
. *                       ftools-style benchmarks                       *
. ***********************************************************************
. 
. capture program drop bench_ftools

. program bench_ftools
  1.     syntax anything, by(str) [kvars(int 5) stats(str) kmin(int 4) kmax(int 7) *]
  2.     if ("`stats'" == "") local stats sum
  3. 
.     local collapse ""
  4.     foreach stat of local stats {
  5.         local collapse `collapse' (`stat')
  6.         foreach var of local anything {
  7.             local collapse `collapse' `stat'_`var' = `var'
  8.         }
  9.     }
 10. 
.     * First set of benchmarks: default vs collapse, fcollapse
.     * -------------------------------------------------------
. 
.     local i = 0
 11.     local N ""
 12.     di "Benchmarking N for J = 100; by(`by')"
 13.     di "    vars  = `anything'"
 14.     di "    stats = `stats'"
 15.     forvalues k = `kmin' / `kmax' {
 16.         mata: printf("    `:di %21.0gc `:di 2 * 10^`k'''")
 17.         local N `N' `:di %21.0g 2 * 10^`k''
 18.         qui bench_sim_ftools `:di %21.0g 2 * 10^`k'' `kvars'
 19.         preserve
 20.             local ++i
 21.             timer clear
 22.             timer on `i'
 23.             mata: printf(" gcollapse ")
 24.                 gcollapse `collapse', by(`by') fast
 25.             timer off `i'
 26.             qui timer list
 27.             local r`i' = `r(t`i')'
 28.             mata: printf(" (`r`i'') ")
 29.         restore, preserve
 30.             local ++i
 31.             timer clear
 32.             timer on `i'
 33.             mata: printf(" collapse ")
 34.                 qui collapse `collapse', by(`by') fast
 35.             timer off `i'
 36.             qui timer list
 37.             local r`i' = `r(t`i')'
 38.             mata: printf(" (`r`i'') ")
 39.         restore, preserve
 40.             local ++i
 41.             timer clear
 42.             timer on `i'
 43.             mata: printf(" fcollapse ")
 44.                 qui fcollapse `collapse', by(`by') fast
 45.             timer off `i'
 46.             qui timer list
 47.             local r`i' = `r(t`i')'
 48.             mata: printf(" (`r`i'')\n")
 49.         restore
 50.     }
 51. 
.     local i = 1
 52.     di "Results varying N for J = 100; by(`by')"
 53.     di "|              N | gcollapse |  collapse | fcollapse | ratio (f/g) | ratio (c/g) |"
 54.     di "| -------------- | --------- | --------- | --------- | ----------- | ----------- |"
 55.     foreach nn in `N' {
 56.         local ii  = `i' + 1
 57.         local iii = `i' + 2
 58.         di "| `:di %14.0gc `nn'' | `:di %9.2f `r`i''' | `:di %9.2f `r`ii''' | `:di %9.2f `r`iii''' | `:di %11.2f `r`iii'' /
>  `r`i''' | `:di %11.2f `r`ii'' / `r`i''' |"
 59.         local ++i
 60.         local ++i
 61.         local ++i
 62.     }
 63.     timer clear
 64. end

. 
. ***********************************************************************
. *                             benchmarks                              *
. ***********************************************************************
. 
. capture program drop bench_sample_size

. program bench_sample_size
  1.     syntax anything, by(str) [nj(int 10) pct(str) stats(str) kmin(int 4) kmax(int 7) *]
  2.     * NOTE: sometimes, fcollapse can't do sd
.     if ("`stats'" == "") local stats sum mean max min count percent first last firstnm lastnm
  3.     local stats `stats' `pct'
  4. 
.     local collapse ""
  5.     foreach stat of local stats {
  6.         local collapse `collapse' (`stat')
  7.         foreach var of local anything {
  8.             local collapse `collapse' `stat'_`var' = `var'
  9.         }
 10.     }
 11. 
.     * First set of benchmarks: default vs collapse, fcollapse
.     * -------------------------------------------------------
. 
.     local i = 0
 12.     local N ""
 13.     di "Benchmarking N for J = `nj'; by(`by')"
 14.     di "    vars  = `anything'"
 15.     di "    stats = `stats'"
 16.     forvalues k = `kmin' / `kmax' {
 17.         mata: printf("    `:di %21.0gc `:di 2 * 10^`k'''")
 18.         local N `N' `:di %21.0g 2 * 10^`k''
 19.         qui bench_sim, n(`:di %21.0g 2 * 10^`k'') nj(`nj') njsub(2) nvars(2)
 20.         preserve
 21.             local ++i
 22.             timer clear
 23.             timer on `i'
 24.             mata: printf(" gcollapse ")
 25.                 qui gcollapse `collapse', by(`by') fast
 26.             timer off `i'
 27.             qui timer list
 28.             local r`i' = `r(t`i')'
 29.             mata: printf(" (`r`i'') ")
 30.         restore, preserve
 31.             local ++i
 32.             timer clear
 33.             timer on `i'
 34.             mata: printf(" collapse ")
 35.                 qui collapse `collapse', by(`by') fast
 36.             timer off `i'
 37.             qui timer list
 38.             local r`i' = `r(t`i')'
 39.             mata: printf(" (`r`i'') ")
 40.         restore, preserve
 41.             local ++i
 42.             timer clear
 43.             timer on `i'
 44.             mata: printf(" fcollapse ")
 45.                 qui fcollapse `collapse', by(`by') fast
 46.             timer off `i'
 47.             qui timer list
 48.             local r`i' = `r(t`i')'
 49.             mata: printf(" (`r`i'')\n")
 50.         restore
 51.     }
 52. 
.     local i = 1
 53.     di "Results varying N for J = `nj'; by(`by')"
 54.     di "|              N | gcollapse |  collapse | fcollapse | ratio (f/g) | ratio (c/g) |"
 55.     di "| -------------- | --------- | --------- | --------- | ----------- | ----------- |"
 56.     foreach nn in `N' {
 57.         local ii  = `i' + 1
 58.         local iii = `i' + 2
 59.         di "| `:di %14.0gc `nn'' | `:di %9.2f `r`i''' | `:di %9.2f `r`ii''' | `:di %9.2f `r`iii''' | `:di %11.2f `r`iii'' /
>  `r`i''' | `:di %11.2f `r`ii'' / `r`i''' |"
 60.         local ++i
 61.         local ++i
 62.         local ++i
 63.     }
 64.     timer clear
 65. end

. 
. capture program drop bench_group_size

. program bench_group_size
  1.     syntax anything, by(str) [pct(str) stats(str) obsexp(int 6) kmin(int 1) kmax(int 6) *]
  2.     * NOTE: fcollapse can't do sd, apparently
.     if ("`stats'" == "") local stats sum mean max min count percent first last firstnm lastnm
  3.     local stats `stats' `pct'
  4. 
.     local collapse ""
  5.     foreach stat of local stats {
  6.         local collapse `collapse' (`stat')
  7.         foreach var of local anything {
  8.             local collapse `collapse' `stat'_`var' = `var'
  9.         }
 10.     }
 11. 
.     * First set of benchmarks: default vs collapse, fcollapse
.     * -------------------------------------------------------
. 
.     local nstr = trim("`:di %21.0gc `:di 5 * 10^`obsexp'''")
 12.     local i = 0
 13.     local N ""
 14.     di "Benchmarking J for N = `nstr'; by(`by')"
 15.     di "    vars  = `anything'"
 16.     di "    stats = `stats'"
 17.     forvalues k = `kmin' / `kmax' {
 18.         mata: printf("    `:di %21.0gc `:di 10^`k'''")
 19.         local N `N' `:di %21.0g 10^`k''
 20.         qui bench_sim, n(`:di %21.0g 5 * 10^`obsexp'') nj(`:di %21.0g 10^`k'') njsub(2) nvars(2)
 21.         preserve
 22.             local ++i
 23.             timer clear
 24.             timer on `i'
 25.             mata: printf(" gcollapse ")
 26.                 qui gcollapse `collapse', by(`by') fast
 27.             timer off `i'
 28.             qui timer list
 29.             local r`i' = `r(t`i')'
 30.             mata: printf(" (`r`i'') ")
 31.         restore, preserve
 32.             local ++i
 33.             timer clear
 34.             timer on `i'
 35.             mata: printf(" collapse ")
 36.                 qui collapse `collapse', by(`by') fast
 37.             timer off `i'
 38.             qui timer list
 39.             local r`i' = `r(t`i')'
 40.             mata: printf(" (`r`i'') ")
 41.         restore, preserve
 42.             local ++i
 43.             timer clear
 44.             timer on `i'
 45.             mata: printf(" fcollapse ")
 46.                 qui fcollapse `collapse', by(`by') fast
 47.             timer off `i'
 48.             qui timer list
 49.             local r`i' = `r(t`i')'
 50.             mata: printf(" (`r`i'')\n")
 51.         restore
 52.     }
 53. 
.     local i = 1
 54.     di "Results varying J for N = `nstr'; by(`by')"
 55.     di "|              J | gcollapse |  collapse | fcollapse | ratio (f/g) | ratio (c/g) |"
 56.     di "| -------------- | --------- | --------- | --------- | ----------- | ----------- |"
 57.     foreach nn in `N' {
 58.         local ii  = `i' + 1
 59.         local iii = `i' + 2
 60.         di "| `:di %14.0gc `nn'' | `:di %9.2f `r`i''' | `:di %9.2f `r`ii''' | `:di %9.2f `r`iii''' | `:di %11.2f `r`iii'' /
>  `r`i''' | `:di %11.2f `r`ii'' / `r`i''' |"
 61.         local ++i
 62.         local ++i
 63.         local ++i
 64.     }
 65.     timer clear
 66. end

. 
. ***********************************************************************
. *                      Benchmark fcollapse only                       *
. ***********************************************************************
. 
. capture program drop bench_switch_fcoll

. program bench_switch_fcoll
  1.     syntax anything, style(str) [GCOLLapse(str) *]
  2.     if !inlist("`style'", "ftools", "gtools") {
  3.         di as error "Don't know benchmark style '`style''; available: ftools, gtools"
  4.         exit 198
  5.     }
  6. 
.     local 0 `anything', `options'
  7.     if ( "`style'" == "ftools" ) {
  8.         syntax anything, by(str) [kvars(int 5) stats(str) kmin(int 4) kmax(int 7) *]
  9.         if ("`stats'" == "") local stats sum
 10.         local i = 0
 11.         local N ""
 12.         local L N
 13.         local dstr J = 100
 14.         di "Benchmarking `L' for `dstr'; by(`by')"
 15.         di "    vars  = `anything'"
 16.         di "    stats = `stats'"
 17. 
.         mata: print_matrix = J(1, 0, "")
 18.         mata: sim_matrix   = J(1, 0, "")
 19.         forvalues k = `kmin' / `kmax' {
 20.             mata: print_matrix = print_matrix, "    `:di %21.0gc `:di 2 * 10^`k'''"
 21.             mata: sim_matrix   = sim_matrix,   "bench_sim_ftools `:di %21.0g 2 * 10^`k'' `kvars'"
 22.             local N `N' `:di %21.0g 2 * 10^`k''
 23.         }
 24.     }
 25.     else {
 26.         * syntax anything, by(str) [margin(str) nj(int 10) pct(str) stats(str) obsexp(int 6) kmin(int 1) kmax(int 6) *]
.         syntax anything, by(str) [margin(str) nj(int 10) pct(str) stats(str) obsexp(int 6) kmin(int 4) kmax(int 7) nvars(int 2
> ) *]
 27.         if !inlist("`margin'", "N", "J") {
 28.             di as error "Don't know margin '`margin''; available: N, J"
 29.             exit 198
 30.         }
 31. 
.         if ("`stats'" == "") local stats sum mean max min count percent first last firstnm lastnm
 32.         local stats `stats' `pct'
 33.         local i = 0
 34.         local N ""
 35.         local L `margin'
 36.         local jstr = trim("`:di %21.0gc `nj''")
 37.         local nstr = trim("`:di %21.0gc `:di 5 * 10^`obsexp'''")
 38.         local dstr = cond("`L'" == "N", "J = `jstr'", "N = `nstr'")
 39.         di "Benchmarking `L' for `dstr'; by(`by')"
 40.         di "    vars  = `anything'"
 41.         di "    stats = `stats'"
 42. 
.         mata: print_matrix = J(1, 0, "")
 43.         mata: sim_matrix   = J(1, 0, "")
 44.         forvalues k = `kmin' / `kmax' {
 45.             if ( "`L'" == "N" ) {
 46.                 mata: print_matrix = print_matrix, "    `:di %21.0gc `:di 2 * 10^`k'''"
 47.                 mata: sim_matrix   = sim_matrix, "bench_sim, n(`:di %21.0g 2 * 10^`k'') nj(`nj') njsub(2) nvars(`nvars')"
 48.             }
 49.             else {
 50.                 mata: print_matrix = print_matrix, "    `:di %21.0gc `:di 10^`k'''"
 51.                 mata: sim_matrix   = sim_matrix, "bench_sim, n(`:di %21.0g 5 * 10^`obsexp'') nj(`:di %21.0g 10^`k'') njsub(
> 2) nvars(`nvars')"
 52.             }
 53.             local J `J' `:di %21.0g 10^`k''
 54.             local N `N' `:di %21.0g 2 * 10^`k''
 55.         }
 56.     }
 57. 
.     local collapse ""
 58.     foreach stat of local stats {
 59.         local collapse `collapse' (`stat')
 60.         foreach var of local anything {
 61.             local collapse `collapse' `stat'_`var' = `var'
 62.         }
 63.     }
 64. 
.     if ( "`gcollapse'" == "" ) local w f
 65.     else local w g
 66. 
.     forvalues k = 1 / `:di `kmax' - `kmin' + 1' {
 67.         mata: st_local("sim",   sim_matrix[`k'])
 68.         qui `sim'
 69.         mata: printf(print_matrix[`k'])
 70.         preserve
 71.             local ++i
 72.             timer clear
 73.             timer on `i'
 74.             mata: printf(" gcollapse-default `options'")
 75.                 qui gcollapse `collapse', by(`by') `options' fast
 76.             timer off `i'
 77.             qui timer list
 78.             local r`i' = `r(t`i')'
 79.             mata: printf(" (`r`i'') ")
 80.         restore, preserve
 81.             local ++i
 82.             timer clear
 83.             timer on `i'
 84.             mata: printf(" `w'collapse `gcollapse'")
 85.                 qui `w'collapse `collapse', by(`by') fast `gcollapse'
 86.             timer off `i'
 87.             qui timer list
 88.             local r`i' = `r(t`i')'
 89.             mata: printf(" (`r`i'') \n")
 90.         restore
 91.     }
 92. 
.     local i = 1
 93.     di "Results varying `L' for `dstr'; by(`by')"
 94.     di "|              `L' | gcollapse | `w'collapse | ratio (f/g) |"
 95.     di "| -------------- | --------- | --------- | ----------- |"
 96.     foreach nn in ``L'' {
 97.         local ii  = `i' + 1
 98.         di "| `:di %14.0gc `nn'' | `:di %9.2f `r`i''' | `:di %9.2f `r`ii''' | `:di %11.2f `r`ii'' / `r`i''' |"
 99.         local ++i
100.         local ++i
101.     }
102.     timer clear
103. end

. 
. * Benchmarks in the README
. * ------------------------
. 
. * bench_ftools y1 y2 y3 y4 y5 y6 y7 y8 y9 y10 y11 y12 y13 y14 y15, by(x3) kmin(4) kmax(7) kvars(15)
. * bench_ftools y1 y2 y3,   by(x3) kmin(4) kmax(7) kvars(3) stats(mean median)
. * bench_ftools y1 y2 y3 y4 y5 y6 y7 y8 y9 y10, by(x3) kmin(4) kmax(7) kvars(10) stats(mean median min max)
. * bench_sample_size x1 x2, by(groupstr) kmin(4) kmax(7) pct(median iqr p23 p77)
. * bench_group_size x1 x2,  by(groupstr) kmin(1) kmax(6) pct(median iqr p23 p77) obsexp(6) 
. 
. * Misc
. * ----
. 
. * bench_ftools y1 y2 y3 y4 y5 y6 y7 y8 y9 y10 y11 y12 y13 y14 y15, by(x3) kmin(5) kmax(8) kvars(15)
. * bench_ftools y1 y2 y3,   by(x3) kmin(5) kmax(8) kvars(3) stats(mean median)
. * bench_ftools y1 y2 y3 y4 y5 y6 y7 y8 y9 y10, by(x3) kmin(5) kmax(8) kvars(10) stats(mean median min max)
. * bench_sample_size x1 x2, by(groupstr) kmin(5) kmax(8) pct(median iqr p23 p77)
. * bench_group_size x1 x2,  by(groupstr) kmin(1) kmax(7) pct(median iqr p23 p77) obsexp(7)
. * ---------------------------------------------------------------------
. * Run the things
. 
. * main, benchmark bench_extra
. main, checks test
Start: 08:32:21  9 Oct 2017

-------------------------------------
Basic unit-tests 08:32:21  9 Oct 2017
-------------------------------------
    test(passed): checks_corners, oncollision(error) debug_force_single
    test(passed): checks_byvars_gcollapse, oncollision(error) debug_force_single
    test(passed): checks_byvars_gcollapse, oncollision(error) debug_force_single forceio debug_io_read_method(0)
    test(passed): checks_byvars_gcollapse, oncollision(error) debug_force_single forceio debug_io_read_method(1)
    test(passed): checks_options_gcollapse, oncollision(error) debug_force_single
    test(passed): checks_options_gcollapse, oncollision(error) debug_force_single debug_io_read_method(0)
    test(passed): checks_options_gcollapse, oncollision(error) debug_force_single debug_io_read_method(1)

-----------------------------------------------------------
Consistency checks (vs collapse, egen) 08:33:14  9 Oct 2017
-----------------------------------------------------------

--------------------------------------------------------------------------------
consistency_gcollapse, oncollision(error) debug_force_single
--------------------------------------------------------------------------------


Comparing collapse for N = 50,000 with J1 = 8 and J2 = 4
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr groupsubstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

Comparing collapse for N = 50,000 with J1 = 8,000 and J2 = 4
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

Comparing collapse for N = 50,000 with J1 = 8,000 and J2 = 4 (if in)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

--------------------------------------------------------------------------------
consistency_gcollapse, oncollision(error) debug_force_single forceio debug_io_read_method(0)
--------------------------------------------------------------------------------


Comparing collapse for N = 50,000 with J1 = 8 and J2 = 4
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr groupsubstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

Comparing collapse for N = 50,000 with J1 = 8,000 and J2 = 4
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

Comparing collapse for N = 50,000 with J1 = 8,000 and J2 = 4 (if in)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

--------------------------------------------------------------------------------
consistency_gcollapse, oncollision(error) debug_force_single forceio debug_io_read_method(1)
--------------------------------------------------------------------------------


Comparing collapse for N = 50,000 with J1 = 8 and J2 = 4
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr groupsubstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

Comparing collapse for N = 50,000 with J1 = 8,000 and J2 = 4
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

Comparing collapse for N = 50,000 with J1 = 8,000 and J2 = 4 (if in)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

--------------------------------------------------------------------------------
consistency_gcollapse, oncollision(error) debug_force_single debug_io_check(1) debug_io_threshold(0.1)
--------------------------------------------------------------------------------


Comparing collapse for N = 50,000 with J1 = 8 and J2 = 4
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr groupsubstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

Comparing collapse for N = 50,000 with J1 = 8,000 and J2 = 4
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

Comparing collapse for N = 50,000 with J1 = 8,000 and J2 = 4 (if in)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

--------------------------------------------------------------------------------
consistency_gcollapse, oncollision(error) debug_force_single debug_io_check(1) debug_io_threshold(1000000)
--------------------------------------------------------------------------------


Comparing collapse for N = 50,000 with J1 = 8 and J2 = 4
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr groupsubstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

Comparing collapse for N = 50,000 with J1 = 8,000 and J2 = 4
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

Comparing collapse for N = 50,000 with J1 = 8,000 and J2 = 4 (if in)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

--------------------------------------------------------------------------------
consistency_gegen, oncollision(error) debug_force_single
--------------------------------------------------------------------------------


Checking full egen range
    compare_egen (passed): gegen total results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen sum results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen mean results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen sd results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen max results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen min results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen count results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen median results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen iqr results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen percentile 1 results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen percentile 10 results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen percentile 30 results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen percentile 50 results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen percentile 70 results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen percentile 90 results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen percentile 99 results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen tag results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen group results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen  counts results similar to gegen count (tol = 1.00000000000e-06)
Checking egen if range
    compare_egen_if (passed): gegen total results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen sum results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen mean results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen sd results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen max results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen min results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen count results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen median results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen iqr results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen percentile 1 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen percentile 10 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen percentile 30 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen percentile 50 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen percentile 70 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen percentile 90 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen percentile 99 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen tag results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen group results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen  counts results similar to gegen count (tol = 1.00000000000e-06)
Checking egen in range
    compare_egen_in (passed): gegen total results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen sum results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen mean results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen sd results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen max results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen min results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen count results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen median results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen iqr results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen percentile 1 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen percentile 10 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen percentile 30 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen percentile 50 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen percentile 70 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen percentile 90 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen percentile 99 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen tag results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen group results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen  counts results similar to gegen count (tol = 1.00000000000e-06)
Checking egen if in range
    compare_egen_ifin (passed): gegen total results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen sum results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen mean results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen sd results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen max results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen min results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen count results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen median results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen iqr results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen percentile 1 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen percentile 10 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen percentile 30 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen percentile 50 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen percentile 70 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen percentile 90 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen percentile 99 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen tag results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen group results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen  counts results similar to gegen count (tol = 1.00000000000e-06)

--------------------------------------------------------------------------------
consistency_gegen_gcollapse, oncollision(error) debug_force_single
--------------------------------------------------------------------------------


Checking gegen vs gcollapse full range
    compare_gegen_gcollapse (passed): mean yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): sum yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): median yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): sd yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): iqr yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): first yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): last yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): firstnm yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): lastnm yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): q10 yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): q30 yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): q70 yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): q90 yielded same results (tol = 1.00000000000e-06)

Checking gegen vs gcollapse in range
    compare_gegen_gcollapse_in (passed): mean yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): sum yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): median yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): sd yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): iqr yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): first yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): last yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): firstnm yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): lastnm yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): q10 yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): q30 yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): q70 yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): q90 yielded same results (tol = 1.00000000000e-06)

Checking gegen vs gcollapse if in range
    compare_gegen_gcollapse_ifin (passed): mean yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): sum yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): median yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): sd yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): iqr yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): first yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): last yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): firstnm yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): lastnm yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): q10 yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): q30 yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): q70 yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): q90 yielded same results (tol = 1.00000000000e-06)

--------------------------------
Check extra 08:41:39  9 Oct 2017
--------------------------------
    test(passed): checks_hashsort, oncollision(error)
    test(passed): checks_isid, oncollision(error)
    test(passed): checks_levelsof, oncollision(error)

--------------------------------------------------------------------------------
consistency_isid, oncollision(error)
--------------------------------------------------------------------------------

    compare_isid (passed): groupsub groupstr was not an id
    compare_isid (passed): groupstr groupsubstr was not an id
    compare_isid (passed): groupsub group was not an id
    compare_isid (passed): grouplong was not an id
    compare_isid (passed): rsort rnorm groupsub groupstr was not an id
    compare_isid (passed): rsort rnorm groupstr was not an id
    compare_isid (passed): rsort rnorm groupsub group was not an id
    compare_isid (passed): rsort rnorm grouplong was not an id
    compare_isid (passed): ix groupsub groupstr was an id
    compare_isid (passed): ix groupstr was an id
    compare_isid (passed): ix groupsub group was an id
    compare_isid (passed): ix grouplong was an id
    compare_isid (passed): ix was not an id
    compare_isid (passed): ix groupsub groupstr in 100 / 250000 was an id
    compare_isid (passed): ix groupsub groupstr in 250000 / 500000 was not an id


    compare_isid (passed): ix groupsub groupstr if _n < 250000 was an id
    compare_isid (passed): ix groupsub groupstr if _n > 250000 was not an id


    compare_isid (passed): ix groupsub groupstr if _n < 125000 in 100 / 250000 was an id
    compare_isid (passed): ix groupsub groupstr if _n > 125000 in 333334 / 500000 was not an id
    compare_isid (passed): ix groupstr in 100 / 250000 was an id
    compare_isid (passed): ix groupstr in 250000 / 500000 was not an id


    compare_isid (passed): ix groupstr if _n < 250000 was an id
    compare_isid (passed): ix groupstr if _n > 250000 was not an id


    compare_isid (passed): ix groupstr if _n < 125000 in 100 / 250000 was an id
    compare_isid (passed): ix groupstr if _n > 125000 in 333334 / 500000 was not an id
    compare_isid (passed): ix groupsub group in 100 / 250000 was an id
    compare_isid (passed): ix groupsub group in 250000 / 500000 was not an id


    compare_isid (passed): ix groupsub group if _n < 250000 was an id
    compare_isid (passed): ix groupsub group if _n > 250000 was not an id


    compare_isid (passed): ix groupsub group if _n < 125000 in 100 / 250000 was an id
    compare_isid (passed): ix groupsub group if _n > 125000 in 333334 / 500000 was not an id
    compare_isid (passed): ix grouplong in 100 / 250000 was an id
    compare_isid (passed): ix grouplong in 250000 / 500000 was not an id


    compare_isid (passed): ix grouplong if _n < 250000 was an id
    compare_isid (passed): ix grouplong if _n > 250000 was not an id


    compare_isid (passed): ix grouplong if _n < 125000 in 100 / 250000 was an id
    compare_isid (passed): ix grouplong if _n > 125000 in 333334 / 500000 was not an id

--------------------------------------------------------------------------------
compare_levelsof, oncollision(error)
--------------------------------------------------------------------------------

    compare_levelsof (passed): glevelsof groupsub returned the same levels as levelsof
    compare_levelsof (passed): glevelsof groupstr returned the same levels as levelsof
    compare_levelsof (passed): glevelsof groupsubstr returned the same levels as levelsof
    compare_levelsof (passed): glevelsof grouplong returned the same levels as levelsof
    compare_levelsof (passed): glevelsof groupsub returned the same levels as levelsof
    compare_levelsof (passed): glevelsof groupstr returned the same levels as levelsof
    compare_levelsof (passed): glevelsof groupsubstr returned the same levels as levelsof
    compare_levelsof (passed): glevelsof grouplong returned the same levels as levelsof


    compare_levelsof (passed): glevelsof groupsub [in] returned the same levels as levelsof
    compare_levelsof (passed): glevelsof groupsub [in] returned the same levels as levelsof


    compare_levelsof (passed): glevelsof groupsub [if] returned the same levels as levelsof
    compare_levelsof (passed): glevelsof groupsub [if] returned the same levels as levelsof


    compare_levelsof (passed): glevelsof groupsub [if] [in] returned the same levels as levelsof
    compare_levelsof (passed): glevelsof groupsub [if] [in] returned the same levels as levelsof
    compare_levelsof (passed): glevelsof groupstr [in] returned the same levels as levelsof
    compare_levelsof (passed): glevelsof groupstr [in] returned the same levels as levelsof


    compare_levelsof (passed): glevelsof groupstr [if] returned the same levels as levelsof
    compare_levelsof (passed): glevelsof groupstr [if] returned the same levels as levelsof


    compare_levelsof (passed): glevelsof groupstr [if] [in] returned the same levels as levelsof
    compare_levelsof (passed): glevelsof groupstr [if] [in] returned the same levels as levelsof
    compare_levelsof (passed): glevelsof groupsubstr [in] returned the same levels as levelsof
    compare_levelsof (passed): glevelsof groupsubstr [in] returned the same levels as levelsof


    compare_levelsof (passed): glevelsof groupsubstr [if] returned the same levels as levelsof
    compare_levelsof (passed): glevelsof groupsubstr [if] returned the same levels as levelsof


    compare_levelsof (passed): glevelsof groupsubstr [if] [in] returned the same levels as levelsof
    compare_levelsof (passed): glevelsof groupsubstr [if] [in] returned the same levels as levelsof
    compare_levelsof (passed): glevelsof grouplong [in] returned the same levels as levelsof
    compare_levelsof (passed): glevelsof grouplong [in] returned the same levels as levelsof


    compare_levelsof (passed): glevelsof grouplong [if] returned the same levels as levelsof
    compare_levelsof (passed): glevelsof grouplong [if] returned the same levels as levelsof


    compare_levelsof (passed): glevelsof grouplong [if] [in] returned the same levels as levelsof
    compare_levelsof (passed): glevelsof grouplong [if] [in] returned the same levels as levelsof


Benchmark vs gsort, obs = 100,000, J = 10,000 (in seconds; datasets are compared via cf)
    gsort | hashsort | ratio (g/h) | varlist
    ----- | -------- | ----------- | -------
     .172 |     .078 |        2.21 | -str_12
     .266 |     .093 |        2.86 | str_12 -str_32
     .438 |     .109 |        4.02 | str_12 -str_32 str_4
     .204 |     .078 |        2.62 | -double1
     .297 |     .078 |        3.81 | double1 -double2
     .406 |     .078 |        5.21 | double1 -double2 double3
      .11 |     .032 |        3.44 | -int1
     .251 |      .03 |        8.37 | int1 -int2
     .328 |     .047 |        6.98 | int1 -int2 int3
     .547 |     .094 |        5.82 | -int1 -str_32 -double1
     .936 |     .109 |        8.59 | int1 -str_32 double1 -int2 str_12 -double2
     2.19 |     .141 |        15.5 | int1 -str_32 double1 -int2 str_12 -double2 int3 -str_4 double3


Benchmark vs sort, obs = 1,000,000, J = 10,000 (in seconds; datasets are compared via cf)
     sort | fsort | hashsort | ratio (g/h) | ratio (f/h) | varlist
     ---- | ----- | -------- | ----------- | ----------- | -------
     1.91 |   2.7 |     .937 |        2.03 |        2.88 | str_12
     2.19 |  3.22 |     1.19 |        1.84 |        2.71 | str_12 str_32
     2.59 |  3.64 |     1.52 |        1.71 |         2.4 | str_12 str_32 str_4
     1.92 |  2.22 |     1.53 |        1.25 |        1.45 | double1
     1.89 |  2.56 |     1.31 |        1.44 |        1.95 | double1 double2
     1.91 |  2.36 |     1.22 |        1.56 |        1.94 | double1 double2 double3
     1.74 |  2.36 |     .687 |        2.53 |        3.43 | int1
     2.17 |  2.37 |     1.06 |        2.04 |        2.23 | int1 int2
     2.06 |  2.53 |      .86 |         2.4 |        2.94 | int1 int2 int3
     2.39 |     . |     1.42 |        1.68 |           . | int1 str_32 double1
     2.59 |     . |     1.75 |        1.48 |           . | int1 str_32 double1 int2 str_12 double2
     2.91 |     . |      1.7 |        1.71 |           . | int1 str_32 double1 int2 str_12 double2 int3 str_4 double3

--------------------------------------------------------------------------------
compare_hashsort, oncollision(error)
--------------------------------------------------------------------------------

Short (quick) versions of the benchmarks
Benchmarking N for J = 100; by(x3)
    vars  = y1 y2 y3 y4 y5 y6 y7 y8 y9 y10 y11 y12 y13 y14 y15
    stats = sum
                    2,000 gcollapse  (.64)  collapse  (.047)  fcollapse  (.092)
                   20,000 gcollapse  (.64)  collapse  (.203)  fcollapse  (.047)
Results varying N for J = 100; by(x3)
|              N | gcollapse |  collapse | fcollapse | ratio (f/g) | ratio (c/g) |
| -------------- | --------- | --------- | --------- | ----------- | ----------- |
|          2,000 |      0.64 |      0.05 |      0.09 |        0.14 |        0.07 |
|         20,000 |      0.64 |      0.20 |      0.05 |        0.07 |        0.32 |
Benchmarking N for J = 100; by(x3)
    vars  = y1 y2 y3
    stats = mean median
                    2,000 gcollapse  (.015)  collapse  (.048)  fcollapse  (.031)
                   20,000 gcollapse  (.144)  collapse  (.171)  fcollapse  (.047)
Results varying N for J = 100; by(x3)
|              N | gcollapse |  collapse | fcollapse | ratio (f/g) | ratio (c/g) |
| -------------- | --------- | --------- | --------- | ----------- | ----------- |
|          2,000 |      0.01 |      0.05 |      0.03 |        2.07 |        3.20 |
|         20,000 |      0.14 |      0.17 |      0.05 |        0.33 |        1.19 |
Benchmarking N for J = 100; by(x3)
    vars  = y1 y2 y3 y4 y5 y6
    stats = sum mean count min max
                    2,000 gcollapse  (1.094)  collapse  (.078)  fcollapse  (.016)
                   20,000 gcollapse  (.625)  collapse  (.5629999999999999)  fcollapse  (.046)
Results varying N for J = 100; by(x3)
|              N | gcollapse |  collapse | fcollapse | ratio (f/g) | ratio (c/g) |
| -------------- | --------- | --------- | --------- | ----------- | ----------- |
|          2,000 |      1.09 |      0.08 |      0.02 |        0.01 |        0.07 |
|         20,000 |      0.63 |      0.56 |      0.05 |        0.07 |        0.90 |
Benchmarking N for J = 10; by(group)
    vars  = x1 x2
    stats = sum mean max min count percent first last firstnm lastnm median iqr p23 p77
                    2,000 gcollapse  (.047)  collapse  (.125)  fcollapse  (.016)
                   20,000 gcollapse  (.063)  collapse  (1.735)  fcollapse  (.077)
Results varying N for J = 10; by(group)
|              N | gcollapse |  collapse | fcollapse | ratio (f/g) | ratio (c/g) |
| -------------- | --------- | --------- | --------- | ----------- | ----------- |
|          2,000 |      0.05 |      0.13 |      0.02 |        0.34 |        2.66 |
|         20,000 |      0.06 |      1.74 |      0.08 |        1.22 |       27.54 |
Benchmarking J for N = 5,000; by(group)
    vars  = x1 x2
    stats = sum mean max min count percent first last firstnm lastnm median iqr p23 p77
                      100 gcollapse  (.047)  collapse  (.281)  fcollapse  (.031)
                    1,000 gcollapse  (.047)  collapse  (.39)  fcollapse  (.063)
Results varying J for N = 5,000; by(group)
|              J | gcollapse |  collapse | fcollapse | ratio (f/g) | ratio (c/g) |
| -------------- | --------- | --------- | --------- | ----------- | ----------- |
|            100 |      0.05 |      0.28 |      0.03 |        0.66 |        5.98 |
|          1,000 |      0.05 |      0.39 |      0.06 |        1.34 |        8.30 |
Benchmarking N for J = 100; by(x3)
    vars  = y1 y2 y3 y4 y5 y6 y7 y8 y9 y10 y11 y12 y13 y14 y15
    stats = sum
                    2,000 gcollapse-default  (.032)  fcollapse  (.015) 
                   20,000 gcollapse-default  (.046)  fcollapse  (.047) 
Results varying N for J = 100; by(x3)
|              N | gcollapse | fcollapse | ratio (f/g) |
| -------------- | --------- | --------- | ----------- |
|          2,000 |      0.03 |      0.01 |        0.47 |
|         20,000 |      0.05 |      0.05 |        1.02 |
Benchmarking N for J = 100; by(x3)
    vars  = y1 y2 y3
    stats = mean median
                    2,000 gcollapse-default  (.015)  fcollapse  (.016) 
                   20,000 gcollapse-default  (.016)  fcollapse  (.031) 
Results varying N for J = 100; by(x3)
|              N | gcollapse | fcollapse | ratio (f/g) |
| -------------- | --------- | --------- | ----------- |
|          2,000 |      0.01 |      0.02 |        1.07 |
|         20,000 |      0.02 |      0.03 |        1.94 |
Benchmarking N for J = 100; by(x3)
    vars  = y1 y2 y3 y4 y5 y6
    stats = sum mean count min max
                    2,000 gcollapse-default  (.046)  fcollapse  (.032) 
                   20,000 gcollapse-default  (.063)  fcollapse  (.047) 
Results varying N for J = 100; by(x3)
|              N | gcollapse | fcollapse | ratio (f/g) |
| -------------- | --------- | --------- | ----------- |
|          2,000 |      0.05 |      0.03 |        0.70 |
|         20,000 |      0.06 |      0.05 |        0.75 |
Benchmarking N for J = 10; by(group)
    vars  = x1 x2
    stats = sum mean max min count percent first last firstnm lastnm median iqr p23 p77
                    2,000 gcollapse-default  (.062)  fcollapse  (.031) 
                   20,000 gcollapse-default  (.062)  fcollapse  (.063) 
Results varying N for J = 10; by(group)
|              N | gcollapse | fcollapse | ratio (f/g) |
| -------------- | --------- | --------- | ----------- |
|          2,000 |      0.06 |      0.03 |        0.50 |
|         20,000 |      0.06 |      0.06 |        1.02 |
Benchmarking J for N = 5,000; by(group)
    vars  = x1 x2
    stats = sum mean max min count percent first last firstnm lastnm median iqr p23 p77
                      100 gcollapse-default  (.047)  fcollapse  (.032) 
                    1,000 gcollapse-default  (.063)  fcollapse  (.078) 
Results varying J for N = 5,000; by(group)
|              J | gcollapse | fcollapse | ratio (f/g) |
| -------------- | --------- | --------- | ----------- |
|            100 |      0.05 |      0.03 |        0.68 |
|          1,000 |      0.06 |      0.08 |        1.24 |

End: 08:46:02  9 Oct 2017
tests ran

tests finished running

Start: 08:32:21 9 Oct 2017
End: 08:46:02  9 Oct 2017

. 
end of do-file

. log close _all
      name:  <unnamed>
       log:  C:\cygwin64\home\mauricio\gtools\build\gtools_tests_windows.log
  log type:  text
 closed on:   9 Oct 2017, 08:50:33
--------------------------------------------------------------------------------------------------------------------------------
