-------------------------------------------------------------------------------------------------
      name:  <unnamed>
       log:  /home/mauricio/code/stata-gtools/gtools.log
  log type:  text
 opened on:  18 Jun 2017, 13:58:38

. do /home/mauricio/code/stata-gtools/build/gtools_tests.do

. * ---------------------------------------------------------------------
. * Project: gtools
. * Program: gtools_tests.do
. * Author:  Mauricio Caceres Bravo <mauricio.caceres.bravo@gmail.com>
. * Created: Tue May 16 07:23:02 EDT 2017
. * Updated: Fri Jun 16 17:37:39 EDT 2017
. * Purpose: Unit tests for gtools
. * Version: 0.6.3
. * Manual:  help gcollapse, help gegen
. 
. * Stata start-up options
. * ----------------------
. 
. version 13

. clear all

. set more off

. set varabbrev off

. * set seed 42
. set seed 1729

. set linesize 128

. 
. * Main program wrapper
. * --------------------
. 
. program main
  1.     syntax, [CAPture NOIsily *]
  2. 
.     * Set up
.     * ------
. 
.     local  progname tests
  3.     local  start_time "$S_TIME $S_DATE"
  4.     di "Start: `start_time'"
  5. 
.     * Run the things
.     * --------------
. 
.     `capture' `noisily' {
  6.         * do test_gcollapse.do
.         * do test_gegen.do
.         * do bench_gcollapse.do
.         if ( `:list posof "checks" in options' ) {
  7.             checks_byvars_gcollapse,  debug_force_single
  8.             checks_options_gcollapse, debug_force_single
  9.             if !inlist("`c(os)'", "Windows") {
 10.                 checks_byvars_gcollapse,  debug_force_multi
 11.                 checks_options_gcollapse, debug_force_multi
 12.             }
 13. 
.             checks_options_gegen, debug_force_single
 14.             if !inlist("`c(os)'", "Windows") {
 15.                 checks_options_gegen, debug_force_multi
 16.             }
 17. 
.             checks_consistency_gcollapse, debug_checkhash
 18.             checks_consistency_gcollapse, forceio debug_io_read_method(0)
 19.             checks_consistency_gcollapse, forceio debug_io_read_method(1)
 20.             checks_consistency_gcollapse, debug_io_check(1) debug_io_threshold(0)
 21.             checks_consistency_gcollapse, debug_io_check(1) debug_io_threshold(1000000)
 22.             checks_consistency_gcollapse, debug_force_single
 23.             if !inlist("`c(os)'", "Windows") {
 24.                 checks_consistency_gcollapse, debug_force_multi
 25.             }
 26. 
.             checks_consistency_gegen, debug_force_single b
 27.             if !inlist("`c(os)'", "Windows") {
 28.                 checks_consistency_gegen, debug_force_multi  b
 29.             }
 30.         }
 31. 
.         if ( `:list posof "test" in options' ) {
 32.             cap ssc install ftools
 33.             cap ssc install moremata
 34. 
.             di "Short (quick) versions of the benchmarks"
 35.             bench_ftools y1 y2 y3 y4 y5 y6 y7 y8 y9 y10 y11 y12 y13 y14 y15, by(x3) kmin(3) kmax(4) kvars(15)
 36.             bench_ftools y1 y2 y3,          by(x3) kmin(3) kmax(4) kvars(3) stats(mean median)
 37.             bench_ftools y1 y2 y3 y4 y5 y6, by(x3) kmin(3) kmax(4) kvars(6) stats(sum mean count min max)
 38.             bench_sample_size x1 x2, by(group) kmin(3) kmax(4) pct(median iqr p23 p77)
 39.             bench_group_size  x1 x2, by(group) kmin(2) kmax(3) pct(median iqr p23 p77) obsexp(3)
 40. 
.             bench_switch_fcoll y1 y2 y3 y4 y5 y6 y7 y8 y9 y10 y11 y12 y13 y14 y15, by(x3) kmin(3) kmax(4) kvars(15) style(ftoo
> ls)
 41.             bench_switch_fcoll y1 y2 y3,          by(x3)    kmin(3) kmax(4) kvars(3) stats(mean median)             style(f
> tools)
 42.             bench_switch_fcoll y1 y2 y3 y4 y5 y6, by(x3)    kmin(3) kmax(4) kvars(6) stats(sum mean count min max)  style(f
> tools)
 43.             bench_switch_fcoll x1 x2, margin(N)   by(group) kmin(3) kmax(4) pct(median iqr p23 p77)                 style(g
> tools)
 44.             bench_switch_fcoll x1 x2, margin(J)   by(group) kmin(2) kmax(3) pct(median iqr p23 p77) obsexp(3)       style(g
> tools)
 45.         }
 46. 
.         if ( `:list posof "benchmark" in options' ) {
 47.             cap ssc install ftools
 48.             cap ssc install moremata
 49. 
.             bench_ftools y1 y2 y3 y4 y5 y6 y7 y8 y9 y10 y11 y12 y13 y14 y15, by(x3) kmin(4) kmax(7) kvars(15)
 50.             bench_ftools y1 y2 y3,             by(x3)    kmin(4) kmax(7) kvars(3) stats(mean median)
 51.             bench_ftools y1 y2 y3 y4 y5 y6,    by(x3)    kmin(4) kmax(7) kvars(6) stats(sum mean count min max)
 52.             bench_sample_size x1 x2, margin(N) by(group) kmin(4) kmax(7) pct(median iqr p23 p77)
 53.             bench_group_size  x1 x2, margin(J) by(group) kmin(3) kmax(6) pct(median iqr p23 p77) obsexp(6)
 54.         }
 55. 
.         if ( `:list posof "bench_fcoll" in options' ) {
 56.             cap ssc install ftools
 57.             cap ssc install moremata
 58. 
.             bench_switch_fcoll y1 y2 y3 y4 y5 y6 y7 y8 y9 y10 y11 y12 y13 y14 y15, by(x3) kmin(4) kmax(7) kvars(15) style(ftoo
> ls)
 59.             bench_switch_fcoll y1 y2 y3,          by(x3)  kmin(4) kmax(7) kvars(3) stats(mean median)               style(f
> tools)
 60.             bench_switch_fcoll y1 y2 y3 y4 y5 y6, by(x3)  kmin(4) kmax(7) kvars(6) stats(sum mean count min max)    style(f
> tools)
 61.             bench_switch_fcoll x1 x2, margin(N) by(group) kmin(4) kmax(7) pct(median iqr p23 p77)                   style(g
> tools)
 62.             bench_switch_fcoll x1 x2, margin(J) by(group) kmin(1) kmax(6) pct(median iqr p23 p77) obsexp(6)         style(g
> tools)
 63.         }
 64.     }
 65.     local rc = _rc
 66. 
.     exit_message, rc(`rc') progname(`progname') start_time(`start_time') `capture'
 67.     exit `rc'
 68. end

. 
. capture program drop exit_message

. program exit_message
  1.     syntax, rc(int) progname(str) start_time(str) [CAPture]
  2.     local end_time "$S_TIME $S_DATE"
  3.     local time     "Start: `start_time'" _n(1) "End: `end_time'"
  4.     di ""
  5.     if (`rc' == 0) {
  6.         di "End: $S_TIME $S_DATE"
  7.         local paux      ran
  8.         local message "`progname' finished running" _n(2) "`time'"
  9.         local subject "`progname' `paux'"
 10.     }
 11.     else if ("`capture'" == "") {
 12.         di "WARNING: $S_TIME $S_DATE"
 13.         local paux ran with non-0 exit status
 14.         local message "`progname' ran but Stata gave error code r(`rc')" _n(2) "`time'"
 15.         local subject "`progname' `paux'"
 16.     }
 17.     else {
 18.         di "ERROR: $S_TIME $S_DATE"
 19.         local paux ran with errors
 20.         local message "`progname' stopped with error code r(`rc')" _n(2) "`time'"
 21.         local subject "`progname' `paux'"
 22.     }
 23.     di "`subject'"
 24.     di ""
 25.     di "`message'"
 26. end

. 
. * Wrapper for easy timer use
. cap program drop mytimer

. program mytimer, rclass
  1.     * args number what step
.     syntax anything, [minutes ts]
  2. 
.     tokenize `anything'
  3.     local number `1'
  4.     local what   `2'
  5.     local step   `3'
  6. 
.     if ("`what'" == "end") {
  7.         qui {
  8.             timer clear `number'
  9.             timer off   `number'
 10.         }
 11.         if ("`ts'" == "ts") mytimer_ts `step'
 12.     }
 13.     else if ("`what'" == "info") {
 14.         qui {
 15.             timer off `number'
 16.             timer list `number'
 17.         }
 18.         local seconds = r(t`number')
 19.         local prints  `:di trim("`:di %21.2gc `seconds''")' seconds
 20.         if ("`minutes'" != "") {
 21.             local minutes = `seconds' / 60
 22.             local prints  `:di trim("`:di %21.3gc `minutes''")' minutes
 23.         }
 24.         mytimer_ts Step `step' took `prints'
 25.         qui {
 26.             timer clear `number'
 27.             timer on    `number'
 28.         }
 29.     }
 30.     else {
 31.         qui {
 32.             timer clear `number'
 33.             timer on    `number'
 34.             timer off   `number'
 35.             timer list  `number'
 36.             timer on    `number'
 37.         }
 38.         if ("`ts'" == "ts") mytimer_ts `step'
 39.     }
 40. end

. 
. capture program drop mytimer_ts

. program mytimer_ts
  1.     display _n(1) "{hline 79}"
  2.     if ("`0'" != "") display `"`0'"'
  3.     display `"        Base: $S_FN"'
  4.     display  "        In memory: `:di trim("`:di %21.0gc _N'")' observations"
  5.     display  "        Timestamp: $S_TIME $S_DATE"
  6.     display  "{hline 79}" _n(1)
  7. end

. 
. capture program drop sim

. program sim, rclass
  1.     syntax, [offset(str) n(int 100) nj(int 10) njsub(int 2) string float sortg replace groupmiss outmiss]
  2.     qui {
  3.         if ("`offset'" == "") local offset 0
  4.         clear
  5.         set obs `n'
  6.         gen group  = ceil(`nj' *  _n / _N) + `offset'
  7.         bys group: gen groupsub   = ceil(`njsub' *  _n / _N)
  8.         bys group: gen groupfloat = ceil(`njsub' *  _n / _N) + 0.5
  9.         gen rsort = runiform() - 0.5
 10.         gen rnorm = rnormal()
 11.         if ("`sortg'" == "")  sort rsort
 12.         if ("`groupmiss'" != "") replace group = . if runiform() < 0.1
 13.         if ("`outmiss'" != "") replace rsort = . if runiform() < 0.1
 14.         if ("`outmiss'" != "") replace rnorm = . if runiform() < 0.1
 15.         if ("`float'" != "")  replace group = group / `nj'
 16.         if ("`string'" != "") {
 17.             tostring group, `:di cond("`replace'" == "", "gen(groupstr)", "replace")'
 18.             local target `:di cond("`replace'" == "", "groupstr", "group")'
 19.             replace `target' = "i am a modesly long string" + `target'
 20.         }
 21.         gen long grouplong = ceil(`nj' *  _n / _N) + `offset'
 22.     }
 23.     sum rsort
 24.     di "Obs = " trim("`:di %21.0gc _N'") "; Groups = " trim("`:di %21.0gc `nj''")
 25.     compress
 26.     return local n  = `n'
 27.     return local nj = `nj'
 28.     return local offset = `offset'
 29.     return local string = ("`string'" != "")
 30. end

. 
. capture program drop checks_consistency_gcollapse

. program checks_consistency_gcollapse
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "checks_consistency_gcollapse `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     local stats sum mean sd max min count percent first last firstnm lastnm median iqr
  4.     local collapse_str ""
  5.     foreach stat of local stats {
  6.         local collapse_str `collapse_str' (`stat') `stat' = rnorm
  7.     }
  8.     local collapse_str `collapse_str' (p23) p23 = rnorm
  9.     local collapse_str `collapse_str' (p77) p77 = rnorm
 10. 
.     sim, n(50000) nj(8) njsub(4) string groupmiss outmiss
 11.     mytimer 9
 12.     qui `noisily' foreach i in 0 3 6 9 {
 13.         if (`i' == 0) local by groupsub groupstr
 14.         if (`i' == 3) local by groupstr
 15.         if (`i' == 6) local by groupsub group
 16.         if (`i' == 9) local by grouplong
 17.     preserve
 18.         mytimer 9 info
 19.         gcollapse `collapse_str', by(`by') verbose benchmark `options'
 20.         mytimer 9 info "gcollapse to groups"
 21.         tempfile f`i'
 22.         save `f`i''
 23.     * I originally was also testing fcollapse, but it can't do sd for
.     * some reason, and you can't mix string and numeric variables...
.     * restore, preserve
.     *     mytimer 9 info
.     *     if (`i' != 0) {
.     *         fcollapse `collapse_str', by(`by') verbose
.     *         mytimer 9 info "fcollapse to groups"
.     *         tempfile f`:di `i' + 1'
.     *         save `f`:di `i' + 1''
.     *     }
.     restore, preserve
 24.         mytimer 9 info
 25.         collapse `collapse_str', by(`by')
 26.         mytimer 9 info "collapse to groups"
 27.         tempfile f`:di `i' + 2'
 28.         save `f`:di `i' + 2''
 29.     restore
 30.     }
 31.     mytimer 9 off
 32. 
.     sim, n(50000) nj(8000) njsub(4) string groupmiss outmiss
 33.     qui `noisily' foreach i in 12 15 18 21 {
 34.         if (`i' == 12) local by groupsub groupstr
 35.         if (`i' == 15) local by groupstr
 36.         if (`i' == 18) local by groupsub group
 37.         if (`i' == 21) local by grouplong
 38.     preserve
 39.         mytimer 9 info
 40.         gcollapse `collapse_str', by(`by') verbose benchmark `options'
 41.         mytimer 9 info "gcollapse 2 groups"
 42.         tempfile f`i'
 43.         save `f`i''
 44.     * restore, preserve
.     *     mytimer 9 info
.     *     if (`i' != 12) {
.     *         fcollapse `collapse_str', by(`by') verbose
.     *         mytimer 9 info "fcollapse to groups"
.     *         tempfile f`:di `i' + 1'
.     *         save `f`:di `i' + 1''
.     *     }
.     restore, preserve
 45.         mytimer 9 info
 46.         collapse `collapse_str', by(`by')
 47.         mytimer 9 info "collapse to groups"
 48.         tempfile f`:di `i' + 2'
 49.         save `f`:di `i' + 2''
 50.     restore
 51.     }
 52. 
.     foreach i in 0 3 6 9 12 15 18 21 {
 53.     preserve
 54.     use `f`:di `i' + 2'', clear
 55.         local bad_any = 0
 56.         if (`i' == 0)  local bad groupsub groupstr
 57.         if (`i' == 3)  local bad groupstr
 58.         if (`i' == 6)  local bad groupsub group
 59.         if (`i' == 9)  local bad grouplong
 60.         if (`i' == 12) local bad groupsub groupstr
 61.         if (`i' == 15) local bad groupstr
 62.         if (`i' == 18) local bad groupsub group
 63.         if (`i' == 21) local bad grouplong
 64.         local by `bad'
 65.         foreach var in `stats' p23 p77 {
 66.             rename `var' c_`var'
 67.         }
 68.         qui merge 1:1 `by' using `f`i'', assert(3)
 69.         foreach var in `stats' p23 p77 {
 70.             qui count if ( (abs(`var' - c_`var') > `tol') & (`var' != c_`var'))
 71.             if ( `r(N)' > 0 ) {
 72.                 gen bad_`var' = abs(`var' - c_`var') * (`var' != c_`var')
 73.                 local bad `bad' *`var'
 74.                 di "`var' has `:di r(N)' mismatches".
 75.                 local bad_any = 1
 76.             }
 77.         }
 78.         if ( `bad_any' ) {
 79.             order `bad'
 80.             egen bad_any = rowmax(bad_*)
 81.             l *count* `bad' if bad_any
 82.             sum bad_*
 83.             exit 9
 84.         }
 85.         else {
 86.             di "gcollapse produced identical data to collapse (tol = `tol', `by')"
 87.         }
 88.     restore
 89.     }
 90. 
.     * foreach i in 4 7 10 16 19 22 {
.     * preserve
.     * use `f`:di `i' + 1'', clear
.     *     local bad_any = 0
.     *     if (`i' == 4)  local bad groupstr
.     *     if (`i' == 7)  local bad groupsub group
.     *     if (`i' == 10) local bad grouplong
.     *     if (`i' == 16) local bad groupstr
.     *     if (`i' == 19) local bad groupsub group
.     *     if (`i' == 22) local bad grouplong
.     *     local by `bad'
.     *     foreach var in `stats' p23 p77 {
.     *         rename `var' c_`var'
.     *     }
.     *     qui merge 1:1 `bad' using `f`i'', assert(3)
.     *     foreach var in `stats' p23 p77 {
.     *         qui count if ( (abs(`var' - c_`var') > `tol') & (`var' != c_`var'))
.     *         if ( `r(N)' > 0 ) {
.     *             gen bad_`var' = abs(`var' - c_`var') * (`var' != c_`var')
.     *             local bad `bad' *`var'
.     *             di "`var' has `:di r(N)' mismatches".
.     *             local bad_any = 1
.     *         }
.     *     }
.     *     if ( `bad_any' ) {
.     *         order `bad'
.     *         egen bad_any = rowmax(bad_*)
.     *         l *count* `bad' if bad_any & _n < 100
.     *         sum bad_*
.     *         di "fcollapse produced different data to collapse (tol = `tol', `by')"
.     *     }
.     *     else {
.     *         di "fcollapse produced identical data to collapse (tol = `tol', `by')"
.     *     }
.     * restore
.     * }
. 
.     di ""
 91.     di as txt "Passed! checks_consistency_gcollapse `options'"
 92. end

. 
. capture program drop checks_byvars_gcollapse

. program checks_byvars_gcollapse
  1.     syntax, [*]
  2.     di _n(1) "{hline 80}" _n(1) "checks_byvars_gcollapse `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     sim, n(1000) nj(250) string
  4.     set rmsg on
  5.     preserve
  6.         gcollapse (mean) rnorm (sum) sum = rnorm (sd) sd = rnorm, by(groupsub) verbose `options'
  7.     restore, preserve
  8.         gcollapse (mean) rnorm (sum) sum = rnorm (sd) sd = rnorm, by(group) verbose `options'
  9.     restore, preserve
 10.         gcollapse (mean) rnorm (sum) sum = rnorm (sd) sd = rnorm, by(groupstr) verbose `options'
 11.     restore, preserve
 12.         gcollapse (mean) rnorm (sum) sum = rnorm (sd) sd = rnorm, by(grouplong) verbose `options'
 13.     restore, preserve
 14.         gcollapse (mean) rnorm (sum) sum = rnorm (sd) sd = rnorm, by(groupsub) verbose `options'
 15.     restore, preserve
 16.         gcollapse (mean) rnorm (sum) sum = rnorm (sd) sd = rnorm, by(group groupsub) verbose `options'
 17.     restore, preserve
 18.         gcollapse (mean) rnorm (sum) sum = rnorm (sd) sd = rnorm, by(grouplong groupsub) verbose `options'
 19.     restore, preserve
 20.         gcollapse (mean) rnorm (sum) sum = rnorm (sd) sd = rnorm, by(groupstr groupsub) verbose `options'
 21.     restore
 22.     set rmsg off
 23. 
. 
.     di ""
 24.     di as txt "Passed! checks_byvars_gcollapse `options'"
 25. end

. 
. capture program drop checks_options_gcollapse

. program checks_options_gcollapse
  1.     syntax, [*]
  2.     di _n(1) "{hline 80}" _n(1) "checks_options_gcollapse `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     local stats mean count median iqr
  4.     local collapse_str ""
  5.     foreach stat of local stats {
  6.         local collapse_str `collapse_str' (`stat') `stat' = rnorm `stat'2 = rnorm
  7.     }
  8. 
.     sim, n(200) nj(10) string outmiss
  9.     preserve
 10.         gcollapse `collapse_str', by(groupstr) verbose benchmark `options'
 11.         if ( `=_N' > 10 ) l in 1/10
 12.         if ( `=_N' < 10 ) l
 13.     restore, preserve
 14.         gcollapse `collapse_str', by(groupstr) verbose forceio `options'
 15.         if ( `=_N' > 10 ) l in 1/10
 16.         if ( `=_N' < 10 ) l
 17.     restore, preserve
 18.         gcollapse `collapse_str', by(groupstr) verbose forcemem `options'
 19.         if ( `=_N' > 10 ) l in 1/10
 20.         if ( `=_N' < 10 ) l
 21.     restore, preserve
 22.         gcollapse `collapse_str', by(groupstr) verbose unsorted `options'
 23.         if ( `=_N' > 10 ) l in 1/10
 24.         if ( `=_N' < 10 ) l
 25.     restore, preserve
 26.         gcollapse `collapse_str', by(groupstr) verbose benchmark cw `options'
 27.         if ( `=_N' > 10 ) l in 1/10
 28.         if ( `=_N' < 10 ) l
 29.     restore, preserve
 30.         gcollapse `collapse_str', by(groupstr) double `options'
 31.         if ( `=_N' > 10 ) l in 1/10
 32.         if ( `=_N' < 10 ) l
 33.     restore, preserve
 34.         gcollapse `collapse_str', by(groupstr) merge `options'
 35.         if ( `=_N' > 10 ) l in 1/10
 36.         if ( `=_N' < 10 ) l
 37.     restore
 38. 
.     sort groupstr groupsub
 39.     preserve
 40.         gcollapse `collapse_str', by(groupstr groupsub) verbose benchmark `options'
 41.         if ( `=_N' > 10 ) l in 1/10
 42.         if ( `=_N' < 10 ) l
 43.     restore, preserve
 44.         gcollapse `collapse_str', by(groupstr groupsub) verbose benchmark smart `options'
 45.         if ( `=_N' > 10 ) l in 1/10
 46.         if ( `=_N' < 10 ) l
 47.     restore, preserve
 48.         gcollapse `collapse_str', by(groupsub groupstr) verbose benchmark smart `options'
 49.         if ( `=_N' > 10 ) l in 1/10
 50.         if ( `=_N' < 10 ) l
 51.     restore, preserve
 52.         gcollapse `collapse_str', by(groupstr) verbose benchmark `options'
 53.         if ( `=_N' > 10 ) l in 1/10
 54.         if ( `=_N' < 10 ) l
 55.     restore, preserve
 56.         gcollapse `collapse_str', by(groupstr) verbose benchmark smart `options'
 57.         if ( `=_N' > 10 ) l in 1/10
 58.         if ( `=_N' < 10 ) l
 59.     restore, preserve
 60.         gcollapse `collapse_str', by(groupsub) verbose benchmark smart `options'
 61.         if ( `=_N' > 10 ) l in 1/10
 62.         if ( `=_N' < 10 ) l
 63.     restore, preserve
 64.         gcollapse `collapse_str', by(groupsub) verbose benchmark `options'
 65.         if ( `=_N' > 10 ) l in 1/10
 66.         if ( `=_N' < 10 ) l
 67.     restore
 68. 
.     di ""
 69.     di as txt "Passed! checks_options_gcollapse `options'"
 70. end

. 
. * TODO: Edge cases (nothing in anything, no -by-, should mimic collapse // 2017-05-16 08:03 EDT
. capture program drop sim

. program sim, rclass
  1.     syntax, [offset(str) n(int 100) nj(int 10) njsub(int 2) string float sortg replace groupmiss outmiss]
  2.     qui {
  3.         if ("`offset'" == "") local offset 0
  4.         clear
  5.         set obs `n'
  6.         gen group  = ceil(`nj' *  _n / _N) + `offset'
  7.         bys group: gen groupsub   = ceil(`njsub' *  _n / _N)
  8.         bys group: gen groupfloat = ceil(`njsub' *  _n / _N) + 0.5
  9.         gen rsort = runiform() - 0.5
 10.         gen rnorm = rnormal()
 11.         if ("`sortg'" == "")  sort rsort
 12.         if ("`groupmiss'" != "") replace group = . if runiform() < 0.1
 13.         if ("`outmiss'" != "") replace rsort = . if runiform() < 0.1
 14.         if ("`outmiss'" != "") replace rnorm = . if runiform() < 0.1
 15.         if ("`float'" != "")  replace group = group / `nj'
 16.         if ("`string'" != "") {
 17.             tostring group, `:di cond("`replace'" == "", "gen(groupstr)", "replace")'
 18.             local target `:di cond("`replace'" == "", "groupstr", "group")'
 19.             replace `target' = "i am a modesly long string" + `target'
 20.         }
 21.         gen long grouplong = ceil(`nj' *  _n / _N) + `offset'
 22.     }
 23.     sum rsort
 24.     di "Obs = " trim("`:di %21.0gc _N'") "; Groups = " trim("`:di %21.0gc `nj''")
 25.     compress
 26.     return local n  = `n'
 27.     return local nj = `nj'
 28.     return local offset = `offset'
 29.     return local string = ("`string'" != "")
 30. end

. 
. capture program drop checks_consistency_gegen

. program checks_consistency_gegen
  1.     syntax, [tol(real 1e-6) *]
  2.     di _n(1) "{hline 80}" _n(1) "checks_consistency_gegen `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     local stats total sum mean sd max min count median iqr
  4.     sim, n(500000) nj(10000) njsub(4) string groupmiss outmiss
  5. 
.     cap drop g*_*
  6.     cap drop c*_*
  7.     di "Checking full range"
  8.     foreach fun of local stats {
  9.         qui gegen g_`fun' = `fun'(rnorm), by(groupstr groupsub) `options'
 10.         qui  egen c_`fun' = `fun'(rnorm), by(groupstr groupsub)
 11.         cap noi assert (g_`fun' == c_`fun') | abs(g_`fun' - c_`fun') < `tol'
 12.         if ( _rc ) {
 13.             di as err "`fun' failed! (tol = `tol')"
 14.             exit _rc
 15.         }
 16.         else di as txt "    `fun' was OK"
 17.     }
 18. 
.     foreach p in 10 30 70 90 {
 19.         qui gegen g_p`p' = pctile(rnorm), by(groupstr groupsub) p(`p') `options'
 20.         qui  egen c_p`p' = pctile(rnorm), by(groupstr groupsub) p(`p')
 21.         cap noi assert (g_p`p' == c_p`p') | abs(g_p`p' - c_p`p') < `tol'
 22.         if ( _rc ) {
 23.             di as err "percentile `p' failed! (tol = `tol')"
 24.             exit _rc
 25.         }
 26.         else di as txt "    percentile `p' was OK"
 27.     }
 28. 
.     local fun tag
 29.     {
 30.         qui gegen g_`fun' = `fun'(groupstr groupsub), v `options'
 31.         qui  egen c_`fun' = `fun'(groupstr groupsub)
 32.         cap noi assert (g_`fun' == c_`fun') | abs(g_`fun' - c_`fun') < `tol'
 33.         if ( _rc ) {
 34.             di as err "`fun' failed! (tol = `tol')"
 35.             exit _rc
 36.         }
 37.         else di as txt "    `fun' was OK"
 38.     }
 39. 
.     cap drop g*_*
 40.     cap drop c*_*
 41.     di "Checking if range"
 42.     foreach fun of local stats {
 43.         qui gegen gif_`fun' = `fun'(rnorm) if rsort > 0, by(groupstr groupsub) `options'
 44.         qui  egen cif_`fun' = `fun'(rnorm) if rsort > 0, by(groupstr groupsub)
 45.         cap noi assert (gif_`fun' == cif_`fun') | abs(gif_`fun' - cif_`fun') < `tol'
 46.         if ( _rc ) {
 47.             di as err "`fun' failed! (tol = `tol')"
 48.             exit _rc
 49.         }
 50.         else di as txt "    `fun' was OK"
 51.     }
 52. 
.     foreach p in 10 30 70 90 {
 53.         qui gegen g_p`p' = pctile(rnorm) if rsort > 0, by(groupstr groupsub) p(`p') `options'
 54.         qui  egen c_p`p' = pctile(rnorm) if rsort > 0, by(groupstr groupsub) p(`p')
 55.         cap noi assert (g_p`p' == c_p`p') | abs(g_p`p' - c_p`p') < `tol'
 56.         if ( _rc ) {
 57.             di as err "percentile `p' failed! (tol = `tol')"
 58.             exit _rc
 59.         }
 60.         else di as txt "    percentile `p' was OK"
 61.     }
 62. 
.     local fun tag
 63.     {
 64.         qui gegen gif_`fun' = `fun'(groupstr groupsub) if rsort > 0, v `options'
 65.         qui  egen cif_`fun' = `fun'(groupstr groupsub) if rsort > 0
 66.         cap noi assert (gif_`fun' == cif_`fun') | abs(gif_`fun' - cif_`fun') < `tol'
 67.         if ( _rc ) {
 68.             di as err "`fun' failed! (tol = `tol')"
 69.             exit _rc
 70.         }
 71.         else di as txt "    `fun' was OK"
 72.     }
 73. 
.     cap drop g*_*
 74.     cap drop c*_*
 75.     di "Checking in range"
 76.     foreach fun of local stats {
 77.         local in1 = ceil(runiform() * `=_N')
 78.         local in2 = ceil(runiform() * `=_N')
 79.         local from = cond(`in1' < `in2', `in1', `in2')
 80.         local to   = cond(`in1' > `in2', `in1', `in2')
 81.         qui gegen gin_`fun' = `fun'(rnorm) in `from' / `to', by(groupstr groupsub) `options'
 82.         qui  egen cin_`fun' = `fun'(rnorm) in `from' / `to', by(groupstr groupsub)
 83.         cap noi assert (gin_`fun' == cin_`fun') | abs(gin_`fun' - cin_`fun') < `tol'
 84.         if ( _rc ) {
 85.             di as err "`fun' failed! (tol = `tol')"
 86.             exit _rc
 87.         }
 88.         else di as txt "    `fun' was OK"
 89.     }
 90. 
.     foreach p in 10 30 70 90 {
 91.         local in1 = ceil(runiform() * `=_N')
 92.         local in2 = ceil(runiform() * `=_N')
 93.         local from = cond(`in1' < `in2', `in1', `in2')
 94.         local to   = cond(`in1' > `in2', `in1', `in2')
 95.         qui gegen g_p`p' = pctile(rnorm) in `from' / `to', by(groupstr groupsub) p(`p') `options'
 96.         qui  egen c_p`p' = pctile(rnorm) in `from' / `to', by(groupstr groupsub) p(`p')
 97.         cap noi assert (g_p`p' == c_p`p') | abs(g_p`p' - c_p`p') < `tol'
 98.         if ( _rc ) {
 99.             di as err "percentile `p' failed! (tol = `tol')"
100.             exit _rc
101.         }
102.         else di as txt "    percentile `p' was OK"
103.     }
104. 
.     local fun tag
105.     {
106.         local in1 = ceil(runiform() * `=_N')
107.         local in2 = ceil(runiform() * `=_N')
108.         local from = cond(`in1' < `in2', `in1', `in2')
109.         local to   = cond(`in1' > `in2', `in1', `in2')
110.         qui gegen gin_`fun' = `fun'(groupstr groupsub) in `from' / `to', v b `options'
111.         qui  egen cin_`fun' = `fun'(groupstr groupsub) in `from' / `to'
112.         cap noi assert (gin_`fun' == cin_`fun') | abs(gin_`fun' - cin_`fun') < `tol'
113.         if ( _rc ) {
114.             di as err "`fun' failed! (tol = `tol')"
115.             exit _rc
116.         }
117.         else di as txt "    `fun' was OK"
118.     }
119. 
.     cap drop g*_*
120.     cap drop c*_*
121.     di "Checking if in range"
122.     foreach fun of local stats {
123.         local in1 = ceil(runiform() * `=_N')
124.         local in2 = ceil(runiform() * `=_N')
125.         local from = cond(`in1' < `in2', `in1', `in2')
126.         local to   = cond(`in1' > `in2', `in1', `in2')
127.         qui gegen gifin_`fun' = `fun'(rnorm) if rsort < 0 in `from' / `to', by(groupstr groupsub) `options'
128.         qui  egen cifin_`fun' = `fun'(rnorm) if rsort < 0 in `from' / `to', by(groupstr groupsub)
129.         cap noi assert (gifin_`fun' == cifin_`fun') | abs(gifin_`fun' - cifin_`fun') < `tol'
130.         if ( _rc ) {
131.             di as err "`fun' failed! (tol = `tol')"
132.             exit _rc
133.         }
134.         else di as txt "    `fun' was OK"
135.     }
136. 
.     foreach p in 10 30 70 90 {
137.         local in1 = ceil(runiform() * `=_N')
138.         local in2 = ceil(runiform() * `=_N')
139.         local from = cond(`in1' < `in2', `in1', `in2')
140.         local to   = cond(`in1' > `in2', `in1', `in2')
141.         qui gegen g_p`p' = pctile(rnorm) if rsort < 0 in `from' / `to', by(groupstr groupsub) p(`p') `options'
142.         qui  egen c_p`p' = pctile(rnorm) if rsort < 0 in `from' / `to', by(groupstr groupsub) p(`p')
143.         cap noi assert (g_p`p' == c_p`p') | abs(g_p`p' - c_p`p') < `tol'
144.         if ( _rc ) {
145.             di as err "percentile `p' failed! (tol = `tol')"
146.             exit _rc
147.         }
148.         else di as txt "    percentile `p' was OK"
149.     }
150. 
.     local fun tag
151.     {
152.         local in1 = ceil(runiform() * `=_N')
153.         local in2 = ceil(runiform() * `=_N')
154.         local from = cond(`in1' < `in2', `in1', `in2')
155.         local to   = cond(`in1' > `in2', `in1', `in2')
156.         qui gegen gifin_`fun' = `fun'(groupstr groupsub) if rsort < 0 in `from' / `to', v `options'
157.         qui  egen cifin_`fun' = `fun'(groupstr groupsub) if rsort < 0 in `from' / `to'
158.         cap noi assert (gifin_`fun' == cifin_`fun') | abs(gifin_`fun' - cifin_`fun') < `tol'
159.         if ( _rc ) {
160.             di as err "`fun' failed! (tol = `tol')"
161.             exit _rc
162.         }
163.         else di as txt "    `fun' was OK"
164.     }
165. 
.     di ""
166.     di as txt "Passed! checks_consistency_gegen `options'"
167. end

. 
. capture program drop checks_options_gegen

. program checks_options_gegen
  1.     syntax, [tol(real 1e-6) *]
  2.     di _n(1) "{hline 80}" _n(1) "checks_options_gegen `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     sim, n(20000) nj(100) njsub(2) string outmiss
  4. 
.     gegen id = group(groupstr groupsub)
  5.     gegen double mean    = mean   (rnorm),  by(groupstr groupsub) verbose benchmark `options'
  6.     gegen double sum     = sum    (rnorm),  by(groupstr groupsub) `options'
  7.     gegen double median  = median (rnorm),  by(groupstr groupsub) `options'
  8.     gegen double sd      = sd     (rnorm),  by(groupstr groupsub) `options'
  9.     gegen double iqr     = iqr    (rnorm),  by(groupstr groupsub) `options'
 10.     gegen double first   = first  (rnorm),  by(groupstr groupsub) `options' v b
 11.     gegen double last    = last   (rnorm),  by(groupstr groupsub) `options'
 12.     gegen double firstnm = firstnm(rnorm),  by(groupstr groupsub) `options'
 13.     gegen double lastnm  = lastnm (rnorm),  by(groupstr groupsub) `options'
 14.     gegen double q10     = pctile (rnorm),  by(groupstr groupsub) `options' p(10.5)
 15.     gegen double q30     = pctile (rnorm),  by(groupstr groupsub) `options' p(30)
 16.     gegen double q70     = pctile (rnorm),  by(groupstr groupsub) `options' p(70)
 17.     gegen double q90     = pctile (rnorm),  by(groupstr groupsub) `options' p(90.5)
 18. 
.     gcollapse (mean)    g_mean    = rnorm  ///
>               (sum)     g_sum     = rnorm  ///
>               (median)  g_median  = rnorm  ///
>               (sd)      g_sd      = rnorm  ///
>               (iqr)     g_iqr     = rnorm  ///
>               (first)   g_first   = rnorm  ///
>               (last)    g_last    = rnorm  ///
>               (firstnm) g_firstnm = rnorm  ///
>               (lastnm)  g_lastnm  = rnorm  ///
>               (p10.5)   g_q10     = rnorm  ///
>               (p30)     g_q30     = rnorm  ///
>               (p70)     g_q70     = rnorm  ///
>               (p90.5)   g_q90     = rnorm, by(id) benchmark verbose `options' merge double
 19. 
.     foreach fun in mean sum median sd iqr first last firstnm lastnm q10 q30 q70 q90 {
 20.         cap noi assert (g_`fun' == `fun') | abs(g_`fun' - `fun') < `tol'
 21.         if ( _rc ) {
 22.             recast double g_`fun' `fun'
 23.             cap noi assert (g_`fun' == `fun') | abs(g_`fun' - `fun') < `tol'
 24.             if ( _rc ) {
 25.                 di as err "`fun' vs gcollapse failed! (tol = `tol')"
 26.                 exit _rc
 27.             }
 28.         }
 29.         else di as txt "    `fun' vs gcollapse was OK"
 30.     }
 31. 
.     sim, n(20000) nj(100) njsub(2) string outmiss
 32. 
.     local in1 = ceil(runiform() * `=_N')
 33.     local in2 = ceil(runiform() * `=_N')
 34.     local from = cond(`in1' < `in2', `in1', `in2')
 35.     local to   = cond(`in1' > `in2', `in1', `in2')
 36. 
.     gegen id = group(groupstr groupsub) in `from' / `to'
 37.     gegen double mean    = mean   (rnorm) in `from' / `to',  by(groupstr groupsub) verbose benchmark `options'
 38.     gegen double sum     = sum    (rnorm) in `from' / `to',  by(groupstr groupsub) `options'
 39.     gegen double median  = median (rnorm) in `from' / `to',  by(groupstr groupsub) `options'
 40.     gegen double sd      = sd     (rnorm) in `from' / `to',  by(groupstr groupsub) `options'
 41.     gegen double iqr     = iqr    (rnorm) in `from' / `to',  by(groupstr groupsub) `options'
 42.     gegen double first   = first  (rnorm) in `from' / `to',  by(groupstr groupsub) `options' v b
 43.     gegen double last    = last   (rnorm) in `from' / `to',  by(groupstr groupsub) `options'
 44.     gegen double firstnm = firstnm(rnorm) in `from' / `to',  by(groupstr groupsub) `options'
 45.     gegen double lastnm  = lastnm (rnorm) in `from' / `to',  by(groupstr groupsub) `options'
 46.     gegen double q10     = pctile (rnorm) in `from' / `to',  by(groupstr groupsub) `options' p(10.5)
 47.     gegen double q30     = pctile (rnorm) in `from' / `to',  by(groupstr groupsub) `options' p(30)
 48.     gegen double q70     = pctile (rnorm) in `from' / `to',  by(groupstr groupsub) `options' p(70)
 49.     gegen double q90     = pctile (rnorm) in `from' / `to',  by(groupstr groupsub) `options' p(90.5)
 50. 
.     gcollapse (mean)    g_mean    = rnorm  ///
>               (sum)     g_sum     = rnorm  ///
>               (median)  g_median  = rnorm  ///
>               (sd)      g_sd      = rnorm  ///
>               (iqr)     g_iqr     = rnorm  ///
>               (first)   g_first   = rnorm  ///
>               (last)    g_last    = rnorm  ///
>               (firstnm) g_firstnm = rnorm  ///
>               (lastnm)  g_lastnm  = rnorm  ///
>               (p10.5)   g_q10     = rnorm  ///
>               (p30)     g_q30     = rnorm  ///
>               (p70)     g_q70     = rnorm  ///
>               (p90.5)   g_q90     = rnorm in `from' / `to', by(id) benchmark verbose `options' merge double
 51. 
.     foreach fun in mean sum median sd iqr first last firstnm lastnm q10 q30 q70 q90 {
 52.         cap noi assert (g_`fun' == `fun') | abs(g_`fun' - `fun') < `tol'
 53.         if ( _rc ) {
 54.             recast double g_`fun' `fun'
 55.             cap noi assert (g_`fun' == `fun') | abs(g_`fun' - `fun') < `tol'
 56.             if ( _rc ) {
 57.                 di as err "`fun' vs gcollapse (in) failed! (tol = `tol')"
 58.                 exit _rc
 59.             }
 60.         }
 61.         else di as txt "    `fun' vs gcollapse (in) was OK"
 62.     }
 63. 
.     sim, n(20000) nj(100) njsub(2) string outmiss
 64. 
.     local in1 = ceil(runiform() * `=_N')
 65.     local in2 = ceil(runiform() * `=_N')
 66.     local from = cond(`in1' < `in2', `in1', `in2')
 67.     local to   = cond(`in1' > `in2', `in1', `in2')
 68.     qui count if rsort < 0 in `from' / `to'
 69.     if !( `r(N)' < `=_N' ) {
 70.         local from = 100
 71.         local to = 19000
 72.     }
 73. 
.     gegen id = group(groupstr groupsub)   if rsort < 0 in `from' / `to'
 74.     gegen double mean    = mean   (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) verbose benchmark `options'
 75.     gegen double sum     = sum    (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options'
 76.     gegen double median  = median (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options'
 77.     gegen double sd      = sd     (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options'
 78.     gegen double iqr     = iqr    (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options'
 79.     gegen double first   = first  (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options' v b
 80.     gegen double last    = last   (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options'
 81.     gegen double firstnm = firstnm(rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options'
 82.     gegen double lastnm  = lastnm (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options'
 83.     gegen double q10     = pctile (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options' p(10.5)
 84.     gegen double q30     = pctile (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options' p(30)
 85.     gegen double q70     = pctile (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options' p(70)
 86.     gegen double q90     = pctile (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options' p(90.5)
 87. 
.     keep if rsort < 0 in `from' / `to'
 88.     gcollapse (mean)    g_mean    = rnorm  ///
>               (sum)     g_sum     = rnorm  ///
>               (median)  g_median  = rnorm  ///
>               (sd)      g_sd      = rnorm  ///
>               (iqr)     g_iqr     = rnorm  ///
>               (first)   g_first   = rnorm  ///
>               (last)    g_last    = rnorm  ///
>               (firstnm) g_firstnm = rnorm  ///
>               (lastnm)  g_lastnm  = rnorm  ///
>               (p10.5)   g_q10     = rnorm  ///
>               (p30)     g_q30     = rnorm  ///
>               (p70)     g_q70     = rnorm  ///
>               (p90.5)   g_q90     = rnorm, by(id) benchmark verbose `options' merge double
 89. 
.     foreach fun in mean sum median sd iqr first last firstnm lastnm q10 q30 q70 q90 {
 90.         cap noi assert (g_`fun' == `fun') | abs(g_`fun' - `fun') < `tol'
 91.         if ( _rc ) {
 92.             recast double g_`fun' `fun'
 93.             cap noi assert (g_`fun' == `fun') | abs(g_`fun' - `fun') < `tol'
 94.             if ( _rc ) {
 95.                 di as err "`fun' vs gcollapse (if in) failed! (tol = `tol')"
 96.                 exit _rc
 97.             }
 98.         }
 99.         else di as txt "    `fun' vs gcollapse (if in) was OK"
100.     }
101. 
.     di ""
102.     di as txt "Passed! checks_options_gegen `options'"
103. end

. ***********************************************************************
. *                           Data simulation                           *
. ***********************************************************************
. 
. capture program drop bench_sim

. program bench_sim
  1.     syntax, [n(int 100) nj(int 10) njsub(int 2) nvars(int 2)]
  2.     local offset = -123456
  3. 
.     clear
  4.     set obs `n'
  5.     gen group  = ceil(`nj' *  _n / _N) + `offset'
  6.     gen long grouplong = ceil(`nj' *  _n / _N) + `offset'
  7.     bys group: gen groupsub      = ceil(`njsub' *  _n / _N)
  8.     bys group: gen groupsubfloat = ceil(`njsub' *  _n / _N) + 0.5
  9.     tostring group, gen(groupstr)
 10.     replace groupstr = "i am a modestly long string" + groupstr
 11. 
.     forvalues i = 1 / `nvars' {
 12.         gen x`i' = rnormal()
 13.     }
 14.     gen rsort = runiform() - 0.5
 15.     sort rsort
 16. 
.     replace group = . if runiform() < 0.1
 17.     replace rsort = . if runiform() < 0.1
 18. end

. 
. capture program drop bench_sim_ftools

. program bench_sim_ftools
  1.     args n k
  2.     clear
  3.     qui set obs `n'
  4.     noi di "(obs set)"
  5.     loc m = ceil(`n' / 10)
  6.     gen long x1  = ceil(uniform() * 10000) * 100
  7.     gen int  x2  = ceil(uniform() * 3000)
  8.     gen byte x3  = ceil(uniform() * 100)
  9.     gen str  x4  = "u" + string(ceil(uniform() * 100), "%5.0f")
 10.     gen long x5  = ceil(uniform() * 5000)
 11.     gen str  x6  = "u" + string(ceil(uniform() * 10), "%5.0f")
 12.     noi di "(Xs set)"
 13.     forv i = 1 / `k' {
 14.         gen double y`i' = 123.456 + runiform()
 15.     }
 16.     loc obs_k = ceil(`c(N)' / 1000)
 17. end

. 
. ***********************************************************************
. *                       ftools-style benchmarks                       *
. ***********************************************************************
. 
. capture program drop bench_ftools

. program bench_ftools
  1.     syntax anything, by(str) [kvars(int 5) stats(str) kmin(int 4) kmax(int 7) *]
  2.     if ("`stats'" == "") local stats sum
  3. 
.     local collapse ""
  4.     foreach stat of local stats {
  5.         local collapse `collapse' (`stat')
  6.         foreach var of local anything {
  7.             local collapse `collapse' `stat'_`var' = `var'
  8.         }
  9.     }
 10. 
.     * First set of benchmarks: default vs collapse, fcollapse
.     * -------------------------------------------------------
. 
.     local i = 0
 11.     local N ""
 12.     di "Benchmarking N for J = 100; by(`by')"
 13.     di "    vars  = `anything'"
 14.     di "    stats = `stats'"
 15.     forvalues k = `kmin' / `kmax' {
 16.         mata: printf("    `:di %21.0gc `:di 2 * 10^`k'''")
 17.         local N `N' `:di %21.0g 2 * 10^`k''
 18.         qui bench_sim_ftools `:di %21.0g 2 * 10^`k'' `kvars'
 19.         preserve
 20.             local ++i
 21.             timer clear
 22.             timer on `i'
 23.             mata: printf(" gcollapse ")
 24.                 qui gcollapse `collapse', by(`by')
 25.             timer off `i'
 26.             qui timer list
 27.             local r`i' = `r(t`i')'
 28.             mata: printf(" (`r`i'') ")
 29.         restore, preserve
 30.             local ++i
 31.             timer clear
 32.             timer on `i'
 33.             mata: printf(" collapse ")
 34.                 qui collapse `collapse', by(`by')
 35.             timer off `i'
 36.             qui timer list
 37.             local r`i' = `r(t`i')'
 38.             mata: printf(" (`r`i'') ")
 39.         restore, preserve
 40.             local ++i
 41.             timer clear
 42.             timer on `i'
 43.             mata: printf(" fcollapse ")
 44.                 qui fcollapse `collapse', by(`by')
 45.             timer off `i'
 46.             qui timer list
 47.             local r`i' = `r(t`i')'
 48.             mata: printf(" (`r`i'')\n")
 49.         restore
 50.     }
 51. 
.     local i = 1
 52.     di "Results varying N for J = 100; by(`by')"
 53.     di "|              N | gcollapse |  collapse | fcollapse | ratio (f/g) | ratio (c/g) |"
 54.     di "| -------------- | --------- | --------- | --------- | ----------- | ----------- |"
 55.     foreach nn in `N' {
 56.         local ii  = `i' + 1
 57.         local iii = `i' + 2
 58.         di "| `:di %14.0gc `nn'' | `:di %9.2f `r`i''' | `:di %9.2f `r`ii''' | `:di %9.2f `r`iii''' | `:di %11.2f `r`iii'' /
>  `r`i''' | `:di %11.2f `r`ii'' / `r`i''' |"
 59.         local ++i
 60.         local ++i
 61.         local ++i
 62.     }
 63.     timer clear
 64. end

. 
. ***********************************************************************
. *                             benchmarks                              *
. ***********************************************************************
. 
. capture program drop bench_sample_size

. program bench_sample_size
  1.     syntax anything, by(str) [nj(int 10) pct(str) stats(str) kmin(int 4) kmax(int 7) *]
  2.     * NOTE: sometimes, fcollapse can't do sd
.     if ("`stats'" == "") local stats sum mean max min count percent first last firstnm lastnm
  3.     local stats `stats' `pct'
  4. 
.     local collapse ""
  5.     foreach stat of local stats {
  6.         local collapse `collapse' (`stat')
  7.         foreach var of local anything {
  8.             local collapse `collapse' `stat'_`var' = `var'
  9.         }
 10.     }
 11. 
.     * First set of benchmarks: default vs collapse, fcollapse
.     * -------------------------------------------------------
. 
.     local i = 0
 12.     local N ""
 13.     di "Benchmarking N for J = `nj'; by(`by')"
 14.     di "    vars  = `anything'"
 15.     di "    stats = `stats'"
 16.     forvalues k = `kmin' / `kmax' {
 17.         mata: printf("    `:di %21.0gc `:di 2 * 10^`k'''")
 18.         local N `N' `:di %21.0g 2 * 10^`k''
 19.         qui bench_sim, n(`:di %21.0g 2 * 10^`k'') nj(`nj') njsub(2) nvars(2)
 20.         preserve
 21.             local ++i
 22.             timer clear
 23.             timer on `i'
 24.             mata: printf(" gcollapse ")
 25.                 qui gcollapse `collapse', by(`by')
 26.             timer off `i'
 27.             qui timer list
 28.             local r`i' = `r(t`i')'
 29.             mata: printf(" (`r`i'') ")
 30.         restore, preserve
 31.             local ++i
 32.             timer clear
 33.             timer on `i'
 34.             mata: printf(" collapse ")
 35.                 qui collapse `collapse', by(`by')
 36.             timer off `i'
 37.             qui timer list
 38.             local r`i' = `r(t`i')'
 39.             mata: printf(" (`r`i'') ")
 40.         restore, preserve
 41.             local ++i
 42.             timer clear
 43.             timer on `i'
 44.             mata: printf(" fcollapse ")
 45.                 qui fcollapse `collapse', by(`by')
 46.             timer off `i'
 47.             qui timer list
 48.             local r`i' = `r(t`i')'
 49.             mata: printf(" (`r`i'')\n")
 50.         restore
 51.     }
 52. 
.     local i = 1
 53.     di "Results varying N for J = `nj'; by(`by')"
 54.     di "|              N | gcollapse |  collapse | fcollapse | ratio (f/g) | ratio (c/g) |"
 55.     di "| -------------- | --------- | --------- | --------- | ----------- | ----------- |"
 56.     foreach nn in `N' {
 57.         local ii  = `i' + 1
 58.         local iii = `i' + 2
 59.         di "| `:di %14.0gc `nn'' | `:di %9.2f `r`i''' | `:di %9.2f `r`ii''' | `:di %9.2f `r`iii''' | `:di %11.2f `r`iii'' /
>  `r`i''' | `:di %11.2f `r`ii'' / `r`i''' |"
 60.         local ++i
 61.         local ++i
 62.         local ++i
 63.     }
 64.     timer clear
 65. end

. 
. capture program drop bench_group_size

. program bench_group_size
  1.     syntax anything, by(str) [pct(str) stats(str) obsexp(int 6) kmin(int 1) kmax(int 6) *]
  2.     * NOTE: fcollapse can't do sd, apparently
.     if ("`stats'" == "") local stats sum mean max min count percent first last firstnm lastnm
  3.     local stats `stats' `pct'
  4. 
.     local collapse ""
  5.     foreach stat of local stats {
  6.         local collapse `collapse' (`stat')
  7.         foreach var of local anything {
  8.             local collapse `collapse' `stat'_`var' = `var'
  9.         }
 10.     }
 11. 
.     * First set of benchmarks: default vs collapse, fcollapse
.     * -------------------------------------------------------
. 
.     local nstr = trim("`:di %21.0gc `:di 5 * 10^`obsexp'''")
 12.     local i = 0
 13.     local N ""
 14.     di "Benchmarking J for N = `nstr'; by(`by')"
 15.     di "    vars  = `anything'"
 16.     di "    stats = `stats'"
 17.     forvalues k = `kmin' / `kmax' {
 18.         mata: printf("    `:di %21.0gc `:di 10^`k'''")
 19.         local N `N' `:di %21.0g 10^`k''
 20.         qui bench_sim, n(`:di %21.0g 5 * 10^`obsexp'') nj(`:di %21.0g 10^`k'') njsub(2) nvars(2)
 21.         preserve
 22.             local ++i
 23.             timer clear
 24.             timer on `i'
 25.             mata: printf(" gcollapse ")
 26.                 qui gcollapse `collapse', by(`by')
 27.             timer off `i'
 28.             qui timer list
 29.             local r`i' = `r(t`i')'
 30.             mata: printf(" (`r`i'') ")
 31.         restore, preserve
 32.             local ++i
 33.             timer clear
 34.             timer on `i'
 35.             mata: printf(" collapse ")
 36.                 qui collapse `collapse', by(`by')
 37.             timer off `i'
 38.             qui timer list
 39.             local r`i' = `r(t`i')'
 40.             mata: printf(" (`r`i'') ")
 41.         restore, preserve
 42.             local ++i
 43.             timer clear
 44.             timer on `i'
 45.             mata: printf(" fcollapse ")
 46.                 qui fcollapse `collapse', by(`by')
 47.             timer off `i'
 48.             qui timer list
 49.             local r`i' = `r(t`i')'
 50.             mata: printf(" (`r`i'')\n")
 51.         restore
 52.     }
 53. 
.     local i = 1
 54.     di "Results varying J for N = `nstr'; by(`by')"
 55.     di "|              J | gcollapse |  collapse | fcollapse | ratio (f/g) | ratio (c/g) |"
 56.     di "| -------------- | --------- | --------- | --------- | ----------- | ----------- |"
 57.     foreach nn in `N' {
 58.         local ii  = `i' + 1
 59.         local iii = `i' + 2
 60.         di "| `:di %14.0gc `nn'' | `:di %9.2f `r`i''' | `:di %9.2f `r`ii''' | `:di %9.2f `r`iii''' | `:di %11.2f `r`iii'' /
>  `r`i''' | `:di %11.2f `r`ii'' / `r`i''' |"
 61.         local ++i
 62.         local ++i
 63.         local ++i
 64.     }
 65.     timer clear
 66. end

. 
. ***********************************************************************
. *                      Benchmark fcollapse only                       *
. ***********************************************************************
. 
. capture program drop bench_switch_fcoll

. program bench_switch_fcoll
  1.     syntax anything, style(str) [*]
  2.     if !inlist("`style'", "ftools", "gtools") {
  3.         di as error "Don't know benchmark style '`style''; available: ftools, gtools"
  4.         exit 198
  5.     }
  6. 
.     local 0 `anything', `options'
  7.     if ( "`style'" == "ftools" ) {
  8.         syntax anything, by(str) [kvars(int 5) stats(str) kmin(int 4) kmax(int 7) *]
  9.         if ("`stats'" == "") local stats sum
 10.         local i = 0
 11.         local N ""
 12.         local L N
 13.         local dstr J = 100
 14.         di "Benchmarking `L' for `dstr'; by(`by')"
 15.         di "    vars  = `anything'"
 16.         di "    stats = `stats'"
 17. 
.         mata: print_matrix = J(1, 0, "")
 18.         mata: sim_matrix   = J(1, 0, "")
 19.         forvalues k = `kmin' / `kmax' {
 20.             mata: print_matrix = print_matrix, "    `:di %21.0gc `:di 2 * 10^`k'''"
 21.             mata: sim_matrix   = sim_matrix,   "bench_sim_ftools `:di %21.0g 2 * 10^`k'' `kvars'"
 22.             local N `N' `:di %21.0g 2 * 10^`k''
 23.         }
 24.     }
 25.     else {
 26.         * syntax anything, by(str) [margin(str) nj(int 10) pct(str) stats(str) obsexp(int 6) kmin(int 1) kmax(int 6) *]
.         syntax anything, by(str) [margin(str) nj(int 10) pct(str) stats(str) obsexp(int 6) kmin(int 4) kmax(int 7) nvars(int 2
> ) *]
 27.         if !inlist("`margin'", "N", "J") {
 28.             di as error "Don't know margin '`margin''; available: N, J"
 29.             exit 198
 30.         }
 31. 
.         if ("`stats'" == "") local stats sum mean max min count percent first last firstnm lastnm
 32.         local stats `stats' `pct'
 33.         local i = 0
 34.         local N ""
 35.         local L `margin'
 36.         local jstr = trim("`:di %21.0gc `nj''")
 37.         local nstr = trim("`:di %21.0gc `:di 5 * 10^`obsexp'''")
 38.         local dstr = cond("`L'" == "N", "J = `jstr'", "N = `nstr'")
 39.         di "Benchmarking `L' for `dstr'; by(`by')"
 40.         di "    vars  = `anything'"
 41.         di "    stats = `stats'"
 42. 
.         mata: print_matrix = J(1, 0, "")
 43.         mata: sim_matrix   = J(1, 0, "")
 44.         forvalues k = `kmin' / `kmax' {
 45.             if ( "`L'" == "N" ) {
 46.                 mata: print_matrix = print_matrix, "    `:di %21.0gc `:di 2 * 10^`k'''"
 47.                 mata: sim_matrix   = sim_matrix, "bench_sim, n(`:di %21.0g 2 * 10^`k'') nj(`nj') njsub(2) nvars(`nvars')"
 48.             }
 49.             else {
 50.                 mata: print_matrix = print_matrix, "    `:di %21.0gc `:di 10^`k'''"
 51.                 mata: sim_matrix   = sim_matrix, "bench_sim, n(`:di %21.0g 5 * 10^`obsexp'') nj(`:di %21.0g 10^`k'') njsub(
> 2) nvars(`nvars')"
 52.             }
 53.             local J `J' `:di %21.0g 10^`k''
 54.             local N `N' `:di %21.0g 2 * 10^`k''
 55.         }
 56.     }
 57. 
.     local collapse ""
 58.     foreach stat of local stats {
 59.         local collapse `collapse' (`stat')
 60.         foreach var of local anything {
 61.             local collapse `collapse' `stat'_`var' = `var'
 62.         }
 63.     }
 64. 
.     forvalues k = 1 / `:di `kmax' - `kmin' + 1' {
 65.         mata: st_local("sim",   sim_matrix[`k'])
 66.         qui `sim'
 67.         mata: printf(print_matrix[`k'])
 68.         preserve
 69.             local ++i
 70.             timer clear
 71.             timer on `i'
 72.             mata: printf(" gcollapse-default ")
 73.                 qui gcollapse `collapse', by(`by') `options' fast
 74.             timer off `i'
 75.             qui timer list
 76.             local r`i' = `r(t`i')'
 77.             mata: printf(" (`r`i'') ")
 78.         restore, preserve
 79.             local ++i
 80.             timer clear
 81.             timer on `i'
 82.             mata: printf(" fcollapse ")
 83.                 qui fcollapse `collapse', by(`by') fast
 84.             timer off `i'
 85.             qui timer list
 86.             local r`i' = `r(t`i')'
 87.             mata: printf(" (`r`i'') \n")
 88.         restore
 89.     }
 90. 
.     local i = 1
 91.     di "Results varying `L' for `dstr'; by(`by')"
 92.     di "|              `L' | gcollapse | fcollapse | ratio (f/g) |"
 93.     di "| -------------- | --------- | --------- | ----------- |"
 94.     foreach nn in ``L'' {
 95.         local ii  = `i' + 1
 96.         di "| `:di %14.0gc `nn'' | `:di %9.2f `r`i''' | `:di %9.2f `r`ii''' | `:di %11.2f `r`ii'' / `r`i''' |"
 97.         local ++i
 98.         local ++i
 99.     }
100.     timer clear
101. end

. 
. * Benchmarks in the README
. * ------------------------
. 
. * bench_ftools y1 y2 y3 y4 y5 y6 y7 y8 y9 y10 y11 y12 y13 y14 y15, by(x3) kmin(4) kmax(7) kvars(15)
. * bench_ftools y1 y2 y3,   by(x3) kmin(4) kmax(7) kvars(3) stats(mean median)
. * bench_ftools y1 y2 y3 y4 y5 y6 y7 y8 y9 y10, by(x3) kmin(4) kmax(7) kvars(10) stats(mean median min max)
. * bench_sample_size x1 x2, by(groupstr) kmin(4) kmax(7) pct(median iqr p23 p77)
. * bench_group_size x1 x2,  by(groupstr) kmin(1) kmax(6) pct(median iqr p23 p77) obsexp(6) 
. 
. * Misc
. * ----
. 
. * bench_ftools y1 y2 y3 y4 y5 y6 y7 y8 y9 y10 y11 y12 y13 y14 y15, by(x3) kmin(5) kmax(8) kvars(15)
. * bench_ftools y1 y2 y3,   by(x3) kmin(5) kmax(8) kvars(3) stats(mean median)
. * bench_ftools y1 y2 y3 y4 y5 y6 y7 y8 y9 y10, by(x3) kmin(5) kmax(8) kvars(10) stats(mean median min max)
. * bench_sample_size x1 x2, by(groupstr) kmin(5) kmax(8) pct(median iqr p23 p77)
. * bench_group_size x1 x2,  by(groupstr) kmin(1) kmax(7) pct(median iqr p23 p77) obsexp(7)
. 
. * ---------------------------------------------------------------------
. * Run the things
. 
. main, cap noi checks test
Start: 13:58:51 18 Jun 2017

--------------------------------------------------------------------------------
checks_byvars_gcollapse debug_force_single
--------------------------------------------------------------------------------


    Variable |       Obs        Mean    Std. Dev.       Min        Max
-------------+--------------------------------------------------------
       rsort |      1000    .0006117    .2971319  -.4988952   .4985919
Obs = 1,000; Groups = 250
  group was float now int
  groupsub was float now byte
  grouplong was long now int
  (7,000 bytes saved)
(note: failed to load multi-threaded version; using fallback)
(warning: forcing non-multi-threaded version)
In memory: groupsub rnorm sum sd
Using sole integer by variable as hash.
counting sort on hash; min = 'lu, max = 'lu
N = 'lu; 'lu balanced groups of size 'lu
(note: failed to load multi-threaded version; using fallback)
(warning: forcing non-multi-threaded version)
In memory: group rnorm sum sd
Using sole integer by variable as hash.
counting sort on hash; min = 'lu, max = 'lu
N = 'lu; 'lu balanced groups of size 'lu
(note: failed to load multi-threaded version; using fallback)
(warning: forcing non-multi-threaded version)
In memory: groupstr rnorm sum sd
Using 128-bit hash to index string by variable.
radix sort on hash: loops = 4, bits = 16, shift = 'lu
N = 'lu; 'lu balanced groups of size 'lu
(note: failed to load multi-threaded version; using fallback)
(warning: forcing non-multi-threaded version)
In memory: rnorm grouplong sum sd
Using sole integer by variable as hash.
counting sort on hash; min = 'lu, max = 'lu
N = 'lu; 'lu balanced groups of size 'lu
(note: failed to load multi-threaded version; using fallback)
(warning: forcing non-multi-threaded version)
In memory: groupsub rnorm sum sd
Using sole integer by variable as hash.
counting sort on hash; min = 'lu, max = 'lu
N = 'lu; 'lu balanced groups of size 'lu
(note: failed to load multi-threaded version; using fallback)
(warning: forcing non-multi-threaded version)
In memory: group groupsub rnorm sum sd
Hashing 2 integer by variables to whole-nubmer index.
counting sort on hash; min = 'lu, max = 'lu
N = 'lu; 'lu balanced groups of size 'lu
(note: failed to load multi-threaded version; using fallback)
(warning: forcing non-multi-threaded version)
In memory: groupsub rnorm grouplong sum sd
Hashing 2 integer by variables to whole-nubmer index.
counting sort on hash; min = 'lu, max = 'lu
N = 'lu; 'lu unbalanced groups of sizes 'lu to 'lu
(note: failed to load multi-threaded version; using fallback)
(warning: forcing non-multi-threaded version)
In memory: groupstr groupsub rnorm sum sd
Using 128-bit hash to index 2 by variables (string and numeric).
radix sort on hash: loops = 4, bits = 16, shift = 'lu
N = 'lu; 'lu balanced groups of size 'lu

Passed! checks_byvars_gcollapse debug_force_single

--------------------------------------------------------------------------------
checks_options_gcollapse debug_force_single
--------------------------------------------------------------------------------


    Variable |       Obs        Mean    Std. Dev.       Min        Max
-------------+--------------------------------------------------------
       rsort |       181   -.0118814     .276691  -.4938449   .4965275
Obs = 200; Groups = 10
  group was float now byte
  groupsub was float now byte
  grouplong was long now byte
  (1,800 bytes saved)
(note: failed to load multi-threaded version; using fallback)
(warning: forcing non-multi-threaded version)
Parsed by variables, sources, and targets; .071 seconds
In memory: groupstr mean mean2 count count2 median median2 iqr iqr2
Generated additional targets; 0 seconds
        Plugin step 1: stata parsing done; 0.000 seconds.
Using 128-bit hash to index string by variable.
        Plugin step 2: Hashed by variables; 0.000 seconds.
radix sort on hash: loops = 4, bits = 16, shift = 'lu
        Plugin step 3: Sorted on integer-only hash index; 0.000 seconds.
        Plugin step 4: Set up variables for main group loop; 0.000 seconds.
N = 'lu; 'lu balanced groups of size 'lu
        Plugin step 5.1: Read source variables sequentially; 0.000 seconds.
        Plugin step 5.2: Collapsed source variables; 0.000 seconds.
        Plugin step 6: Copied collapsed variables back to stata; 0.000 seconds.
The plugin executed; 0 seconds
Program exit executed; 0 seconds
The program executed; .071 seconds
(note: failed to load multi-threaded version; using fallback)
(warning: forcing non-multi-threaded version)
In memory: groupstr mean
Using 128-bit hash to index string by variable.
radix sort on hash: loops = 4, bits = 16, shift = 'lu
N = 'lu; 'lu balanced groups of size 'lu
(note: failed to load multi-threaded version; using fallback)
(warning: forcing non-multi-threaded version)
In memory: groupstr mean mean2 count count2 median median2 iqr iqr2
Using 128-bit hash to index string by variable.
radix sort on hash: loops = 4, bits = 16, shift = 'lu
N = 'lu; 'lu balanced groups of size 'lu
(note: failed to load multi-threaded version; using fallback)
(warning: forcing non-multi-threaded version)
In memory: groupstr mean mean2 count count2 median median2 iqr iqr2
Using 128-bit hash to index string by variable.
radix sort on hash: loops = 4, bits = 16, shift = 'lu
N = 'lu; 'lu balanced groups of size 'lu
(note: failed to load multi-threaded version; using fallback)
(warning: forcing non-multi-threaded version)
Parsed by variables, sources, and targets; .024 seconds
In memory: groupstr mean mean2 count count2 median median2 iqr iqr2
Generated additional targets; 0 seconds
        Plugin step 1: stata parsing done; 0.000 seconds.
Using 128-bit hash to index string by variable.
        Plugin step 2: Hashed by variables; 0.000 seconds.
radix sort on hash: loops = 4, bits = 16, shift = 'lu
        Plugin step 3: Sorted on integer-only hash index; 0.000 seconds.
        Plugin step 4: Set up variables for main group loop; 0.000 seconds.
N = 'lu; 'lu balanced groups of size 'lu
        Plugin step 5.1: Read source variables sequentially; 0.000 seconds.
        Plugin step 5.2: Collapsed source variables; 0.000 seconds.
        Plugin step 6: Copied collapsed variables back to stata; 0.000 seconds.
The plugin executed; .023 seconds
Program exit executed; 0 seconds
The program executed; .047 seconds
(warning: forcing non-multi-threaded version)
(warning: forcing non-multi-threaded version)

     +-----------------------------------------------------------------------------------------------------------------------+
  1. | group |                     groupstr | groupsub | groupf~t |     rsort |     rnorm | groupl~g |      mean |     mean2 |
     |    10 | i am a modesly long string10 |        2 |      2.5 | -.4938449 | -.0040006 |        1 |  .0232557 |  .0232557 |
     |-----------------------------------------------------------------------------------------------------------------------|
     |     count      |     count2      |        median      |        median2      |           iqr      |          iqr2      |
     |        16      |         16      |     -.1594192      |      -.1594192      |      1.541633      |      1.541633      |
     +-----------------------------------------------------------------------------------------------------------------------+

     +-----------------------------------------------------------------------------------------------------------------------+
  2. | group |                     groupstr | groupsub | groupf~t |     rsort |     rnorm | groupl~g |      mean |     mean2 |
     |     6 |  i am a modesly long string6 |        1 |      1.5 |         . | -1.418848 |        1 | -.1650908 | -.1650908 |
     |-----------------------------------------------------------------------------------------------------------------------|
     |     count      |     count2      |        median      |        median2      |           iqr      |          iqr2      |
     |        19      |         19      |      .2513901      |       .2513901      |      2.087131      |      2.087131      |
     +-----------------------------------------------------------------------------------------------------------------------+

     +-----------------------------------------------------------------------------------------------------------------------+
  3. | group |                     groupstr | groupsub | groupf~t |     rsort |     rnorm | groupl~g |      mean |     mean2 |
     |     9 |  i am a modesly long string9 |        1 |      1.5 | -.4890387 |  .6816186 |        1 | -.1266331 | -.1266331 |
     |-----------------------------------------------------------------------------------------------------------------------|
     |     count      |     count2      |        median      |        median2      |           iqr      |          iqr2      |
     |        19      |         19      |      .0585369      |       .0585369      |      1.085953      |      1.085953      |
     +-----------------------------------------------------------------------------------------------------------------------+

     +-----------------------------------------------------------------------------------------------------------------------+
  4. | group |                     groupstr | groupsub | groupf~t |     rsort |     rnorm | groupl~g |      mean |     mean2 |
     |     6 |  i am a modesly long string6 |        2 |      2.5 | -.4832857 | -2.196897 |        1 | -.1650908 | -.1650908 |
     |-----------------------------------------------------------------------------------------------------------------------|
     |     count      |     count2      |        median      |        median2      |           iqr      |          iqr2      |
     |        19      |         19      |      .2513901      |       .2513901      |      2.087131      |      2.087131      |
     +-----------------------------------------------------------------------------------------------------------------------+

     +-----------------------------------------------------------------------------------------------------------------------+
  5. | group |                     groupstr | groupsub | groupf~t |     rsort |     rnorm | groupl~g |      mean |     mean2 |
     |     2 |  i am a modesly long string2 |        2 |      2.5 | -.4820115 | -.4962967 |        1 |  .0398927 |  .0398927 |
     |-----------------------------------------------------------------------------------------------------------------------|
     |     count      |     count2      |        median      |        median2      |           iqr      |          iqr2      |
     |        18      |         18      |      .1249817      |       .1249817      |      1.751675      |      1.751675      |
     +-----------------------------------------------------------------------------------------------------------------------+

     +-----------------------------------------------------------------------------------------------------------------------+
  6. | group |                     groupstr | groupsub | groupf~t |     rsort |     rnorm | groupl~g |      mean |     mean2 |
     |     5 |  i am a modesly long string5 |        1 |      1.5 | -.4809864 | -1.165238 |        1 |  .2724212 |  .2724212 |
     |-----------------------------------------------------------------------------------------------------------------------|
     |     count      |     count2      |        median      |        median2      |           iqr      |          iqr2      |
     |        20      |         20      |      .3673322      |       .3673322      |       1.89893      |       1.89893      |
     +-----------------------------------------------------------------------------------------------------------------------+

     +-----------------------------------------------------------------------------------------------------------------------+
  7. | group |                     groupstr | groupsub | groupf~t |     rsort |     rnorm | groupl~g |      mean |     mean2 |
     |    10 | i am a modesly long string10 |        2 |      2.5 | -.4758189 |  .6841249 |        1 |  .0232557 |  .0232557 |
     |-----------------------------------------------------------------------------------------------------------------------|
     |     count      |     count2      |        median      |        median2      |           iqr      |          iqr2      |
     |        16      |         16      |     -.1594192      |      -.1594192      |      1.541633      |      1.541633      |
     +-----------------------------------------------------------------------------------------------------------------------+

     +-----------------------------------------------------------------------------------------------------------------------+
  8. | group |                     groupstr | groupsub | groupf~t |     rsort |     rnorm | groupl~g |      mean |     mean2 |
     |     7 |  i am a modesly long string7 |        1 |      1.5 | -.4624406 | -.3743784 |        1 | -.5757579 | -.5757579 |
     |-----------------------------------------------------------------------------------------------------------------------|
     |     count      |     count2      |        median      |        median2      |           iqr      |          iqr2      |
     |        18      |         18      |      -.449741      |       -.449741      |      1.779376      |      1.779376      |
     +-----------------------------------------------------------------------------------------------------------------------+

     +-----------------------------------------------------------------------------------------------------------------------+
  9. | group |                     groupstr | groupsub | groupf~t |     rsort |     rnorm | groupl~g |      mean |     mean2 |
     |     6 |  i am a modesly long string6 |        1 |      1.5 | -.4546936 | -2.443357 |        1 | -.1650908 | -.1650908 |
     |-----------------------------------------------------------------------------------------------------------------------|
     |     count      |     count2      |        median      |        median2      |           iqr      |          iqr2      |
     |        19      |         19      |      .2513901      |       .2513901      |      2.087131      |      2.087131      |
     +-----------------------------------------------------------------------------------------------------------------------+

     +-----------------------------------------------------------------------------------------------------------------------+
 10. | group |                     groupstr | groupsub | groupf~t |     rsort |     rnorm | groupl~g |      mean |     mean2 |
     |     1 |  i am a modesly long string1 |        2 |      2.5 | -.4528995 | -.5074096 |        1 | -.0981773 | -.0981773 |
     |-----------------------------------------------------------------------------------------------------------------------|
     |     count      |     count2      |        median      |        median2      |           iqr      |          iqr2      |
     |        18      |         18      |      .0134574      |       .0134574      |      1.122901      |      1.122901      |
     +-----------------------------------------------------------------------------------------------------------------------+
(note: failed to load multi-threaded version; using fallback)
(warning: forcing non-multi-threaded version)
Parsed by variables, sources, and targets; .047 seconds
In memory: groupstr groupsub mean mean2 count count2 median median2 iqr iqr2
Generated additional targets; 0 seconds
        Plugin step 1: stata parsing done; 0.000 seconds.
Using 128-bit hash to index 2 by variables (string and numeric).
        Plugin step 2: Hashed by variables; 0.000 seconds.
radix sort on hash: loops = 4, bits = 16, shift = 'lu
        Plugin step 3: Sorted on integer-only hash index; 0.000 seconds.
        Plugin step 4: Set up variables for main group loop; 0.000 seconds.
N = 'lu; 'lu balanced groups of size 'lu
        Plugin step 5.1: Read source variables sequentially; 0.000 seconds.
        Plugin step 5.2: Collapsed source variables; 0.000 seconds.
        Plugin step 6: Copied collapsed variables back to stata; 0.000 seconds.
The plugin executed; 0 seconds
Program exit executed; 0 seconds
The program executed; .047 seconds

     +---------------------------------------------------------------------------------------------------------------------+
  1. |                     groupstr | groupsub |      mean |     mean2 | count | count2 |    median |   median2 |      iqr |
     |  i am a modesly long string1 |        1 | -.1643312 | -.1643312 |     9 |      9 | -.0912356 | -.0912356 | .4092174 |
     |---------------------------------------------------------------------------------------------------------------------|
     |                                                          iqr2                                                       |
     |                                                      .4092174                                                       |
     +---------------------------------------------------------------------------------------------------------------------+

     +---------------------------------------------------------------------------------------------------------------------+
  2. |                     groupstr | groupsub |      mean |     mean2 | count | count2 |    median |   median2 |      iqr |
     |  i am a modesly long string1 |        2 | -.0320235 | -.0320235 |     9 |      9 |  .3434474 |  .3434474 |  1.19036 |
     |---------------------------------------------------------------------------------------------------------------------|
     |                                                          iqr2                                                       |
     |                                                       1.19036                                                       |
     +---------------------------------------------------------------------------------------------------------------------+

     +---------------------------------------------------------------------------------------------------------------------+
  3. |                     groupstr | groupsub |      mean |     mean2 | count | count2 |    median |   median2 |      iqr |
     | i am a modesly long string10 |        1 |  .1625166 |  .1625166 |     9 |      9 |  -.427907 |  -.427907 | 2.330888 |
     |---------------------------------------------------------------------------------------------------------------------|
     |                                                          iqr2                                                       |
     |                                                      2.330888                                                       |
     +---------------------------------------------------------------------------------------------------------------------+

     +---------------------------------------------------------------------------------------------------------------------+
  4. |                     groupstr | groupsub |      mean |     mean2 | count | count2 |    median |   median2 |      iqr |
     | i am a modesly long string10 |        2 | -.1557941 | -.1557941 |     7 |      7 | -.0040006 | -.0040006 | 1.750871 |
     |---------------------------------------------------------------------------------------------------------------------|
     |                                                          iqr2                                                       |
     |                                                      1.750871                                                       |
     +---------------------------------------------------------------------------------------------------------------------+

     +---------------------------------------------------------------------------------------------------------------------+
  5. |                     groupstr | groupsub |      mean |     mean2 | count | count2 |    median |   median2 |      iqr |
     |  i am a modesly long string2 |        1 | -.2739882 | -.2739882 |     9 |      9 | -.4433172 | -.4433172 | 1.699651 |
     |---------------------------------------------------------------------------------------------------------------------|
     |                                                          iqr2                                                       |
     |                                                      1.699651                                                       |
     +---------------------------------------------------------------------------------------------------------------------+

     +---------------------------------------------------------------------------------------------------------------------+
  6. |                     groupstr | groupsub |      mean |     mean2 | count | count2 |    median |   median2 |      iqr |
     |  i am a modesly long string2 |        2 |  .3537735 |  .3537735 |     9 |      9 |  .7683715 |  .7683715 | 1.366579 |
     |---------------------------------------------------------------------------------------------------------------------|
     |                                                          iqr2                                                       |
     |                                                      1.366579                                                       |
     +---------------------------------------------------------------------------------------------------------------------+

     +---------------------------------------------------------------------------------------------------------------------+
  7. |                     groupstr | groupsub |      mean |     mean2 | count | count2 |    median |   median2 |      iqr |
     |  i am a modesly long string3 |        1 | -.3516622 | -.3516622 |     9 |      9 | -.3361298 | -.3361298 | 1.109526 |
     |---------------------------------------------------------------------------------------------------------------------|
     |                                                          iqr2                                                       |
     |                                                      1.109526                                                       |
     +---------------------------------------------------------------------------------------------------------------------+

     +---------------------------------------------------------------------------------------------------------------------+
  8. |                     groupstr | groupsub |      mean |     mean2 | count | count2 |    median |   median2 |      iqr |
     |  i am a modesly long string3 |        2 | -.1977251 | -.1977251 |    10 |     10 |  -.030783 |  -.030783 | .8843895 |
     |---------------------------------------------------------------------------------------------------------------------|
     |                                                          iqr2                                                       |
     |                                                      .8843895                                                       |
     +---------------------------------------------------------------------------------------------------------------------+

     +---------------------------------------------------------------------------------------------------------------------+
  9. |                     groupstr | groupsub |      mean |     mean2 | count | count2 |    median |   median2 |      iqr |
     |  i am a modesly long string4 |        1 |  .6487527 |  .6487527 |     8 |      8 |  .6301131 |  .6301131 | 1.020262 |
     |---------------------------------------------------------------------------------------------------------------------|
     |                                                          iqr2                                                       |
     |                                                      1.020262                                                       |
     +---------------------------------------------------------------------------------------------------------------------+

     +---------------------------------------------------------------------------------------------------------------------+
 10. |                     groupstr | groupsub |      mean |     mean2 | count | count2 |    median |   median2 |      iqr |
     |  i am a modesly long string4 |        2 |  .2986489 |  .2986489 |     9 |      9 |  .1078866 |  .1078866 | .3525327 |
     |---------------------------------------------------------------------------------------------------------------------|
     |                                                          iqr2                                                       |
     |                                                      .3525327                                                       |
     +---------------------------------------------------------------------------------------------------------------------+
(note: failed to load multi-threaded version; using fallback)
(warning: forcing non-multi-threaded version)
data already sorted; indexing in stata
Parsed by variables, sources, and targets; .047 seconds
In memory: groupstr groupsub mean __000000 mean2 count count2 median median2 iqr iqr2
Generated additional targets; 0 seconds
        Plugin step 1: stata parsing done; 0.000 seconds.
Using index provided by stata (data was already soreted).
        Plugin step 2: Read in index helper; 0.000 seconds.
        Plugin step 3: Set up index from Stata; 0.000 seconds.
        Plugin step 4: Set up variables for main group loop; 0.000 seconds.
N = 'lu; 'lu balanced groups of size 'lu
        Plugin step 5.1: Read source variables sequentially; 0.000 seconds.
        Plugin step 5.2: Collapsed source variables; 0.000 seconds.
        Plugin step 6: Copied collapsed variables back to stata; 0.000 seconds.
The plugin executed; 0 seconds
Program exit executed; 0 seconds
The program executed; .047 seconds

     +---------------------------------------------------------------------------------------------------------------------+
  1. |                     groupstr | groupsub |      mean |     mean2 | count | count2 |    median |   median2 |      iqr |
     |  i am a modesly long string1 |        1 | -.1643312 | -.1643312 |     9 |      9 | -.0912356 | -.0912356 | .4092174 |
     |---------------------------------------------------------------------------------------------------------------------|
     |                                                          iqr2                                                       |
     |                                                      .4092174                                                       |
     +---------------------------------------------------------------------------------------------------------------------+

     +---------------------------------------------------------------------------------------------------------------------+
  2. |                     groupstr | groupsub |      mean |     mean2 | count | count2 |    median |   median2 |      iqr |
     |  i am a modesly long string1 |        2 | -.0320235 | -.0320235 |     9 |      9 |  .3434474 |  .3434474 |  1.19036 |
     |---------------------------------------------------------------------------------------------------------------------|
     |                                                          iqr2                                                       |
     |                                                       1.19036                                                       |
     +---------------------------------------------------------------------------------------------------------------------+

     +---------------------------------------------------------------------------------------------------------------------+
  3. |                     groupstr | groupsub |      mean |     mean2 | count | count2 |    median |   median2 |      iqr |
     | i am a modesly long string10 |        1 |  .1625166 |  .1625166 |     9 |      9 |  -.427907 |  -.427907 | 2.330888 |
     |---------------------------------------------------------------------------------------------------------------------|
     |                                                          iqr2                                                       |
     |                                                      2.330888                                                       |
     +---------------------------------------------------------------------------------------------------------------------+

     +---------------------------------------------------------------------------------------------------------------------+
  4. |                     groupstr | groupsub |      mean |     mean2 | count | count2 |    median |   median2 |      iqr |
     | i am a modesly long string10 |        2 | -.1557941 | -.1557941 |     7 |      7 | -.0040006 | -.0040006 | 1.750871 |
     |---------------------------------------------------------------------------------------------------------------------|
     |                                                          iqr2                                                       |
     |                                                      1.750871                                                       |
     +---------------------------------------------------------------------------------------------------------------------+

     +---------------------------------------------------------------------------------------------------------------------+
  5. |                     groupstr | groupsub |      mean |     mean2 | count | count2 |    median |   median2 |      iqr |
     |  i am a modesly long string2 |        1 | -.2739882 | -.2739882 |     9 |      9 | -.4433172 | -.4433172 | 1.699651 |
     |---------------------------------------------------------------------------------------------------------------------|
     |                                                          iqr2                                                       |
     |                                                      1.699651                                                       |
     +---------------------------------------------------------------------------------------------------------------------+

     +---------------------------------------------------------------------------------------------------------------------+
  6. |                     groupstr | groupsub |      mean |     mean2 | count | count2 |    median |   median2 |      iqr |
     |  i am a modesly long string2 |        2 |  .3537735 |  .3537735 |     9 |      9 |  .7683715 |  .7683715 | 1.366579 |
     |---------------------------------------------------------------------------------------------------------------------|
     |                                                          iqr2                                                       |
     |                                                      1.366579                                                       |
     +---------------------------------------------------------------------------------------------------------------------+

     +---------------------------------------------------------------------------------------------------------------------+
  7. |                     groupstr | groupsub |      mean |     mean2 | count | count2 |    median |   median2 |      iqr |
     |  i am a modesly long string3 |        1 | -.3516622 | -.3516622 |     9 |      9 | -.3361298 | -.3361298 | 1.109526 |
     |---------------------------------------------------------------------------------------------------------------------|
     |                                                          iqr2                                                       |
     |                                                      1.109526                                                       |
     +---------------------------------------------------------------------------------------------------------------------+

     +---------------------------------------------------------------------------------------------------------------------+
  8. |                     groupstr | groupsub |      mean |     mean2 | count | count2 |    median |   median2 |      iqr |
     |  i am a modesly long string3 |        2 | -.1977251 | -.1977251 |    10 |     10 |  -.030783 |  -.030783 | .8843895 |
     |---------------------------------------------------------------------------------------------------------------------|
     |                                                          iqr2                                                       |
     |                                                      .8843895                                                       |
     +---------------------------------------------------------------------------------------------------------------------+

     +---------------------------------------------------------------------------------------------------------------------+
  9. |                     groupstr | groupsub |      mean |     mean2 | count | count2 |    median |   median2 |      iqr |
     |  i am a modesly long string4 |        1 |  .6487527 |  .6487527 |     8 |      8 |  .6301131 |  .6301131 | 1.020262 |
     |---------------------------------------------------------------------------------------------------------------------|
     |                                                          iqr2                                                       |
     |                                                      1.020262                                                       |
     +---------------------------------------------------------------------------------------------------------------------+

     +---------------------------------------------------------------------------------------------------------------------+
 10. |                     groupstr | groupsub |      mean |     mean2 | count | count2 |    median |   median2 |      iqr |
     |  i am a modesly long string4 |        2 |  .2986489 |  .2986489 |     9 |      9 |  .1078866 |  .1078866 | .3525327 |
     |---------------------------------------------------------------------------------------------------------------------|
     |                                                          iqr2                                                       |
     |                                                      .3525327                                                       |
     +---------------------------------------------------------------------------------------------------------------------+
(note: failed to load multi-threaded version; using fallback)
(warning: forcing non-multi-threaded version)
Parsed by variables, sources, and targets; .023 seconds
In memory: groupstr groupsub mean mean2 count count2 median median2 iqr iqr2
Generated additional targets; 0 seconds
        Plugin step 1: stata parsing done; 0.000 seconds.
Using 128-bit hash to index 2 by variables (string and numeric).
        Plugin step 2: Hashed by variables; 0.000 seconds.
radix sort on hash: loops = 4, bits = 16, shift = 'lu
        Plugin step 3: Sorted on integer-only hash index; 0.000 seconds.
        Plugin step 4: Set up variables for main group loop; 0.000 seconds.
N = 'lu; 'lu balanced groups of size 'lu
        Plugin step 5.1: Read source variables sequentially; 0.000 seconds.
        Plugin step 5.2: Collapsed source variables; 0.000 seconds.
        Plugin step 6: Copied collapsed variables back to stata; 0.000 seconds.
The plugin executed; 0 seconds
Program exit executed; .047 seconds
The program executed; .07 seconds

     +---------------------------------------------------------------------------------------------------------------------+
  1. | groupsub |                     groupstr |      mean |     mean2 | count | count2 |    median |   median2 |      iqr |
     |        1 |  i am a modesly long string1 | -.1643312 | -.1643312 |     9 |      9 | -.0912356 | -.0912356 | .4092174 |
     |---------------------------------------------------------------------------------------------------------------------|
     |                                                          iqr2                                                       |
     |                                                      .4092174                                                       |
     +---------------------------------------------------------------------------------------------------------------------+

     +---------------------------------------------------------------------------------------------------------------------+
  2. | groupsub |                     groupstr |      mean |     mean2 | count | count2 |    median |   median2 |      iqr |
     |        1 | i am a modesly long string10 |  .1625166 |  .1625166 |     9 |      9 |  -.427907 |  -.427907 | 2.330888 |
     |---------------------------------------------------------------------------------------------------------------------|
     |                                                          iqr2                                                       |
     |                                                      2.330888                                                       |
     +---------------------------------------------------------------------------------------------------------------------+

     +---------------------------------------------------------------------------------------------------------------------+
  3. | groupsub |                     groupstr |      mean |     mean2 | count | count2 |    median |   median2 |      iqr |
     |        1 |  i am a modesly long string2 | -.2739882 | -.2739882 |     9 |      9 | -.4433172 | -.4433172 | 1.699651 |
     |---------------------------------------------------------------------------------------------------------------------|
     |                                                          iqr2                                                       |
     |                                                      1.699651                                                       |
     +---------------------------------------------------------------------------------------------------------------------+

     +---------------------------------------------------------------------------------------------------------------------+
  4. | groupsub |                     groupstr |      mean |     mean2 | count | count2 |    median |   median2 |      iqr |
     |        1 |  i am a modesly long string3 | -.3516622 | -.3516622 |     9 |      9 | -.3361298 | -.3361298 | 1.109526 |
     |---------------------------------------------------------------------------------------------------------------------|
     |                                                          iqr2                                                       |
     |                                                      1.109526                                                       |
     +---------------------------------------------------------------------------------------------------------------------+

     +---------------------------------------------------------------------------------------------------------------------+
  5. | groupsub |                     groupstr |      mean |     mean2 | count | count2 |    median |   median2 |      iqr |
     |        1 |  i am a modesly long string4 |  .6487527 |  .6487527 |     8 |      8 |  .6301131 |  .6301131 | 1.020262 |
     |---------------------------------------------------------------------------------------------------------------------|
     |                                                          iqr2                                                       |
     |                                                      1.020262                                                       |
     +---------------------------------------------------------------------------------------------------------------------+

     +---------------------------------------------------------------------------------------------------------------------+
  6. | groupsub |                     groupstr |      mean |     mean2 | count | count2 |    median |   median2 |      iqr |
     |        1 |  i am a modesly long string5 |  .3682817 |  .3682817 |    10 |     10 |   .651777 |   .651777 | 2.113784 |
     |---------------------------------------------------------------------------------------------------------------------|
     |                                                          iqr2                                                       |
     |                                                      2.113784                                                       |
     +---------------------------------------------------------------------------------------------------------------------+

     +---------------------------------------------------------------------------------------------------------------------+
  7. | groupsub |                     groupstr |      mean |     mean2 | count | count2 |    median |   median2 |      iqr |
     |        1 |  i am a modesly long string6 | -.3959126 | -.3959126 |     9 |      9 | -.5473607 | -.5473607 | 1.944451 |
     |---------------------------------------------------------------------------------------------------------------------|
     |                                                          iqr2                                                       |
     |                                                      1.944451                                                       |
     +---------------------------------------------------------------------------------------------------------------------+

     +---------------------------------------------------------------------------------------------------------------------+
  8. | groupsub |                     groupstr |      mean |     mean2 | count | count2 |    median |   median2 |      iqr |
     |        1 |  i am a modesly long string7 |  -.756433 |  -.756433 |     8 |      8 | -.6734579 | -.6734579 | 1.705667 |
     |---------------------------------------------------------------------------------------------------------------------|
     |                                                          iqr2                                                       |
     |                                                      1.705667                                                       |
     +---------------------------------------------------------------------------------------------------------------------+

     +---------------------------------------------------------------------------------------------------------------------+
  9. | groupsub |                     groupstr |      mean |     mean2 | count | count2 |    median |   median2 |      iqr |
     |        1 |  i am a modesly long string8 | -.0966864 | -.0966864 |    10 |     10 | -.1573083 | -.1573083 | 1.075722 |
     |---------------------------------------------------------------------------------------------------------------------|
     |                                                          iqr2                                                       |
     |                                                      1.075722                                                       |
     +---------------------------------------------------------------------------------------------------------------------+

     +---------------------------------------------------------------------------------------------------------------------+
 10. | groupsub |                     groupstr |      mean |     mean2 | count | count2 |    median |   median2 |      iqr |
     |        1 |  i am a modesly long string9 | -.1400709 | -.1400709 |    10 |     10 |  -.100068 |  -.100068 | .9875529 |
     |---------------------------------------------------------------------------------------------------------------------|
     |                                                          iqr2                                                       |
     |                                                      .9875529                                                       |
     +---------------------------------------------------------------------------------------------------------------------+
(note: failed to load multi-threaded version; using fallback)
(warning: forcing non-multi-threaded version)
Parsed by variables, sources, and targets; .024 seconds
In memory: groupstr mean mean2 count count2 median median2 iqr iqr2
Generated additional targets; 0 seconds
        Plugin step 1: stata parsing done; 0.000 seconds.
Using 128-bit hash to index string by variable.
        Plugin step 2: Hashed by variables; 0.000 seconds.
radix sort on hash: loops = 4, bits = 16, shift = 'lu
        Plugin step 3: Sorted on integer-only hash index; 0.000 seconds.
        Plugin step 4: Set up variables for main group loop; 0.000 seconds.
N = 'lu; 'lu balanced groups of size 'lu
        Plugin step 5.1: Read source variables sequentially; 0.000 seconds.
        Plugin step 5.2: Collapsed source variables; 0.000 seconds.
        Plugin step 6: Copied collapsed variables back to stata; 0.000 seconds.
The plugin executed; 0 seconds
Program exit executed; 0 seconds
The program executed; .024 seconds
(note: failed to load multi-threaded version; using fallback)
(warning: forcing non-multi-threaded version)
data sorted in similar order (groupstr groupsub); indexing in stata
Parsed by variables, sources, and targets; .047 seconds
In memory: groupstr mean __000000 mean2 count count2 median median2 iqr iqr2
Generated additional targets; 0 seconds
        Plugin step 1: stata parsing done; 0.000 seconds.
Using index provided by stata (data was already soreted).
        Plugin step 2: Read in index helper; 0.000 seconds.
        Plugin step 3: Set up index from Stata; 0.000 seconds.
        Plugin step 4: Set up variables for main group loop; 0.000 seconds.
N = 'lu; 'lu balanced groups of size 'lu
        Plugin step 5.1: Read source variables sequentially; 0.000 seconds.
        Plugin step 5.2: Collapsed source variables; 0.000 seconds.
        Plugin step 6: Copied collapsed variables back to stata; 0.000 seconds.
The plugin executed; 0 seconds
Program exit executed; 0 seconds
The program executed; .07 seconds
(note: failed to load multi-threaded version; using fallback)
(warning: forcing non-multi-threaded version)
Parsed by variables, sources, and targets; .024 seconds
In memory: groupsub mean mean2 count count2 median median2 iqr iqr2
Generated additional targets; 0 seconds
        Plugin step 1: stata parsing done; 0.000 seconds.
Using sole integer by variable as hash.
        Plugin step 2: Hashed by variables; 0.000 seconds.
counting sort on hash; min = 'lu, max = 'lu
        Plugin step 3: Sorted on integer-only hash index; 0.000 seconds.
        Plugin step 4: Set up variables for main group loop; 0.000 seconds.
N = 'lu; 'lu balanced groups of size 'lu
        Plugin step 5.1: Read source variables sequentially; 0.000 seconds.
        Plugin step 5.2: Collapsed source variables; 0.000 seconds.
        Plugin step 6: Copied collapsed variables back to stata; 0.000 seconds.
The plugin executed; 0 seconds
Program exit executed; 0 seconds
The program executed; .047 seconds

     +-------------------------------------------------------------------------------------------------+
     | groupsub        mean       mean2   count   count2      median     median2        iqr       iqr2 |
     |-------------------------------------------------------------------------------------------------|
  1. |        1   -.0962263   -.0962263      91       91   -.0912356   -.0912356   1.613915   1.613915 |
  2. |        2    .0295612    .0295612      92       92    .1134683    .1134683   1.268566   1.268566 |
     +-------------------------------------------------------------------------------------------------+
(note: failed to load multi-threaded version; using fallback)
(warning: forcing non-multi-threaded version)
Parsed by variables, sources, and targets; .024 seconds
In memory: groupsub mean mean2 count count2 median median2 iqr iqr2
Generated additional targets; 0 seconds
        Plugin step 1: stata parsing done; 0.000 seconds.
Using sole integer by variable as hash.
        Plugin step 2: Hashed by variables; 0.000 seconds.
counting sort on hash; min = 'lu, max = 'lu
        Plugin step 3: Sorted on integer-only hash index; 0.000 seconds.
        Plugin step 4: Set up variables for main group loop; 0.000 seconds.
N = 'lu; 'lu balanced groups of size 'lu
        Plugin step 5.1: Read source variables sequentially; 0.000 seconds.
        Plugin step 5.2: Collapsed source variables; 0.000 seconds.
        Plugin step 6: Copied collapsed variables back to stata; 0.000 seconds.
The plugin executed; 0 seconds
Program exit executed; 0 seconds
The program executed; .024 seconds

     +-------------------------------------------------------------------------------------------------+
     | groupsub        mean       mean2   count   count2      median     median2        iqr       iqr2 |
     |-------------------------------------------------------------------------------------------------|
  1. |        1   -.0962263   -.0962263      91       91   -.0912356   -.0912356   1.613915   1.613915 |
  2. |        2    .0295612    .0295612      92       92    .1134683    .1134683   1.268566   1.268566 |
     +-------------------------------------------------------------------------------------------------+

Passed! checks_options_gcollapse debug_force_single

--------------------------------------------------------------------------------
checks_options_gegen debug_force_single
--------------------------------------------------------------------------------


    Variable |       Obs        Mean    Std. Dev.       Min        Max
-------------+--------------------------------------------------------
       rsort |     17893    -.001412     .290853  -.4999922   .4999006
Obs = 20,000; Groups = 100
  group was float now byte
  groupsub was float now byte
  grouplong was long now byte
  (180,000 bytes saved)
(plugin -gtools- was loaded correctly)
(note: failed to load multi-threaded version; using fallback)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
Program set up executed in 0 seconds
        Plugin step 1: stata parsing done; 0.000 seconds.
Using 128-bit hash to index 2 by variables (string and numeric).
        Plugin step 2: Hashed by variables; 0.000 seconds.
radix sort on hash: loops = 4, bits = 16, shift = 'lu
        Plugin step 3: Sorted on integer-only hash index; 0.024 seconds.
        Plugin step 4: Set up variables for main group loop; 0.000 seconds.
N = 'lu; 'lu unbalanced groups of sizes 'lu to 'lu
        Plugin step 5.1: Read source variables sequentially; 0.000 seconds.
        Plugin step 5.2: By vars summary stats; 0.000 seconds.
        Plugin step 6: Copied output back to stata; 0.000 seconds.
The plugin executed in .024 seconds
Program exit executed in 0 seconds
The program executed in .024 seconds
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(note: failed to load multi-threaded version; using fallback)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
Program set up executed in 0 seconds
        Plugin step 1: stata parsing done; 0.000 seconds.
Using 128-bit hash to index 2 by variables (string and numeric).
        Plugin step 2: Hashed by variables; 0.023 seconds.
radix sort on hash: loops = 4, bits = 16, shift = 'lu
        Plugin step 3: Sorted on integer-only hash index; 0.000 seconds.
        Plugin step 4: Set up variables for main group loop; 0.000 seconds.
N = 'lu; 'lu unbalanced groups of sizes 'lu to 'lu
        Plugin step 5.1: Read source variables sequentially; 0.000 seconds.
        Plugin step 5.2: By vars summary stats; 0.000 seconds.
        Plugin step 6: Copied output back to stata; 0.000 seconds.
The plugin executed in .047 seconds
(1501 missing values generated)
Program exit executed in 0 seconds
The program executed in .047 seconds
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(1800 missing values generated)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(note: failed to load multi-threaded version; using fallback)
(warning: forcing non-multi-threaded version)
Parsed by variables, sources, and targets; .07 seconds
In memory: group groupstr groupsub groupfloat rsort rnorm grouplong id mean sum median sd iqr first last firstnm lastnm q10 q30 
> q70 q90 g_mean g_sum g_median g_sd g_iqr g_first g_last g_firstnm g_lastnm g_q10 g_q30 g_q70 g_q90
Generated additional targets; 0 seconds
        Plugin step 1: stata parsing done; 0.000 seconds.
Using 128-bit hash to index numeric by variable.
        Plugin step 2: Hashed by variables; 0.000 seconds.
radix sort on hash: loops = 4, bits = 16, shift = 'lu
        Plugin step 3: Sorted on integer-only hash index; 0.000 seconds.
        Plugin step 4: Set up variables for main group loop; 0.000 seconds.
N = 'lu; 'lu unbalanced groups of sizes 'lu to 'lu
        Plugin step 5.1: Read source variables sequentially; 0.000 seconds.
        Plugin step 5.2: Collapsed source variables; 0.000 seconds.
        Plugin step 6: Merged collapsed variables back to stata; 0.023 seconds.
The plugin executed; .023 seconds
Program exit executed; 0 seconds
The program executed; .093 seconds
    mean vs gcollapse was OK
    sum vs gcollapse was OK
    median vs gcollapse was OK
    sd vs gcollapse was OK
    iqr vs gcollapse was OK
    first vs gcollapse was OK
    last vs gcollapse was OK
    firstnm vs gcollapse was OK
    lastnm vs gcollapse was OK
    q10 vs gcollapse was OK
    q30 vs gcollapse was OK
    q70 vs gcollapse was OK
    q90 vs gcollapse was OK

    Variable |       Obs        Mean    Std. Dev.       Min        Max
-------------+--------------------------------------------------------
       rsort |     17904    .0020942    .2871854  -.4996828   .4999703
Obs = 20,000; Groups = 100
  group was float now byte
  groupsub was float now byte
  grouplong was long now byte
  (180,000 bytes saved)
(plugin -gtools- was loaded correctly)
(7418 missing values generated)
(note: failed to load multi-threaded version; using fallback)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
Program set up executed in 0 seconds
        Plugin step 1: stata parsing done; 0.000 seconds.
Using 128-bit hash to index 2 by variables (string and numeric).
        Plugin step 2: Hashed by variables; 0.000 seconds.
radix sort on hash: loops = 4, bits = 16, shift = 'lu
        Plugin step 3: Sorted on integer-only hash index; 0.000 seconds.
        Plugin step 4: Set up variables for main group loop; 0.000 seconds.
N = 'lu; 'lu unbalanced groups of sizes 'lu to 'lu
        Plugin step 5.1: Read source variables sequentially; 0.000 seconds.
        Plugin step 5.2: By vars summary stats; 0.000 seconds.
        Plugin step 6: Copied output back to stata; 0.000 seconds.
The plugin executed in .023 seconds
(7418 missing values generated)
Program exit executed in 0 seconds
The program executed in .07 seconds
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(7418 missing values generated)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(7418 missing values generated)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(7418 missing values generated)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(7418 missing values generated)
(note: failed to load multi-threaded version; using fallback)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
Program set up executed in 0 seconds
        Plugin step 1: stata parsing done; 0.000 seconds.
Using 128-bit hash to index 2 by variables (string and numeric).
        Plugin step 2: Hashed by variables; 0.000 seconds.
radix sort on hash: loops = 4, bits = 16, shift = 'lu
        Plugin step 3: Sorted on integer-only hash index; 0.024 seconds.
        Plugin step 4: Set up variables for main group loop; 0.000 seconds.
N = 'lu; 'lu unbalanced groups of sizes 'lu to 'lu
        Plugin step 5.1: Read source variables sequentially; 0.000 seconds.
        Plugin step 5.2: By vars summary stats; 0.000 seconds.
        Plugin step 6: Copied output back to stata; 0.000 seconds.
The plugin executed in .024 seconds
(8468 missing values generated)
Program exit executed in 0 seconds
The program executed in .024 seconds
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(8963 missing values generated)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(7418 missing values generated)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(7418 missing values generated)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(7418 missing values generated)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(7418 missing values generated)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(7418 missing values generated)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(7418 missing values generated)
(note: failed to load multi-threaded version; using fallback)
(warning: forcing non-multi-threaded version)
Parsed by variables, sources, and targets; .023 seconds
In memory: group groupstr groupsub groupfloat rsort rnorm grouplong id mean sum median sd iqr first last firstnm lastnm q10 q30 
> q70 q90 g_mean g_sum g_median g_sd g_iqr g_first g_last g_firstnm g_lastnm g_q10 g_q30 g_q70 g_q90
Generated additional targets; 0 seconds
        Plugin step 1: stata parsing done; 0.000 seconds.
Using 128-bit hash to index numeric by variable.
        Plugin step 2: Hashed by variables; 0.024 seconds.
radix sort on hash: loops = 4, bits = 16, shift = 'lu
        Plugin step 3: Sorted on integer-only hash index; 0.000 seconds.
        Plugin step 4: Set up variables for main group loop; 0.000 seconds.
N = 'lu; 'lu unbalanced groups of sizes 'lu to 'lu
        Plugin step 5.1: Read source variables sequentially; 0.000 seconds.
        Plugin step 5.2: Collapsed source variables; 0.000 seconds.
        Plugin step 6: Merged collapsed variables back to stata; 0.000 seconds.
The plugin executed; .024 seconds
Program exit executed; 0 seconds
The program executed; .069 seconds
    mean vs gcollapse (in) was OK
    sum vs gcollapse (in) was OK
    median vs gcollapse (in) was OK
    sd vs gcollapse (in) was OK
    iqr vs gcollapse (in) was OK
    first vs gcollapse (in) was OK
    last vs gcollapse (in) was OK
    firstnm vs gcollapse (in) was OK
    lastnm vs gcollapse (in) was OK
    q10 vs gcollapse (in) was OK
    q30 vs gcollapse (in) was OK
    q70 vs gcollapse (in) was OK
    q90 vs gcollapse (in) was OK

    Variable |       Obs        Mean    Std. Dev.       Min        Max
-------------+--------------------------------------------------------
       rsort |     18003   -.0028926    .2909829  -.4999989   .4999902
Obs = 20,000; Groups = 100
  group was float now byte
  groupsub was float now byte
  grouplong was long now byte
  (180,000 bytes saved)
(plugin -gtools- was loaded correctly)
(14381 missing values generated)
(note: failed to load multi-threaded version; using fallback)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
Program set up executed in 0 seconds
        Plugin step 1: stata parsing done; 0.000 seconds.
Using 128-bit hash to index 2 by variables (string and numeric).
        Plugin step 2: Hashed by variables; 0.000 seconds.
radix sort on hash: loops = 4, bits = 16, shift = 'lu
        Plugin step 3: Sorted on integer-only hash index; 0.000 seconds.
        Plugin step 4: Set up variables for main group loop; 0.000 seconds.
N = 'lu; 'lu unbalanced groups of sizes 'lu to 'lu
        Plugin step 5.1: Read source variables sequentially; 0.000 seconds.
        Plugin step 5.2: By vars summary stats; 0.000 seconds.
        Plugin step 6: Copied output back to stata; 0.000 seconds.
The plugin executed in .024 seconds
(14381 missing values generated)
Program exit executed in 0 seconds
The program executed in .024 seconds
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(14381 missing values generated)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(14381 missing values generated)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(14381 missing values generated)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(14381 missing values generated)
(note: failed to load multi-threaded version; using fallback)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
Program set up executed in 0 seconds
        Plugin step 1: stata parsing done; 0.000 seconds.
Using 128-bit hash to index 2 by variables (string and numeric).
        Plugin step 2: Hashed by variables; 0.000 seconds.
radix sort on hash: loops = 4, bits = 16, shift = 'lu
        Plugin step 3: Sorted on integer-only hash index; 0.000 seconds.
        Plugin step 4: Set up variables for main group loop; 0.000 seconds.
N = 'lu; 'lu unbalanced groups of sizes 'lu to 'lu
        Plugin step 5.1: Read source variables sequentially; 0.023 seconds.
        Plugin step 5.2: By vars summary stats; 0.000 seconds.
        Plugin step 6: Copied output back to stata; 0.000 seconds.
The plugin executed in .023 seconds
(14874 missing values generated)
Program exit executed in 0 seconds
The program executed in .023 seconds
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(15035 missing values generated)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(14381 missing values generated)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(14381 missing values generated)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(14381 missing values generated)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(14381 missing values generated)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(14381 missing values generated)
(plugin -gtools- was loaded correctly)
(warning: forcing non-multi-threaded version)
(14381 missing values generated)
(14381 observations deleted)
(note: failed to load multi-threaded version; using fallback)
(warning: forcing non-multi-threaded version)
Parsed by variables, sources, and targets; .024 seconds
In memory: group groupstr groupsub groupfloat rsort rnorm grouplong id mean sum median sd iqr first last firstnm lastnm q10 q30 
> q70 q90 g_mean g_sum g_median g_sd g_iqr g_first g_last g_firstnm g_lastnm g_q10 g_q30 g_q70 g_q90
Generated additional targets; 0 seconds
        Plugin step 1: stata parsing done; 0.000 seconds.
Using 128-bit hash to index numeric by variable.
        Plugin step 2: Hashed by variables; 0.000 seconds.
radix sort on hash: loops = 4, bits = 16, shift = 'lu
        Plugin step 3: Sorted on integer-only hash index; 0.000 seconds.
        Plugin step 4: Set up variables for main group loop; 0.000 seconds.
N = 'lu; 'lu unbalanced groups of sizes 'lu to 'lu
        Plugin step 5.1: Read source variables sequentially; 0.000 seconds.
        Plugin step 5.2: Collapsed source variables; 0.000 seconds.
        Plugin step 6: Merged collapsed variables back to stata; 0.000 seconds.
The plugin executed; 0 seconds
Program exit executed; .024 seconds
The program executed; .071 seconds
    mean vs gcollapse (if in) was OK
    sum vs gcollapse (if in) was OK
    median vs gcollapse (if in) was OK
    sd vs gcollapse (if in) was OK
    iqr vs gcollapse (if in) was OK
    first vs gcollapse (if in) was OK
    last vs gcollapse (if in) was OK
    firstnm vs gcollapse (if in) was OK
    lastnm vs gcollapse (if in) was OK
    q10 vs gcollapse (if in) was OK
    q30 vs gcollapse (if in) was OK
    q70 vs gcollapse (if in) was OK
    q90 vs gcollapse (if in) was OK

Passed! checks_options_gegen debug_force_single

--------------------------------------------------------------------------------
checks_consistency_gcollapse debug_checkhash
--------------------------------------------------------------------------------


    Variable |       Obs        Mean    Std. Dev.       Min        Max
-------------+--------------------------------------------------------
       rsort |     45077    .0014494    .2890386  -.4999653   .4999828
Obs = 50,000; Groups = 8
  group was float now byte
  groupsub was float now byte
  grouplong was long now byte
  (450,000 bytes saved)

    Variable |       Obs        Mean    Std. Dev.       Min        Max
-------------+--------------------------------------------------------
       rsort |     44928   -.0029387    .2880127  -.4999129   .4999942
Obs = 50,000; Groups = 8,000
  group was float now int
  groupsub was float now byte
  grouplong was long now int
  (350,000 bytes saved)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupsub groupstr)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupstr)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupsub group)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, grouplong)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupsub groupstr)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupstr)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupsub group)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, grouplong)

Passed! checks_consistency_gcollapse debug_checkhash

--------------------------------------------------------------------------------
checks_consistency_gcollapse forceio debug_io_read_method(0)
--------------------------------------------------------------------------------


    Variable |       Obs        Mean    Std. Dev.       Min        Max
-------------+--------------------------------------------------------
       rsort |     44952    .0002823    .2886229  -.4999987   .4999914
Obs = 50,000; Groups = 8
  group was float now byte
  groupsub was float now byte
  grouplong was long now byte
  (450,000 bytes saved)

    Variable |       Obs        Mean    Std. Dev.       Min        Max
-------------+--------------------------------------------------------
       rsort |     44910   -.0000622    .2887498  -.4999923   .4999405
Obs = 50,000; Groups = 8,000
  group was float now int
  groupsub was float now byte
  grouplong was long now int
  (350,000 bytes saved)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupsub groupstr)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupstr)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupsub group)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, grouplong)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupsub groupstr)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupstr)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupsub group)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, grouplong)

Passed! checks_consistency_gcollapse forceio debug_io_read_method(0)

--------------------------------------------------------------------------------
checks_consistency_gcollapse forceio debug_io_read_method(1)
--------------------------------------------------------------------------------


    Variable |       Obs        Mean    Std. Dev.       Min        Max
-------------+--------------------------------------------------------
       rsort |     44865   -.0032903    .2883658  -.4999617   .4999945
Obs = 50,000; Groups = 8
  group was float now byte
  groupsub was float now byte
  grouplong was long now byte
  (450,000 bytes saved)

    Variable |       Obs        Mean    Std. Dev.       Min        Max
-------------+--------------------------------------------------------
       rsort |     44971      .00022    .2895965  -.4999867   .4999949
Obs = 50,000; Groups = 8,000
  group was float now int
  groupsub was float now byte
  grouplong was long now int
  (350,000 bytes saved)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupsub groupstr)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupstr)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupsub group)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, grouplong)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupsub groupstr)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupstr)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupsub group)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, grouplong)

Passed! checks_consistency_gcollapse forceio debug_io_read_method(1)

--------------------------------------------------------------------------------
checks_consistency_gcollapse debug_io_check(1) debug_io_threshold(0)
--------------------------------------------------------------------------------


    Variable |       Obs        Mean    Std. Dev.       Min        Max
-------------+--------------------------------------------------------
       rsort |     44915   -.0009537     .288703   -.499975   .4999645
Obs = 50,000; Groups = 8
  group was float now byte
  groupsub was float now byte
  grouplong was long now byte
  (450,000 bytes saved)

    Variable |       Obs        Mean    Std. Dev.       Min        Max
-------------+--------------------------------------------------------
       rsort |     45085    .0019057    .2899188  -.4999973   .4999698
Obs = 50,000; Groups = 8,000
  group was float now int
  groupsub was float now byte
  grouplong was long now int
  (350,000 bytes saved)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupsub groupstr)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupstr)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupsub group)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, grouplong)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupsub groupstr)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupstr)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupsub group)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, grouplong)

Passed! checks_consistency_gcollapse debug_io_check(1) debug_io_threshold(0)

--------------------------------------------------------------------------------
checks_consistency_gcollapse debug_io_check(1) debug_io_threshold(1000000)
--------------------------------------------------------------------------------


    Variable |       Obs        Mean    Std. Dev.       Min        Max
-------------+--------------------------------------------------------
       rsort |     44973   -.0000316    .2887014  -.4999906   .4999479
Obs = 50,000; Groups = 8
  group was float now byte
  groupsub was float now byte
  grouplong was long now byte
  (450,000 bytes saved)

    Variable |       Obs        Mean    Std. Dev.       Min        Max
-------------+--------------------------------------------------------
       rsort |     44935    .0010383     .288993  -.4999433   .4999998
Obs = 50,000; Groups = 8,000
  group was float now int
  groupsub was float now byte
  grouplong was long now int
  (350,000 bytes saved)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupsub groupstr)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupstr)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupsub group)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, grouplong)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupsub groupstr)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupstr)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupsub group)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, grouplong)

Passed! checks_consistency_gcollapse debug_io_check(1) debug_io_threshold(1000000)

--------------------------------------------------------------------------------
checks_consistency_gcollapse debug_force_single
--------------------------------------------------------------------------------


    Variable |       Obs        Mean    Std. Dev.       Min        Max
-------------+--------------------------------------------------------
       rsort |     45040    .0011184     .289688  -.4999991   .4999733
Obs = 50,000; Groups = 8
  group was float now byte
  groupsub was float now byte
  grouplong was long now byte
  (450,000 bytes saved)

    Variable |       Obs        Mean    Std. Dev.       Min        Max
-------------+--------------------------------------------------------
       rsort |     44906    .0026823    .2883103   -.499971   .4999898
Obs = 50,000; Groups = 8,000
  group was float now int
  groupsub was float now byte
  grouplong was long now int
  (350,000 bytes saved)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupsub groupstr)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupstr)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupsub group)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, grouplong)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupsub groupstr)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupstr)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, groupsub group)
gcollapse produced identical data to collapse (tol = 1.00000000000e-06, grouplong)

Passed! checks_consistency_gcollapse debug_force_single

--------------------------------------------------------------------------------
checks_consistency_gegen debug_force_single b
--------------------------------------------------------------------------------


    Variable |       Obs        Mean    Std. Dev.       Min        Max
-------------+--------------------------------------------------------
       rsort |    450009   -.0006229     .288582  -.4999987   .4999993
Obs = 500,000; Groups = 10,000
  group was float now int
  groupsub was float now byte
  grouplong was long now int
  (3,500,000 bytes saved)
Checking full range
    total was OK
    sum was OK
    mean was OK
    sd was OK
    max was OK
    min was OK
    count was OK
    median was OK
    iqr was OK
    percentile 10 was OK
    percentile 30 was OK
    percentile 70 was OK
    percentile 90 was OK
    tag was OK
Checking if range
    total was OK
    sum was OK
    mean was OK
    sd was OK
    max was OK
    min was OK
    count was OK
    median was OK
    iqr was OK
    percentile 10 was OK
    percentile 30 was OK
    percentile 70 was OK
    percentile 90 was OK
    tag was OK
Checking in range
    total was OK
    sum was OK
    mean was OK
    sd was OK
    max was OK
    min was OK
    count was OK
    median was OK
    iqr was OK
    percentile 10 was OK
    percentile 30 was OK
    percentile 70 was OK
    percentile 90 was OK
    tag was OK
Checking if in range
    total was OK
    sum was OK
    mean was OK
    sd was OK
    max was OK
    min was OK
    count was OK
    median was OK
    iqr was OK
    percentile 10 was OK
    percentile 30 was OK
    percentile 70 was OK
    percentile 90 was OK
    tag was OK

Passed! checks_consistency_gegen debug_force_single b
Short (quick) versions of the benchmarks
Benchmarking N for J = 100; by(x3)
    vars  = y1 y2 y3 y4 y5 y6 y7 y8 y9 y10 y11 y12 y13 y14 y15
    stats = sum
                    2,000 gcollapse  (.047)  collapse  (.046)  fcollapse  (.117)
                   20,000 gcollapse  (.047)  collapse  (.165)  fcollapse  (.07)
Results varying N for J = 100; by(x3)
|              N | gcollapse |  collapse | fcollapse | ratio (f/g) | ratio (c/g) |
| -------------- | --------- | --------- | --------- | ----------- | ----------- |
|          2,000 |      0.05 |      0.05 |      0.12 |        2.49 |        0.98 |
|         20,000 |      0.05 |      0.17 |      0.07 |        1.49 |        3.51 |
Benchmarking N for J = 100; by(x3)
    vars  = y1 y2 y3
    stats = mean median
                    2,000 gcollapse  (.024)  collapse  (.047)  fcollapse  (.023)
                   20,000 gcollapse  (.023)  collapse  (.211)  fcollapse  (.047)
Results varying N for J = 100; by(x3)
|              N | gcollapse |  collapse | fcollapse | ratio (f/g) | ratio (c/g) |
| -------------- | --------- | --------- | --------- | ----------- | ----------- |
|          2,000 |      0.02 |      0.05 |      0.02 |        0.96 |        1.96 |
|         20,000 |      0.02 |      0.21 |      0.05 |        2.04 |        9.17 |
Benchmarking N for J = 100; by(x3)
    vars  = y1 y2 y3 y4 y5 y6
    stats = sum mean count min max
                    2,000 gcollapse  (.071)  collapse  (.094)  fcollapse  (.047)
                   20,000 gcollapse  (.071)  collapse  (.914)  fcollapse  (.071)
Results varying N for J = 100; by(x3)
|              N | gcollapse |  collapse | fcollapse | ratio (f/g) | ratio (c/g) |
| -------------- | --------- | --------- | --------- | ----------- | ----------- |
|          2,000 |      0.07 |      0.09 |      0.05 |        0.66 |        1.32 |
|         20,000 |      0.07 |      0.91 |      0.07 |        1.00 |       12.87 |
Benchmarking N for J = 10; by(group)
    vars  = x1 x2
    stats = sum mean max min count percent first last firstnm lastnm median iqr p23 p77
                    2,000 gcollapse  (.07)  collapse  (.188)  fcollapse  (.047)
                   20,000 gcollapse  (.071)  collapse  (2.812)  fcollapse  (.117)
Results varying N for J = 10; by(group)
|              N | gcollapse |  collapse | fcollapse | ratio (f/g) | ratio (c/g) |
| -------------- | --------- | --------- | --------- | ----------- | ----------- |
|          2,000 |      0.07 |      0.19 |      0.05 |        0.67 |        2.69 |
|         20,000 |      0.07 |      2.81 |      0.12 |        1.65 |       39.61 |
Benchmarking J for N = 5,000; by(group)
    vars  = x1 x2
    stats = sum mean max min count percent first last firstnm lastnm median iqr p23 p77
                      100 gcollapse  (.071)  collapse  (.468)  fcollapse  (.071)
                    1,000 gcollapse  (.071)  collapse  (.632)  fcollapse  (.118)
Results varying J for N = 5,000; by(group)
|              J | gcollapse |  collapse | fcollapse | ratio (f/g) | ratio (c/g) |
| -------------- | --------- | --------- | --------- | ----------- | ----------- |
|            100 |      0.07 |      0.47 |      0.07 |        1.00 |        6.59 |
|          1,000 |      0.07 |      0.63 |      0.12 |        1.66 |        8.90 |
Benchmarking N for J = 100; by(x3)
    vars  = y1 y2 y3 y4 y5 y6 y7 y8 y9 y10 y11 y12 y13 y14 y15
    stats = sum
                    2,000 gcollapse-default  (.047)  fcollapse  (.024) 
                   20,000 gcollapse-default  (.071)  fcollapse  (.07) 
Results varying N for J = 100; by(x3)
|              N | gcollapse | fcollapse | ratio (f/g) |
| -------------- | --------- | --------- | ----------- |
|          2,000 |      0.05 |      0.02 |        0.51 |
|         20,000 |      0.07 |      0.07 |        0.99 |
Benchmarking N for J = 100; by(x3)
    vars  = y1 y2 y3
    stats = mean median
                    2,000 gcollapse-default  (.023)  fcollapse  (0) 
                   20,000 gcollapse-default  (.024)  fcollapse  (.071) 
Results varying N for J = 100; by(x3)
|              N | gcollapse | fcollapse | ratio (f/g) |
| -------------- | --------- | --------- | ----------- |
|          2,000 |      0.02 |      0.00 |        0.00 |
|         20,000 |      0.02 |      0.07 |        2.96 |
Benchmarking N for J = 100; by(x3)
    vars  = y1 y2 y3 y4 y5 y6
    stats = sum mean count min max
                    2,000 gcollapse-default  (.047)  fcollapse  (.047) 
                   20,000 gcollapse-default  (.07)  fcollapse  (.07) 
Results varying N for J = 100; by(x3)
|              N | gcollapse | fcollapse | ratio (f/g) |
| -------------- | --------- | --------- | ----------- |
|          2,000 |      0.05 |      0.05 |        1.00 |
|         20,000 |      0.07 |      0.07 |        1.00 |
Benchmarking N for J = 10; by(group)
    vars  = x1 x2
    stats = sum mean max min count percent first last firstnm lastnm median iqr p23 p77
                    2,000 gcollapse-default  (.047)  fcollapse  (.047) 
                   20,000 gcollapse-default  (.07)  fcollapse  (.117) 
Results varying N for J = 10; by(group)
|              N | gcollapse | fcollapse | ratio (f/g) |
| -------------- | --------- | --------- | ----------- |
|          2,000 |      0.05 |      0.05 |        1.00 |
|         20,000 |      0.07 |      0.12 |        1.67 |
Benchmarking J for N = 5,000; by(group)
    vars  = x1 x2
    stats = sum mean max min count percent first last firstnm lastnm median iqr p23 p77
                      100 gcollapse-default  (.071)  fcollapse  (.046) 
                    1,000 gcollapse-default  (.07)  fcollapse  (.118) 
Results varying J for N = 5,000; by(group)
|              J | gcollapse | fcollapse | ratio (f/g) |
| -------------- | --------- | --------- | ----------- |
|            100 |      0.07 |      0.05 |        0.65 |
|          1,000 |      0.07 |      0.12 |        1.69 |

End: 14:07:32 18 Jun 2017
tests ran

tests finished running

Start: 13:58:51 18 Jun 2017
End: 14:07:32 18 Jun 2017

. 
end of do-file

. log close _all
      name:  <unnamed>
       log:  E:\gtools\gtools.log
  log type:  text
 closed on:  18 Jun 2017, 14:09:04
--------------------------------------------------------------------------------------------------------------------------------
