
  ___  ____  ____  ____  ____ (R)
 /__    /   ____/   /   ____/
___/   /   /___/   /   /___/   13.1   Copyright 1985-2013 StataCorp LP
  Statistics/Data Analysis            StataCorp
                                      4905 Lakeway Drive
                                      College Station, Texas 77845 USA
                                      800-STATA-PC        http://www.stata.com
                                      979-696-4600        stata@stata.com
                                      979-696-4601 (fax)

Single-user Stata perpetual license:
       Serial number:  301306294610
         Licensed to:  Mauricio Caceres
                       mauricio.caceres.bravo@gmail.com

Notes:
      1.  Command line editing disabled
      2.  Stata running in batch mode

Note:  Your site can add messages to the introduction by editing the file
       stata.msg in the directory where Stata is installed.

. do gtools_tests.do 

. * ---------------------------------------------------------------------
. * Project: gtools
. * Program: gtools_tests.do
. * Author:  Mauricio Caceres Bravo <mauricio.caceres.bravo@gmail.com>
. * Created: Tue May 16 07:23:02 EDT 2017
. * Updated: Thu Jul 27 10:49:56 EDT 2017
. * Purpose: Unit tests for gtools
. * Version: 0.6.15
. * Manual:  help gcollapse, help gegen
. 
. * Stata start-up options
. * ----------------------
. 
. version 13

. clear all

. set more off

. set varabbrev off

. * set seed 42
. set seed 1729

. set linesize 128

. 
. * Main program wrapper
. * --------------------
. 
. program main
  1.     syntax, [CAPture NOIsily *]
  2. 
.     * Set up
.     * ------
. 
.     local  progname tests
  3.     local  start_time "$S_TIME $S_DATE"
  4.     di "Start: `start_time'"
  5. 
.     * Run the things
.     * --------------
. 
.     `capture' `noisily' {
  6.         * do test_gcollapse.do
.         * do test_gegen.do
.         * do bench_gcollapse.do
.         if ( `:list posof "checks" in options' ) {
  7. 
.             di ""
  8.             di "-------------------------------------"
  9.             di "Basic unit-tests $S_TIME $S_DATE"
 10.             di "-------------------------------------"
 11. 
.             unit_test, `noisily' test(checks_byvars_gcollapse,  oncollision(error) debug_force_single)
 12.             unit_test, `noisily' test(checks_byvars_gcollapse,  oncollision(error) forceio debug_io_read_method(0))
 13.             unit_test, `noisily' test(checks_byvars_gcollapse,  oncollision(error) forceio debug_io_read_method(1))
 14. 
.             unit_test, `noisily' test(checks_options_gcollapse, oncollision(error) debug_force_single)
 15.             unit_test, `noisily' test(checks_options_gcollapse, oncollision(error) debug_io_read_method(0))
 16.             unit_test, `noisily' test(checks_options_gcollapse, oncollision(error) debug_io_read_method(1))
 17. 
.             if !inlist("`c(os)'", "Windows") {
 18.                 unit_test, `noisily' test(checks_byvars_gcollapse,  oncollision(error) debug_force_multi)
 19.                 unit_test, `noisily' test(checks_options_gcollapse, oncollision(error) debug_force_multi)
 20.             }
 21. 
.             di ""
 22.             di "-----------------------------------------------------------"
 23.             di "Consistency checks (vs collapse, egen) $S_TIME $S_DATE"
 24.             di "-----------------------------------------------------------"
 25. 
.             consistency_gcollapse,       `noisily' oncollision(error)
 26.             consistency_gcollapse,       `noisily' oncollision(error) forceio debug_io_read_method(0)
 27.             consistency_gcollapse,       `noisily' oncollision(error) forceio debug_io_read_method(1)
 28.             consistency_gcollapse,       `noisily' oncollision(error) debug_io_check(1) debug_io_threshold(0)
 29.             consistency_gcollapse,       `noisily' oncollision(error) debug_io_check(1) debug_io_threshold(1000000)
 30.             consistency_gcollapse,       `noisily' oncollision(error) debug_force_single
 31.             consistency_gegen,           `noisily' oncollision(error) debug_force_single
 32.             consistency_gegen_gcollapse, `noisily' oncollision(error) debug_force_single
 33. 
.             if !inlist("`c(os)'", "Windows") {
 34.                 consistency_gcollapse,       `noisily' oncollision(error) debug_force_multi
 35.                 consistency_gegen,           `noisily' oncollision(error) debug_force_multi
 36.                 consistency_gegen_gcollapse, `noisily' oncollision(error) debug_force_multi
 37.             }
 38.         }
 39. 
.         if ( `:list posof "test" in options' ) {
 40.             cap ssc install ftools
 41.             cap ssc install moremata
 42. 
.             di "Short (quick) versions of the benchmarks"
 43.             bench_ftools y1 y2 y3 y4 y5 y6 y7 y8 y9 y10 y11 y12 y13 y14 y15, by(x3) kmin(3) kmax(4) kvars(15)
 44.             bench_ftools y1 y2 y3,          by(x3) kmin(3) kmax(4) kvars(3) stats(mean median)
 45.             bench_ftools y1 y2 y3 y4 y5 y6, by(x3) kmin(3) kmax(4) kvars(6) stats(sum mean count min max)
 46.             bench_sample_size x1 x2, by(group) kmin(3) kmax(4) pct(median iqr p23 p77)
 47.             bench_group_size  x1 x2, by(group) kmin(2) kmax(3) pct(median iqr p23 p77) obsexp(3)
 48. 
.             bench_switch_fcoll y1 y2 y3 y4 y5 y6 y7 y8 y9 y10 y11 y12 y13 y14 y15, by(x3) kmin(3) kmax(4) kvars(15) style(ftoo
> ls)
 49.             bench_switch_fcoll y1 y2 y3,          by(x3)    kmin(3) kmax(4) kvars(3) stats(mean median)             style(f
> tools)
 50.             bench_switch_fcoll y1 y2 y3 y4 y5 y6, by(x3)    kmin(3) kmax(4) kvars(6) stats(sum mean count min max)  style(f
> tools)
 51.             bench_switch_fcoll x1 x2, margin(N)   by(group) kmin(3) kmax(4) pct(median iqr p23 p77)                 style(g
> tools)
 52.             bench_switch_fcoll x1 x2, margin(J)   by(group) kmin(2) kmax(3) pct(median iqr p23 p77) obsexp(3)       style(g
> tools)
 53.         }
 54. 
.         if ( `:list posof "benchmark" in options' ) {
 55.             cap ssc install ftools
 56.             cap ssc install moremata
 57. 
.             bench_ftools y1 y2 y3 y4 y5 y6 y7 y8 y9 y10 y11 y12 y13 y14 y15, by(x3) kmin(4) kmax(7) kvars(15)
 58.             bench_ftools y1 y2 y3,             by(x3)    kmin(4) kmax(7) kvars(3) stats(mean median)
 59.             bench_ftools y1 y2 y3 y4 y5 y6,    by(x3)    kmin(4) kmax(7) kvars(6) stats(sum mean count min max)
 60.             bench_sample_size x1 x2, margin(N) by(group) kmin(4) kmax(7) pct(median iqr p23 p77)
 61.             bench_group_size  x1 x2, margin(J) by(group) kmin(3) kmax(6) pct(median iqr p23 p77) obsexp(6)
 62.         }
 63. 
.         if ( `:list posof "bench_fcoll" in options' ) {
 64.             cap ssc install ftools
 65.             cap ssc install moremata
 66. 
.             bench_switch_fcoll y1 y2 y3 y4 y5 y6 y7 y8 y9 y10 y11 y12 y13 y14 y15, by(x3) kmin(4) kmax(7) kvars(15) style(ftoo
> ls)
 67.             bench_switch_fcoll y1 y2 y3,          by(x3)  kmin(4) kmax(7) kvars(3) stats(mean median)               style(f
> tools)
 68.             bench_switch_fcoll y1 y2 y3 y4 y5 y6, by(x3)  kmin(4) kmax(7) kvars(6) stats(sum mean count min max)    style(f
> tools)
 69.             bench_switch_fcoll x1 x2, margin(N) by(group) kmin(4) kmax(7) pct(median iqr p23 p77)                   style(g
> tools)
 70.             bench_switch_fcoll x1 x2, margin(J) by(group) kmin(1) kmax(6) pct(median iqr p23 p77) obsexp(6)         style(g
> tools)
 71.         }
 72.     }
 73.     local rc = _rc
 74. 
.     exit_message, rc(`rc') progname(`progname') start_time(`start_time') `capture'
 75.     exit `rc'
 76. end

. 
. * ---------------------------------------------------------------------
. * Aux programs
. 
. capture program drop exit_message

. program exit_message
  1.     syntax, rc(int) progname(str) start_time(str) [CAPture]
  2.     local end_time "$S_TIME $S_DATE"
  3.     local time     "Start: `start_time'" _n(1) "End: `end_time'"
  4.     di ""
  5.     if (`rc' == 0) {
  6.         di "End: $S_TIME $S_DATE"
  7.         local paux      ran
  8.         local message "`progname' finished running" _n(2) "`time'"
  9.         local subject "`progname' `paux'"
 10.     }
 11.     else if ("`capture'" == "") {
 12.         di "WARNING: $S_TIME $S_DATE"
 13.         local paux ran with non-0 exit status
 14.         local message "`progname' ran but Stata gave error code r(`rc')" _n(2) "`time'"
 15.         local subject "`progname' `paux'"
 16.     }
 17.     else {
 18.         di "ERROR: $S_TIME $S_DATE"
 19.         local paux ran with errors
 20.         local message "`progname' stopped with error code r(`rc')" _n(2) "`time'"
 21.         local subject "`progname' `paux'"
 22.     }
 23.     di "`subject'"
 24.     di ""
 25.     di "`message'"
 26. end

. 
. * Wrapper for easy timer use
. cap program drop mytimer

. program mytimer, rclass
  1.     * args number what step
.     syntax anything, [minutes ts]
  2. 
.     tokenize `anything'
  3.     local number `1'
  4.     local what   `2'
  5.     local step   `3'
  6. 
.     if ("`what'" == "end") {
  7.         qui {
  8.             timer clear `number'
  9.             timer off   `number'
 10.         }
 11.         if ("`ts'" == "ts") mytimer_ts `step'
 12.     }
 13.     else if ("`what'" == "info") {
 14.         qui {
 15.             timer off `number'
 16.             timer list `number'
 17.         }
 18.         local seconds = r(t`number')
 19.         local prints  `:di trim("`:di %21.2gc `seconds''")' seconds
 20.         if ("`minutes'" != "") {
 21.             local minutes = `seconds' / 60
 22.             local prints  `:di trim("`:di %21.3gc `minutes''")' minutes
 23.         }
 24.         mytimer_ts Step `step' took `prints'
 25.         qui {
 26.             timer clear `number'
 27.             timer on    `number'
 28.         }
 29.     }
 30.     else {
 31.         qui {
 32.             timer clear `number'
 33.             timer on    `number'
 34.             timer off   `number'
 35.             timer list  `number'
 36.             timer on    `number'
 37.         }
 38.         if ("`ts'" == "ts") mytimer_ts `step'
 39.     }
 40. end

. 
. capture program drop mytimer_ts

. program mytimer_ts
  1.     display _n(1) "{hline 79}"
  2.     if ("`0'" != "") display `"`0'"'
  3.     display `"        Base: $S_FN"'
  4.     display  "        In memory: `:di trim("`:di %21.0gc _N'")' observations"
  5.     display  "        Timestamp: $S_TIME $S_DATE"
  6.     display  "{hline 79}" _n(1)
  7. end

. 
. capture program drop unit_test

. program unit_test
  1.     syntax, test(str) [NOIsily tab(int 4)]
  2.     local tabs `""'
  3.     forvalues i = 1 / `tab' {
  4.         local tabs "`tabs' "
  5.     }
  6.     cap `noisily' `test'
  7.     if ( _rc ) {
  8.         di as error `"`tabs'test(failed): `test'"'
  9.         exit _rc
 10.     }
 11.     else di as txt `"`tabs'test(passed): `test'"'
 12. end

. 
. capture program drop sim

. program sim, rclass
  1.     syntax, [offset(str) n(int 100) nj(int 10) njsub(int 2) string float sortg replace groupmiss outmiss]
  2.     qui {
  3.         if ("`offset'" == "") local offset 0
  4.         clear
  5.         set obs `n'
  6.         gen group  = ceil(`nj' *  _n / _N) + `offset'
  7.         bys group: gen groupsub   = ceil(`njsub' *  _n / _N)
  8.         bys group: gen groupfloat = ceil(`njsub' *  _n / _N) + 0.5
  9.         gen rsort = runiform() - 0.5
 10.         gen rnorm = rnormal()
 11.         if ( "`sortg'"     == "" ) sort rsort
 12.         if ( "`groupmiss'" != "" ) replace group = . if runiform() < 0.1
 13.         if ( "`outmiss'"   != "" ) replace rsort = . if runiform() < 0.1
 14.         if ( "`outmiss'"   != "" ) replace rnorm = . if runiform() < 0.1
 15.         if ( "`float'"     != "" ) replace group = group / `nj'
 16.         if ( "`string'" != "" ) {
 17.             tostring group,    `:di cond("`replace'" == "", "gen(groupstr)",    "replace")'
 18.             tostring groupsub, `:di cond("`replace'" == "", "gen(groupsubstr)", "replace")'
 19.             if ( "`replace'" == "replace" ) {
 20.                 replace group    = "" if group    == "."
 21.                 replace groupsub = "" if groupsub == "."
 22.             }
 23.             else {
 24.                 replace groupstr    = "" if mi(group)
 25.                 replace groupsubstr = "" if mi(groupsub)
 26.             }
 27.             local target `:di cond("`replace'" == "", "groupstr", "group")'
 28.             replace `target' = "i am a modesly long string" + `target' if !mi(`target')
 29.             local target `:di cond("`replace'" == "", "groupstr", "group")'
 30.             replace `target' = "ss" + `target' if !mi(`target')
 31.         }
 32.         gen long grouplong = ceil(`nj' *  _n / _N) + `offset'
 33.     }
 34.     qui sum rsort
 35.     di "Obs = " trim("`:di %21.0gc _N'") "; Groups = " trim("`:di %21.0gc `nj''")
 36.     compress
 37.     return local n  = `n'
 38.     return local nj = `nj'
 39.     return local offset = `offset'
 40.     return local string = ("`string'" != "")
 41. end

. 
. capture program drop consistency_gcollapse

. program consistency_gcollapse
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "consistency_gcollapse, `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     local stats sum mean sd max min count percent first last firstnm lastnm median iqr
  4.     local percentiles p1 p13 p30 p50 p70 p87 p99
  5.     local collapse_str ""
  6.     foreach stat of local stats {
  7.         local collapse_str `collapse_str' (`stat') `stat' = rnorm
  8.     }
  9.     foreach pct of local percentiles {
 10.         local collapse_str `collapse_str' (`pct') `pct' = rnorm
 11.     }
 12. 
.     qui sim, n(50000) nj(8) njsub(4) string groupmiss outmiss float
 13.     mytimer 9
 14.     qui `noisily' foreach i in 0 3 6 9 {
 15.         if ( `i' == 0 ) local by groupsub groupstr
 16.         if ( `i' == 3 ) local by groupstr groupsubstr 
 17.         if ( `i' == 6 ) local by groupsub group
 18.         if ( `i' == 9 ) local by grouplong
 19.     preserve
 20.         mytimer 9 info
 21.         gcollapse `collapse_str', by(`by') verbose benchmark `options'
 22.         mytimer 9 info "gcollapse to groups"
 23.         tempfile f`i'
 24.         save `f`i''
 25.     restore, preserve
 26.         mytimer 9 info
 27.         collapse `collapse_str', by(`by')
 28.         mytimer 9 info "collapse to groups"
 29.         tempfile f`:di `i' + 2'
 30.         save `f`:di `i' + 2''
 31.     restore
 32.     }
 33.     mytimer 9 off
 34. 
.     qui sim, n(50000) nj(8000) njsub(4) string groupmiss outmiss
 35.     qui `noisily' foreach i in 12 15 18 21 {
 36.         if (`i' == 12) local by groupsub groupstr
 37.         if (`i' == 15) local by groupstr
 38.         if (`i' == 18) local by groupsub group
 39.         if (`i' == 21) local by grouplong
 40.     preserve
 41.         mytimer 9 info
 42.         gcollapse `collapse_str', by(`by') verbose benchmark `options'
 43.         mytimer 9 info "gcollapse to groups"
 44.         tempfile f`i'
 45.         save `f`i''
 46.     restore, preserve
 47.         mytimer 9 info
 48.         collapse `collapse_str', by(`by')
 49.         mytimer 9 info "collapse to groups"
 50.         tempfile f`:di `i' + 2'
 51.         save `f`:di `i' + 2''
 52.     restore
 53.     }
 54. 
.     qui sim, n(50000) nj(8000) njsub(4) string groupmiss outmiss
 55.     qui `noisily' foreach i in 24 27 30 33 {
 56.         if (`i' == 24) local by groupsub groupstr
 57.         if (`i' == 27) local by groupstr
 58.         if (`i' == 30) local by groupsub group
 59.         if (`i' == 33) local by grouplong
 60.         local in1  = ceil((0.00 + 0.25 * runiform()) * `=_N')
 61.         local in2  = ceil((0.75 + 0.25 * runiform()) * `=_N')
 62.         local from = cond(`in1' < `in2', `in1', `in2')
 63.         local to   = cond(`in1' > `in2', `in1', `in2')
 64.         local ifin if rsort < 0 in `from' / `to'
 65.         qui count `ifin'
 66.         if (`r(N)' == 0) {
 67.             local in1  = ceil(runiform() * 10)
 68.             local in2  = ceil(`=_N' - runiform() * 10)
 69.             local from = cond(`in1' < `in2', `in1', `in2')
 70.             local to   = cond(`in1' > `in2', `in1', `in2')
 71.             local ifin if rsort < 0 in `from' / `to'
 72.         }
 73.     preserve
 74.         mytimer 9 info
 75.         gcollapse `collapse_str' `ifin', by(`by') verbose benchmark `options'
 76.         mytimer 9 info "gcollapse to groups"
 77.         tempfile f`i'
 78.         save `f`i''
 79.     restore, preserve
 80.         mytimer 9 info
 81.         collapse `collapse_str' `ifin', by(`by')
 82.         mytimer 9 info "collapse to groups"
 83.         tempfile f`:di `i' + 2'
 84.         save `f`:di `i' + 2''
 85.     restore
 86.     }
 87. 
.     foreach i in 0 3 6 9 12 15 18 21 24 27 30 33 {
 88.     preserve
 89.     use `f`:di `i' + 2'', clear
 90.         local bad_any = 0
 91.         if (`i' == 0  ) local bad groupsub groupstr
 92.         if (`i' == 3  ) local bad groupstr groupsubstr 
 93.         if (`i' == 6  ) local bad groupsub group
 94.         if (`i' == 9  ) local bad grouplong
 95.         if (`i' == 12 ) local bad groupsub groupstr
 96.         if (`i' == 15 ) local bad groupstr
 97.         if (`i' == 18 ) local bad groupsub group
 98.         if (`i' == 21 ) local bad grouplong
 99.         if (`i' == 24 ) local bad groupsub groupstr
100.         if (`i' == 27 ) local bad groupstr
101.         if (`i' == 30 ) local bad groupsub group
102.         if (`i' == 33 ) local bad grouplong
103.         if ( `i' == 0 ) {
104.             di _n(1) "Comparing collapse for N = 50,000 with J1 = 8 and J2 = 4"
105.         }
106.         if ( `i' == 12 ) {
107.             di _n(1) "Comparing collapse for N = 50,000 with J1 = 8,000 and J2 = 4"
108.         }
109.         if ( `i' == 24 ) {
110.             di _n(1) "Comparing collapse for N = 50,000 with J1 = 8,000 and J2 = 4 (if in)"
111.         }
112.         local by `bad'
113.         foreach var in `stats' `percentiles' {
114.             rename `var' c_`var'
115.         }
116.         qui merge 1:1 `by' using `f`i'', assert(3)
117.         foreach var in `stats' `percentiles' {
118.             qui count if ( (abs(`var' - c_`var') > `tol') & (`var' != c_`var'))
119.             if ( `r(N)' > 0 ) {
120.                 gen bad_`var' = abs(`var' - c_`var') * (`var' != c_`var')
121.                 local bad `bad' *`var'
122.                 di "`var' has `:di r(N)' mismatches".
123.                 local bad_any = 1
124.             }
125.         }
126.         if ( `bad_any' ) {
127.             order `bad'
128.             egen bad_any = rowmax(bad_*)
129.             l *count* `bad' if bad_any
130.             sum bad_*
131.             exit 9
132.         }
133.         else {
134.             di "    compare_collapse (passed): gcollapse results equal to collapse (tol = `tol', `by')"
135.         }
136.     restore
137.     }
138. end

. 
. capture program drop checks_byvars_gcollapse

. program checks_byvars_gcollapse
  1.     syntax, [*]
  2.     di _n(1) "{hline 80}" _n(1) "checks_byvars_gcollapse `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     sim, n(1000) nj(250) string
  4. 
.     set rmsg on
  5.     preserve
  6.         gcollapse (mean) rnorm (sum) sum = rnorm (sd) sd = rnorm, verbose `options' by(groupstr)
  7.     restore, preserve
  8.         gcollapse (mean) rnorm (sum) sum = rnorm (sd) sd = rnorm, verbose `options' by(group)
  9.     restore, preserve
 10.         gcollapse (mean) rnorm (sum) sum = rnorm (sd) sd = rnorm, verbose `options' by(groupsub)
 11.     restore, preserve
 12.         gcollapse (mean) rnorm (sum) sum = rnorm (sd) sd = rnorm, verbose `options' by(grouplong)
 13.     restore, preserve
 14.         gcollapse (mean) rnorm (sum) sum = rnorm (sd) sd = rnorm, verbose `options' by(groupsub)
 15.     restore, preserve
 16.         gcollapse (mean) rnorm (sum) sum = rnorm (sd) sd = rnorm, verbose `options' by(group groupsub)
 17.     restore, preserve
 18.         gcollapse (mean) rnorm (sum) sum = rnorm (sd) sd = rnorm, verbose `options' by(grouplong groupsub)
 19.     restore, preserve
 20.         gcollapse (mean) rnorm (sum) sum = rnorm (sd) sd = rnorm, verbose `options' by(groupstr groupsub)
 21.     restore
 22.     set rmsg off
 23. 
.     di ""
 24.     di as txt "Passed! checks_byvars_gcollapse `options'"
 25. end

. 
. capture program drop checks_options_gcollapse

. program checks_options_gcollapse
  1.     syntax, [*]
  2.     di _n(1) "{hline 80}" _n(1) "checks_options_gcollapse `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     local stats mean count median iqr
  4.     local collapse_str ""
  5.     foreach stat of local stats {
  6.         local collapse_str `collapse_str' (`stat') `stat' = rnorm `stat'2 = rnorm
  7.     }
  8. 
.     sim, n(200) nj(10) string outmiss
  9.     preserve
 10.         gcollapse `collapse_str', by(groupstr) verbose benchmark `options'
 11.         if ( `=_N' > 10 ) l in 1/10
 12.         if ( `=_N' < 10 ) l
 13.     restore, preserve
 14.         gcollapse `collapse_str', by(groupstr) verbose forceio `options'
 15.         if ( `=_N' > 10 ) l in 1/10
 16.         if ( `=_N' < 10 ) l
 17.     restore, preserve
 18.         gcollapse `collapse_str', by(groupstr) verbose forcemem `options'
 19.         if ( `=_N' > 10 ) l in 1/10
 20.         if ( `=_N' < 10 ) l
 21.     restore, preserve
 22.         gcollapse `collapse_str', by(groupstr) verbose unsorted `options'
 23.         if ( `=_N' > 10 ) l in 1/10
 24.         if ( `=_N' < 10 ) l
 25.     restore, preserve
 26.         gcollapse `collapse_str', by(groupstr) verbose benchmark cw `options'
 27.         if ( `=_N' > 10 ) l in 1/10
 28.         if ( `=_N' < 10 ) l
 29.     restore, preserve
 30.         gcollapse `collapse_str', by(groupstr) verbose benchmark fast `options'
 31.         if ( `=_N' > 10 ) l in 1/10
 32.         if ( `=_N' < 10 ) l
 33.     restore, preserve
 34.         gcollapse `collapse_str', by(groupstr) double `options'
 35.         if ( `=_N' > 10 ) l in 1/10
 36.         if ( `=_N' < 10 ) l
 37.     restore, preserve
 38.         gcollapse `collapse_str', by(groupstr) merge `options'
 39.         if ( `=_N' > 10 ) l in 1/10
 40.         if ( `=_N' < 10 ) l
 41.     restore
 42. 
.     preserve
 43.         gcollapse `collapse_str', verbose benchmark `options'
 44.         if ( `=_N' > 10 ) l in 1/10
 45.         if ( `=_N' < 10 ) l
 46.     restore, preserve
 47.         gcollapse rnorm (mean) mean_rnorm = rnorm, by(groupstr groupsub) verbose benchmark `options'
 48.         assert rnorm == mean_rnorm
 49.         if ( `=_N' > 10 ) l in 1/10
 50.         if ( `=_N' < 10 ) l
 51.     restore, preserve
 52.         gcollapse rnorm, verbose benchmark `options'
 53.         if ( `=_N' > 10 ) l in 1/10
 54.         if ( `=_N' < 10 ) l
 55.     restore
 56. 
.     sort groupstr groupsub
 57.     preserve
 58.         gcollapse `collapse_str', by(groupstr groupsub) verbose benchmark `options'
 59.         if ( `=_N' > 10 ) l in 1/10
 60.         if ( `=_N' < 10 ) l
 61.     restore, preserve
 62.         gcollapse `collapse_str', by(groupstr groupsub) verbose benchmark smart `options'
 63.         if ( `=_N' > 10 ) l in 1/10
 64.         if ( `=_N' < 10 ) l
 65.     restore, preserve
 66.         gcollapse `collapse_str', by(groupsub groupstr) verbose benchmark smart `options'
 67.         if ( `=_N' > 10 ) l in 1/10
 68.         if ( `=_N' < 10 ) l
 69.     restore, preserve
 70.         gcollapse `collapse_str', by(groupstr) verbose benchmark `options'
 71.         if ( `=_N' > 10 ) l in 1/10
 72.         if ( `=_N' < 10 ) l
 73.     restore, preserve
 74.         gcollapse `collapse_str', by(groupstr) verbose benchmark smart `options'
 75.         if ( `=_N' > 10 ) l in 1/10
 76.         if ( `=_N' < 10 ) l
 77.     restore, preserve
 78.         gcollapse `collapse_str', by(groupsub) verbose benchmark smart `options'
 79.         if ( `=_N' > 10 ) l in 1/10
 80.         if ( `=_N' < 10 ) l
 81.     restore, preserve
 82.         gcollapse `collapse_str', by(groupsub) verbose benchmark `options'
 83.         if ( `=_N' > 10 ) l in 1/10
 84.         if ( `=_N' < 10 ) l
 85.     restore
 86. 
.     di ""
 87.     di as txt "Passed! checks_options_gcollapse `options'"
 88. end

. capture program drop consistency_gegen

. program consistency_gegen
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "consistency_gegen, `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     local stats total sum mean sd max min count median iqr
  4.     local percentiles 1 10 30 50 70 90 99
  5.     qui `noisily' sim, n(500000) nj(10000) njsub(4) string groupmiss outmiss
  6. 
.     cap drop g*_*
  7.     cap drop c*_*
  8.     di _n(1) "Checking full egen range"
  9.     foreach fun of local stats {
 10.         qui `noisily' gegen g_`fun' = `fun'(rnorm), by(groupstr groupsub) `options'
 11.         qui `noisily'  egen c_`fun' = `fun'(rnorm), by(groupstr groupsub)
 12.         cap noi assert (g_`fun' == c_`fun') | abs(g_`fun' - c_`fun') < `tol'
 13.         if ( _rc ) {
 14.             di as err "    compare_egen (failed): gegen `fun' not equal to egen (tol = `tol')"
 15.             exit _rc
 16.         }
 17.         else di as txt "    compare_egen (passed): gegen `fun' results similar to egen (tol = `tol')"
 18.             
.     }
 19. 
.     foreach p in `percentiles' {
 20.         qui  `noisily' gegen g_p`p' = pctile(rnorm), by(groupstr groupsub) p(`p') `options'
 21.         qui  `noisily'  egen c_p`p' = pctile(rnorm), by(groupstr groupsub) p(`p')
 22.         cap noi assert (g_p`p' == c_p`p') | abs(g_p`p' - c_p`p') < `tol'
 23.         if ( _rc ) {
 24.             di as err "    compare_egen (failed): gegen percentile `p' not equal to egen (tol = `tol')"
 25.             exit _rc
 26.         }
 27.         else di as txt "    compare_egen (passed): gegen percentile `p' results similar to egen (tol = `tol')"
 28.     }
 29. 
.     local fun tag
 30.     {
 31.         qui  `noisily' gegen g_`fun' = `fun'(groupstr groupsub), v `options'
 32.         qui  `noisily'  egen c_`fun' = `fun'(groupstr groupsub)
 33.         cap noi assert (g_`fun' == c_`fun') | abs(g_`fun' - c_`fun') < `tol'
 34.         if ( _rc ) {
 35.             di as err "    compare_egen (failed): gegen `fun' not equal to egen (tol = `tol')"
 36.             exit _rc
 37.         }
 38.         else di as txt "    compare_egen (passed): gegen `fun' results similar to egen (tol = `tol')"
 39.     }
 40. 
.     local fun group
 41.     {
 42.         qui  `noisily' gegen g_`fun' = `fun'(groupstr groupsub), v `options'
 43.         qui  `noisily'  egen c_`fun' = `fun'(groupstr groupsub)
 44.         qui bys g_`fun' (c_`fun'): gen byte g_`fun'_check = c_`fun'[1] == c_`fun'[_N]
 45.         qui bys c_`fun' (g_`fun'): gen byte c_`fun'_check = g_`fun'[1] == g_`fun'[_N]
 46.         cap noi assert g_`fun'_check & c_`fun'_check
 47.         if ( _rc ) {
 48.             di as err "    compare_egen (failed): gegen `fun' IDs do not map to egen IDs"
 49.             exit _rc
 50.         }
 51.         else di as txt "    compare_egen (passed): gegen `fun' IDs correctly map to egen IDs"
 52.     }
 53. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.     cap drop g*_*
 54.     cap drop c*_*
 55.     di "Checking egen if range"
 56.     foreach fun of local stats {
 57.         qui  `noisily' gegen gif_`fun' = `fun'(rnorm) if rsort > 0, by(groupstr groupsub) `options'
 58.         qui  `noisily'  egen cif_`fun' = `fun'(rnorm) if rsort > 0, by(groupstr groupsub)
 59.         cap noi assert (gif_`fun' == cif_`fun') | abs(gif_`fun' - cif_`fun') < `tol'
 60.         if ( _rc ) {
 61.             di as err "    compare_egen_if (failed): gegen `fun' not equal to egen (tol = `tol')"
 62.             exit _rc
 63.         }
 64.         else di as txt "    compare_egen_if (passed): gegen `fun' results similar to egen (tol = `tol')"
 65.     }
 66. 
.     foreach p in `percentiles' {
 67.         qui  `noisily' gegen g_p`p' = pctile(rnorm) if rsort > 0, by(groupstr groupsub) p(`p') `options'
 68.         qui  `noisily'  egen c_p`p' = pctile(rnorm) if rsort > 0, by(groupstr groupsub) p(`p')
 69.         cap noi assert (g_p`p' == c_p`p') | abs(g_p`p' - c_p`p') < `tol'
 70.         if ( _rc ) {
 71.             di as err "    compare_egen_if (failed): gegen percentile `p' not equal to egen (tol = `tol')"
 72.             exit _rc
 73.         }
 74.         else di as txt "    compare_egen_if (passed): gegen percentile `p' results similar to egen (tol = `tol')"
 75.     }
 76. 
.     local fun tag
 77.     {
 78.         qui  `noisily' gegen gif_`fun' = `fun'(groupstr groupsub) if rsort > 0, v `options'
 79.         qui  `noisily'  egen cif_`fun' = `fun'(groupstr groupsub) if rsort > 0
 80.         cap noi assert (gif_`fun' == cif_`fun') | abs(gif_`fun' - cif_`fun') < `tol'
 81.         if ( _rc ) {
 82.             di as err "    compare_egen_if (failed): gegen `fun' not equal to egen (tol = `tol')"
 83.             exit _rc
 84.         }
 85.         else di as txt "    compare_egen_if (passed): gegen `fun' results similar to egen (tol = `tol')"
 86.     }
 87. 
.     local fun group
 88.     {
 89.         qui  `noisily' gegen g_`fun' = `fun'(groupstr groupsub) if rsort > 0, v `options'
 90.         qui  `noisily'  egen c_`fun' = `fun'(groupstr groupsub) if rsort > 0
 91.         qui bys g_`fun' (c_`fun'): gen byte g_`fun'_check = c_`fun'[1] == c_`fun'[_N]
 92.         qui bys c_`fun' (g_`fun'): gen byte c_`fun'_check = g_`fun'[1] == g_`fun'[_N]
 93.         cap noi assert g_`fun'_check & c_`fun'_check
 94.         if ( _rc ) {
 95.             di as err "    compare_egen_if (failed): gegen `fun' IDs do not map to egen IDs"
 96.             exit _rc
 97.         }
 98.         else di as txt "    compare_egen_if (passed): gegen `fun' IDs correctly map to egen IDs"
 99.     }
100. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.     cap drop g*_*
101.     cap drop c*_*
102.     di "Checking egen in range"
103.     foreach fun of local stats {
104.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
105.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
106.         local from = cond(`in1' < `in2', `in1', `in2')
107.         local to   = cond(`in1' > `in2', `in1', `in2')
108.         qui  `noisily' gegen gin_`fun' = `fun'(rnorm) in `from' / `to', by(groupstr groupsub) `options'
109.         qui  `noisily'  egen cin_`fun' = `fun'(rnorm) in `from' / `to', by(groupstr groupsub)
110.         cap noi assert (gin_`fun' == cin_`fun') | abs(gin_`fun' - cin_`fun') < `tol'
111.         if ( _rc ) {
112.             di as err "    compare_egen_in (failed): gegen `fun' not equal to egen (tol = `tol')"
113.             exit _rc
114.         }
115.         else di as txt "    compare_egen_in (passed): gegen `fun' results similar to egen (tol = `tol')"
116.     }
117. 
.     foreach p in `percentiles' {
118.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
119.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
120.         local from = cond(`in1' < `in2', `in1', `in2')
121.         local to   = cond(`in1' > `in2', `in1', `in2')
122.         qui  `noisily' gegen g_p`p' = pctile(rnorm) in `from' / `to', by(groupstr groupsub) p(`p') `options'
123.         qui  `noisily'  egen c_p`p' = pctile(rnorm) in `from' / `to', by(groupstr groupsub) p(`p')
124.         cap noi assert (g_p`p' == c_p`p') | abs(g_p`p' - c_p`p') < `tol'
125.         if ( _rc ) {
126.             di as err "    compare_egen_in (failed): gegen percentile `p' not equal to egen (tol = `tol')"
127.             exit _rc
128.         }
129.         else di as txt "    compare_egen_in (passed): gegen percentile `p' results similar to egen (tol = `tol')"
130.     }
131. 
.     local fun tag
132.     {
133.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
134.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
135.         local from = cond(`in1' < `in2', `in1', `in2')
136.         local to   = cond(`in1' > `in2', `in1', `in2')
137.         qui  `noisily' gegen gin_`fun' = `fun'(groupstr groupsub) in `from' / `to', v b `options'
138.         qui  `noisily'  egen cin_`fun' = `fun'(groupstr groupsub) in `from' / `to'
139.         cap noi assert (gin_`fun' == cin_`fun') | abs(gin_`fun' - cin_`fun') < `tol'
140.         if ( _rc ) {
141.             di as err "    compare_egen_in (failed): gegen `fun' not equal to egen (tol = `tol')"
142.             exit _rc
143.         }
144.         else di as txt "    compare_egen_in (passed): gegen `fun' results similar to egen (tol = `tol')"
145.     }
146. 
.     local fun group
147.     {
148.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
149.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
150.         local from = cond(`in1' < `in2', `in1', `in2')
151.         local to   = cond(`in1' > `in2', `in1', `in2')
152.         qui  `noisily' gegen g_`fun' = `fun'(groupstr groupsub) in `from' / `to', v `options'
153.         qui  `noisily'  egen c_`fun' = `fun'(groupstr groupsub) in `from' / `to'
154.         qui bys g_`fun' (c_`fun'): gen byte g_`fun'_check = c_`fun'[1] == c_`fun'[_N]
155.         qui bys c_`fun' (g_`fun'): gen byte c_`fun'_check = g_`fun'[1] == g_`fun'[_N]
156.         cap noi assert g_`fun'_check & c_`fun'_check
157.         if ( _rc ) {
158.             di as err "    compare_egen_in (failed): gegen `fun' IDs do not map to egen IDs"
159.             exit _rc
160.         }
161.         else di as txt "    compare_egen_in (passed): gegen `fun' IDs correctly map to egen IDs"
162.     }
163. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.     cap drop g*_*
164.     cap drop c*_*
165.     di "Checking egen if in range"
166.     foreach fun of local stats {
167.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
168.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
169.         local from = cond(`in1' < `in2', `in1', `in2')
170.         local to   = cond(`in1' > `in2', `in1', `in2')
171.         qui  `noisily' gegen gifin_`fun' = `fun'(rnorm) if rsort < 0 in `from' / `to', by(groupstr groupsub) `options'
172.         qui  `noisily'  egen cifin_`fun' = `fun'(rnorm) if rsort < 0 in `from' / `to', by(groupstr groupsub)
173.         cap noi assert (gifin_`fun' == cifin_`fun') | abs(gifin_`fun' - cifin_`fun') < `tol'
174.         if ( _rc ) {
175.             di as err "    compare_egen_ifin (failed): gegen `fun' not equal to egen (tol = `tol')"
176.             exit _rc
177.         }
178.         else di as txt "    compare_egen_ifin (passed): gegen `fun' results similar to egen (tol = `tol')"
179.     }
180. 
.     foreach p in `percentiles' {
181.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
182.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
183.         local from = cond(`in1' < `in2', `in1', `in2')
184.         local to   = cond(`in1' > `in2', `in1', `in2')
185.         qui  `noisily' gegen g_p`p' = pctile(rnorm) if rsort < 0 in `from' / `to', by(groupstr groupsub) p(`p') `options'
186.         qui  `noisily'  egen c_p`p' = pctile(rnorm) if rsort < 0 in `from' / `to', by(groupstr groupsub) p(`p')
187.         cap noi assert (g_p`p' == c_p`p') | abs(g_p`p' - c_p`p') < `tol'
188.         if ( _rc ) {
189.             di as err "    compare_egen_ifin (failed): gegen percentile `p' not equal to egen (tol = `tol')"
190.             exit _rc
191.         }
192.         else di as txt "    compare_egen_ifin (passed): gegen percentile `p' results similar to egen (tol = `tol')"
193.     }
194. 
.     local fun tag
195.     {
196.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
197.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
198.         local from = cond(`in1' < `in2', `in1', `in2')
199.         local to   = cond(`in1' > `in2', `in1', `in2')
200.         qui  `noisily' gegen gifin_`fun' = `fun'(groupstr groupsub) if rsort < 0 in `from' / `to', v `options'
201.         qui  `noisily'  egen cifin_`fun' = `fun'(groupstr groupsub) if rsort < 0 in `from' / `to'
202.         cap noi assert (gifin_`fun' == cifin_`fun') | abs(gifin_`fun' - cifin_`fun') < `tol'
203.         if ( _rc ) {
204.             di as err "    compare_egen_ifin (failed): gegen `fun' not equal to egen (tol = `tol')"
205.             exit _rc
206.         }
207.         else di as txt "    compare_egen_ifin (passed): gegen `fun' results similar to egen (tol = `tol')"
208.     }
209. 
.     local fun group
210.     {
211.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
212.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
213.         local from = cond(`in1' < `in2', `in1', `in2')
214.         local to   = cond(`in1' > `in2', `in1', `in2')
215.         qui  `noisily' gegen g_`fun' = `fun'(groupstr groupsub) if rsort < 0 in `from' / `to', v `options'
216.         qui  `noisily'  egen c_`fun' = `fun'(groupstr groupsub) if rsort < 0 in `from' / `to'
217.         qui bys g_`fun' (c_`fun'): gen byte g_`fun'_check = c_`fun'[1] == c_`fun'[_N]
218.         qui bys c_`fun' (g_`fun'): gen byte c_`fun'_check = g_`fun'[1] == g_`fun'[_N]
219.         cap noi assert g_`fun'_check & c_`fun'_check
220.         if ( _rc ) {
221.             di as err "    compare_egen_ifin (failed): gegen `fun' IDs do not map to egen IDs"
222.             exit _rc
223.         }
224.         else di as txt "    compare_egen_ifin (passed): gegen `fun' IDs correctly map to egen IDs"
225.     }
226. end

. 
. capture program drop consistency_gegen_gcollapse

. program consistency_gegen_gcollapse
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "consistency_gegen_gcollapse, `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     qui `noisily' {
  4.         sim, n(20000) nj(100) njsub(2) string outmiss
  5.         gegen id = group(groupstr groupsub)
  6.         gegen double mean    = mean   (rnorm),  by(groupstr groupsub) verbose benchmark `options'
  7.         gegen double sum     = sum    (rnorm),  by(groupstr groupsub) `options'
  8.         gegen double median  = median (rnorm),  by(groupstr groupsub) `options'
  9.         gegen double sd      = sd     (rnorm),  by(groupstr groupsub) `options'
 10.         gegen double iqr     = iqr    (rnorm),  by(groupstr groupsub) `options'
 11.         gegen double first   = first  (rnorm),  by(groupstr groupsub) `options' v b
 12.         gegen double last    = last   (rnorm),  by(groupstr groupsub) `options'
 13.         gegen double firstnm = firstnm(rnorm),  by(groupstr groupsub) `options'
 14.         gegen double lastnm  = lastnm (rnorm),  by(groupstr groupsub) `options'
 15.         gegen double q10     = pctile (rnorm),  by(groupstr groupsub) `options' p(10.5)
 16.         gegen double q30     = pctile (rnorm),  by(groupstr groupsub) `options' p(30)
 17.         gegen double q70     = pctile (rnorm),  by(groupstr groupsub) `options' p(70)
 18.         gegen double q90     = pctile (rnorm),  by(groupstr groupsub) `options' p(90.5)
 19. 
.         gcollapse (mean)    g_mean    = rnorm  ///
>                   (sum)     g_sum     = rnorm  ///
>                   (median)  g_median  = rnorm  ///
>                   (sd)      g_sd      = rnorm  ///
>                   (iqr)     g_iqr     = rnorm  ///
>                   (first)   g_first   = rnorm  ///
>                   (last)    g_last    = rnorm  ///
>                   (firstnm) g_firstnm = rnorm  ///
>                   (lastnm)  g_lastnm  = rnorm  ///
>                   (p10.5)   g_q10     = rnorm  ///
>                   (p30)     g_q30     = rnorm  ///
>                   (p70)     g_q70     = rnorm  ///
>                   (p90.5)   g_q90     = rnorm, by(id) benchmark verbose `options' merge double
 20.     }
 21. 
.     di _n(1) "Checking gegen vs gcollapse full range"
 22.     foreach fun in mean sum median sd iqr first last firstnm lastnm q10 q30 q70 q90 {
 23.         cap noi assert (g_`fun' == `fun') | abs(g_`fun' - `fun') < `tol'
 24.         if ( _rc ) {
 25.             recast double g_`fun' `fun'
 26.             cap noi assert (g_`fun' == `fun') | abs(g_`fun' - `fun') < `tol'
 27.             if ( _rc ) {
 28.                 di as err "    compare_gegen_gcollapse (failed): `fun' yielded different results (tol = `tol')"
 29.                 exit _rc
 30.             }
 31.             else di as txt "    compare_gegen_gcollapse (passed): `fun' yielded same results (tol = `tol')"
 32.         }
 33.         else di as txt "    compare_gegen_gcollapse (passed): `fun' yielded same results (tol = `tol')"
 34.     }
 35. 
.     qui `noisily' {
 36.         sim, n(20000) nj(100) njsub(2) string outmiss
 37. 
.         local in1  = ceil((0.00 + 0.25 * runiform()) * `=_N')
 38.         local in2  = ceil((0.75 + 0.25 * runiform()) * `=_N')
 39.         local from = cond(`in1' < `in2', `in1', `in2')
 40.         local to   = cond(`in1' > `in2', `in1', `in2')
 41.         qui count if rsort < 0 in `from' / `to'
 42.         if ( `r(N)' == 0 ) {
 43.             local in1  = ceil(runiform() * 10)
 44.             local in2  = ceil(`=_N' - runiform() * 10)
 45.             local from = cond(`in1' < `in2', `in1', `in2')
 46.             local to   = cond(`in1' > `in2', `in1', `in2')
 47.         }
 48. 
.         gegen id = group(groupstr groupsub) in `from' / `to'
 49.         gegen double mean    = mean   (rnorm) in `from' / `to',  by(groupstr groupsub) verbose benchmark `options'
 50.         gegen double sum     = sum    (rnorm) in `from' / `to',  by(groupstr groupsub) `options'
 51.         gegen double median  = median (rnorm) in `from' / `to',  by(groupstr groupsub) `options'
 52.         gegen double sd      = sd     (rnorm) in `from' / `to',  by(groupstr groupsub) `options'
 53.         gegen double iqr     = iqr    (rnorm) in `from' / `to',  by(groupstr groupsub) `options'
 54.         gegen double first   = first  (rnorm) in `from' / `to',  by(groupstr groupsub) `options' v b
 55.         gegen double last    = last   (rnorm) in `from' / `to',  by(groupstr groupsub) `options'
 56.         gegen double firstnm = firstnm(rnorm) in `from' / `to',  by(groupstr groupsub) `options'
 57.         gegen double lastnm  = lastnm (rnorm) in `from' / `to',  by(groupstr groupsub) `options'
 58.         gegen double q10     = pctile (rnorm) in `from' / `to',  by(groupstr groupsub) `options' p(10.5)
 59.         gegen double q30     = pctile (rnorm) in `from' / `to',  by(groupstr groupsub) `options' p(30)
 60.         gegen double q70     = pctile (rnorm) in `from' / `to',  by(groupstr groupsub) `options' p(70)
 61.         gegen double q90     = pctile (rnorm) in `from' / `to',  by(groupstr groupsub) `options' p(90.5)
 62. 
.         gcollapse (mean)    g_mean    = rnorm  ///
>                   (sum)     g_sum     = rnorm  ///
>                   (median)  g_median  = rnorm  ///
>                   (sd)      g_sd      = rnorm  ///
>                   (iqr)     g_iqr     = rnorm  ///
>                   (first)   g_first   = rnorm  ///
>                   (last)    g_last    = rnorm  ///
>                   (firstnm) g_firstnm = rnorm  ///
>                   (lastnm)  g_lastnm  = rnorm  ///
>                   (p10.5)   g_q10     = rnorm  ///
>                   (p30)     g_q30     = rnorm  ///
>                   (p70)     g_q70     = rnorm  ///
>                   (p90.5)   g_q90     = rnorm in `from' / `to', by(id) benchmark verbose `options' merge double
 63.     }
 64. 
.     di _n(1) "Checking gegen vs gcollapse in range"
 65.     foreach fun in mean sum median sd iqr first last firstnm lastnm q10 q30 q70 q90 {
 66.         cap noi assert (g_`fun' == `fun') | abs(g_`fun' - `fun') < `tol'
 67.         if ( _rc ) {
 68.             recast double g_`fun' `fun'
 69.             cap noi assert (g_`fun' == `fun') | abs(g_`fun' - `fun') < `tol'
 70.             if ( _rc ) {
 71.                 di as err "    compare_gegen_gcollapse_in (failed): `fun' yielded different results (tol = `tol')"
 72.                 exit _rc
 73.             }
 74.             else di as txt "    compare_gegen_gcollapse_in (passed): `fun' yielded same results (tol = `tol')"
 75.         }
 76.         else di as txt "    compare_gegen_gcollapse_in (passed): `fun' yielded same results (tol = `tol')"
 77.     }
 78. 
.     qui `noisily' {
 79.         sim, n(20000) nj(100) njsub(2) string outmiss
 80. 
.         local in1  = ceil((0.00 + 0.25 * runiform()) * `=_N')
 81.         local in2  = ceil((0.75 + 0.25 * runiform()) * `=_N')
 82.         local from = cond(`in1' < `in2', `in1', `in2')
 83.         local to   = cond(`in1' > `in2', `in1', `in2')
 84.         qui count if rsort < 0 in `from' / `to'
 85.         if ( `r(N)' == 0 ) {
 86.             local in1  = ceil(runiform() * 10)
 87.             local in2  = ceil(`=_N' - runiform() * 10)
 88.             local from = cond(`in1' < `in2', `in1', `in2')
 89.             local to   = cond(`in1' > `in2', `in1', `in2')
 90.         }
 91. 
.         gegen id = group(groupstr groupsub)   if rsort < 0 in `from' / `to'
 92.         gegen double mean    = mean   (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) verbose benchmark `opti
> ons'
 93.         gegen double sum     = sum    (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options'
 94.         gegen double median  = median (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options'
 95.         gegen double sd      = sd     (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options'
 96.         gegen double iqr     = iqr    (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options'
 97.         gegen double first   = first  (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options' v b
 98.         gegen double last    = last   (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options'
 99.         gegen double firstnm = firstnm(rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options'
100.         gegen double lastnm  = lastnm (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options'
101.         gegen double q10     = pctile (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options' p(10.5)
102.         gegen double q30     = pctile (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options' p(30)
103.         gegen double q70     = pctile (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options' p(70)
104.         gegen double q90     = pctile (rnorm) if rsort < 0 in `from' / `to',  by(groupstr groupsub) `options' p(90.5)
105. 
.         keep if rsort < 0 in `from' / `to'
106.         gcollapse (mean)    g_mean    = rnorm  ///
>                   (sum)     g_sum     = rnorm  ///
>                   (median)  g_median  = rnorm  ///
>                   (sd)      g_sd      = rnorm  ///
>                   (iqr)     g_iqr     = rnorm  ///
>                   (first)   g_first   = rnorm  ///
>                   (last)    g_last    = rnorm  ///
>                   (firstnm) g_firstnm = rnorm  ///
>                   (lastnm)  g_lastnm  = rnorm  ///
>                   (p10.5)   g_q10     = rnorm  ///
>                   (p30)     g_q30     = rnorm  ///
>                   (p70)     g_q70     = rnorm  ///
>                   (p90.5)   g_q90     = rnorm, by(id) benchmark verbose `options' merge double
107.     }
108. 
.     di _n(1) "Checking gegen vs gcollapse if in range"
109.     foreach fun in mean sum median sd iqr first last firstnm lastnm q10 q30 q70 q90 {
110.         cap noi assert (g_`fun' == `fun') | abs(g_`fun' - `fun') < `tol'
111.         if ( _rc ) {
112.             recast double g_`fun' `fun'
113.             cap noi assert (g_`fun' == `fun') | abs(g_`fun' - `fun') < `tol'
114.             if ( _rc ) {
115.                 di as err "    compare_gegen_gcollapse_ifin (failed): `fun' yielded different results (tol = `tol')"
116.                 exit _rc
117.             }
118.             else di as txt "    compare_gegen_gcollapse_ifin (passed): `fun' yielded same results (tol = `tol')"
119.         }
120.         else di as txt "    compare_gegen_gcollapse_ifin (passed): `fun' yielded same results (tol = `tol')"
121.     }
122. end

. ***********************************************************************
. *                           Data simulation                           *
. ***********************************************************************
. 
. capture program drop bench_sim

. program bench_sim
  1.     syntax, [n(int 100) nj(int 10) njsub(int 2) nvars(int 2)]
  2.     local offset = -123456
  3. 
.     clear
  4.     set obs `n'
  5.     gen group  = ceil(`nj' *  _n / _N) + `offset'
  6.     gen long grouplong = ceil(`nj' *  _n / _N) + `offset'
  7.     bys group: gen groupsub      = ceil(`njsub' *  _n / _N)
  8.     bys group: gen groupsubfloat = ceil(`njsub' *  _n / _N) + 0.5
  9.     tostring group, gen(groupstr)
 10.     replace groupstr = "i am a modestly long string" + groupstr
 11. 
.     forvalues i = 1 / `nvars' {
 12.         gen x`i' = rnormal()
 13.     }
 14.     gen rsort = runiform() - 0.5
 15.     sort rsort
 16. 
.     replace group = . if runiform() < 0.1
 17.     replace rsort = . if runiform() < 0.1
 18. end

. 
. capture program drop bench_sim_ftools

. program bench_sim_ftools
  1.     args n k
  2.     clear
  3.     qui set obs `n'
  4.     noi di "(obs set)"
  5.     loc m = ceil(`n' / 10)
  6.     gen long x1  = ceil(uniform() * 10000) * 100
  7.     gen int  x2  = ceil(uniform() * 3000)
  8.     gen byte x3  = ceil(uniform() * 100)
  9.     gen str  x4  = "u" + string(ceil(uniform() * 100), "%5.0f")
 10.     gen long x5  = ceil(uniform() * 5000)
 11.     gen str  x6  = "u" + string(ceil(uniform() * 10), "%5.0f")
 12.     noi di "(Xs set)"
 13.     forv i = 1 / `k' {
 14.         gen double y`i' = 123.456 + runiform()
 15.     }
 16.     loc obs_k = ceil(`c(N)' / 1000)
 17. end

. 
. ***********************************************************************
. *                       ftools-style benchmarks                       *
. ***********************************************************************
. 
. capture program drop bench_ftools

. program bench_ftools
  1.     syntax anything, by(str) [kvars(int 5) stats(str) kmin(int 4) kmax(int 7) *]
  2.     if ("`stats'" == "") local stats sum
  3. 
.     local collapse ""
  4.     foreach stat of local stats {
  5.         local collapse `collapse' (`stat')
  6.         foreach var of local anything {
  7.             local collapse `collapse' `stat'_`var' = `var'
  8.         }
  9.     }
 10. 
.     * First set of benchmarks: default vs collapse, fcollapse
.     * -------------------------------------------------------
. 
.     local i = 0
 11.     local N ""
 12.     di "Benchmarking N for J = 100; by(`by')"
 13.     di "    vars  = `anything'"
 14.     di "    stats = `stats'"
 15.     forvalues k = `kmin' / `kmax' {
 16.         mata: printf("    `:di %21.0gc `:di 2 * 10^`k'''")
 17.         local N `N' `:di %21.0g 2 * 10^`k''
 18.         qui bench_sim_ftools `:di %21.0g 2 * 10^`k'' `kvars'
 19.         preserve
 20.             local ++i
 21.             timer clear
 22.             timer on `i'
 23.             mata: printf(" gcollapse ")
 24.                 qui gcollapse `collapse', by(`by')
 25.             timer off `i'
 26.             qui timer list
 27.             local r`i' = `r(t`i')'
 28.             mata: printf(" (`r`i'') ")
 29.         restore, preserve
 30.             local ++i
 31.             timer clear
 32.             timer on `i'
 33.             mata: printf(" collapse ")
 34.                 qui collapse `collapse', by(`by')
 35.             timer off `i'
 36.             qui timer list
 37.             local r`i' = `r(t`i')'
 38.             mata: printf(" (`r`i'') ")
 39.         restore, preserve
 40.             local ++i
 41.             timer clear
 42.             timer on `i'
 43.             mata: printf(" fcollapse ")
 44.                 qui fcollapse `collapse', by(`by')
 45.             timer off `i'
 46.             qui timer list
 47.             local r`i' = `r(t`i')'
 48.             mata: printf(" (`r`i'')\n")
 49.         restore
 50.     }
 51. 
.     local i = 1
 52.     di "Results varying N for J = 100; by(`by')"
 53.     di "|              N | gcollapse |  collapse | fcollapse | ratio (f/g) | ratio (c/g) |"
 54.     di "| -------------- | --------- | --------- | --------- | ----------- | ----------- |"
 55.     foreach nn in `N' {
 56.         local ii  = `i' + 1
 57.         local iii = `i' + 2
 58.         di "| `:di %14.0gc `nn'' | `:di %9.2f `r`i''' | `:di %9.2f `r`ii''' | `:di %9.2f `r`iii''' | `:di %11.2f `r`iii'' /
>  `r`i''' | `:di %11.2f `r`ii'' / `r`i''' |"
 59.         local ++i
 60.         local ++i
 61.         local ++i
 62.     }
 63.     timer clear
 64. end

. 
. ***********************************************************************
. *                             benchmarks                              *
. ***********************************************************************
. 
. capture program drop bench_sample_size

. program bench_sample_size
  1.     syntax anything, by(str) [nj(int 10) pct(str) stats(str) kmin(int 4) kmax(int 7) *]
  2.     * NOTE: sometimes, fcollapse can't do sd
.     if ("`stats'" == "") local stats sum mean max min count percent first last firstnm lastnm
  3.     local stats `stats' `pct'
  4. 
.     local collapse ""
  5.     foreach stat of local stats {
  6.         local collapse `collapse' (`stat')
  7.         foreach var of local anything {
  8.             local collapse `collapse' `stat'_`var' = `var'
  9.         }
 10.     }
 11. 
.     * First set of benchmarks: default vs collapse, fcollapse
.     * -------------------------------------------------------
. 
.     local i = 0
 12.     local N ""
 13.     di "Benchmarking N for J = `nj'; by(`by')"
 14.     di "    vars  = `anything'"
 15.     di "    stats = `stats'"
 16.     forvalues k = `kmin' / `kmax' {
 17.         mata: printf("    `:di %21.0gc `:di 2 * 10^`k'''")
 18.         local N `N' `:di %21.0g 2 * 10^`k''
 19.         qui bench_sim, n(`:di %21.0g 2 * 10^`k'') nj(`nj') njsub(2) nvars(2)
 20.         preserve
 21.             local ++i
 22.             timer clear
 23.             timer on `i'
 24.             mata: printf(" gcollapse ")
 25.                 qui gcollapse `collapse', by(`by')
 26.             timer off `i'
 27.             qui timer list
 28.             local r`i' = `r(t`i')'
 29.             mata: printf(" (`r`i'') ")
 30.         restore, preserve
 31.             local ++i
 32.             timer clear
 33.             timer on `i'
 34.             mata: printf(" collapse ")
 35.                 qui collapse `collapse', by(`by')
 36.             timer off `i'
 37.             qui timer list
 38.             local r`i' = `r(t`i')'
 39.             mata: printf(" (`r`i'') ")
 40.         restore, preserve
 41.             local ++i
 42.             timer clear
 43.             timer on `i'
 44.             mata: printf(" fcollapse ")
 45.                 qui fcollapse `collapse', by(`by')
 46.             timer off `i'
 47.             qui timer list
 48.             local r`i' = `r(t`i')'
 49.             mata: printf(" (`r`i'')\n")
 50.         restore
 51.     }
 52. 
.     local i = 1
 53.     di "Results varying N for J = `nj'; by(`by')"
 54.     di "|              N | gcollapse |  collapse | fcollapse | ratio (f/g) | ratio (c/g) |"
 55.     di "| -------------- | --------- | --------- | --------- | ----------- | ----------- |"
 56.     foreach nn in `N' {
 57.         local ii  = `i' + 1
 58.         local iii = `i' + 2
 59.         di "| `:di %14.0gc `nn'' | `:di %9.2f `r`i''' | `:di %9.2f `r`ii''' | `:di %9.2f `r`iii''' | `:di %11.2f `r`iii'' /
>  `r`i''' | `:di %11.2f `r`ii'' / `r`i''' |"
 60.         local ++i
 61.         local ++i
 62.         local ++i
 63.     }
 64.     timer clear
 65. end

. 
. capture program drop bench_group_size

. program bench_group_size
  1.     syntax anything, by(str) [pct(str) stats(str) obsexp(int 6) kmin(int 1) kmax(int 6) *]
  2.     * NOTE: fcollapse can't do sd, apparently
.     if ("`stats'" == "") local stats sum mean max min count percent first last firstnm lastnm
  3.     local stats `stats' `pct'
  4. 
.     local collapse ""
  5.     foreach stat of local stats {
  6.         local collapse `collapse' (`stat')
  7.         foreach var of local anything {
  8.             local collapse `collapse' `stat'_`var' = `var'
  9.         }
 10.     }
 11. 
.     * First set of benchmarks: default vs collapse, fcollapse
.     * -------------------------------------------------------
. 
.     local nstr = trim("`:di %21.0gc `:di 5 * 10^`obsexp'''")
 12.     local i = 0
 13.     local N ""
 14.     di "Benchmarking J for N = `nstr'; by(`by')"
 15.     di "    vars  = `anything'"
 16.     di "    stats = `stats'"
 17.     forvalues k = `kmin' / `kmax' {
 18.         mata: printf("    `:di %21.0gc `:di 10^`k'''")
 19.         local N `N' `:di %21.0g 10^`k''
 20.         qui bench_sim, n(`:di %21.0g 5 * 10^`obsexp'') nj(`:di %21.0g 10^`k'') njsub(2) nvars(2)
 21.         preserve
 22.             local ++i
 23.             timer clear
 24.             timer on `i'
 25.             mata: printf(" gcollapse ")
 26.                 qui gcollapse `collapse', by(`by')
 27.             timer off `i'
 28.             qui timer list
 29.             local r`i' = `r(t`i')'
 30.             mata: printf(" (`r`i'') ")
 31.         restore, preserve
 32.             local ++i
 33.             timer clear
 34.             timer on `i'
 35.             mata: printf(" collapse ")
 36.                 qui collapse `collapse', by(`by')
 37.             timer off `i'
 38.             qui timer list
 39.             local r`i' = `r(t`i')'
 40.             mata: printf(" (`r`i'') ")
 41.         restore, preserve
 42.             local ++i
 43.             timer clear
 44.             timer on `i'
 45.             mata: printf(" fcollapse ")
 46.                 qui fcollapse `collapse', by(`by')
 47.             timer off `i'
 48.             qui timer list
 49.             local r`i' = `r(t`i')'
 50.             mata: printf(" (`r`i'')\n")
 51.         restore
 52.     }
 53. 
.     local i = 1
 54.     di "Results varying J for N = `nstr'; by(`by')"
 55.     di "|              J | gcollapse |  collapse | fcollapse | ratio (f/g) | ratio (c/g) |"
 56.     di "| -------------- | --------- | --------- | --------- | ----------- | ----------- |"
 57.     foreach nn in `N' {
 58.         local ii  = `i' + 1
 59.         local iii = `i' + 2
 60.         di "| `:di %14.0gc `nn'' | `:di %9.2f `r`i''' | `:di %9.2f `r`ii''' | `:di %9.2f `r`iii''' | `:di %11.2f `r`iii'' /
>  `r`i''' | `:di %11.2f `r`ii'' / `r`i''' |"
 61.         local ++i
 62.         local ++i
 63.         local ++i
 64.     }
 65.     timer clear
 66. end

. 
. ***********************************************************************
. *                      Benchmark fcollapse only                       *
. ***********************************************************************
. 
. capture program drop bench_switch_fcoll

. program bench_switch_fcoll
  1.     syntax anything, style(str) [*]
  2.     if !inlist("`style'", "ftools", "gtools") {
  3.         di as error "Don't know benchmark style '`style''; available: ftools, gtools"
  4.         exit 198
  5.     }
  6. 
.     local 0 `anything', `options'
  7.     if ( "`style'" == "ftools" ) {
  8.         syntax anything, by(str) [kvars(int 5) stats(str) kmin(int 4) kmax(int 7) *]
  9.         if ("`stats'" == "") local stats sum
 10.         local i = 0
 11.         local N ""
 12.         local L N
 13.         local dstr J = 100
 14.         di "Benchmarking `L' for `dstr'; by(`by')"
 15.         di "    vars  = `anything'"
 16.         di "    stats = `stats'"
 17. 
.         mata: print_matrix = J(1, 0, "")
 18.         mata: sim_matrix   = J(1, 0, "")
 19.         forvalues k = `kmin' / `kmax' {
 20.             mata: print_matrix = print_matrix, "    `:di %21.0gc `:di 2 * 10^`k'''"
 21.             mata: sim_matrix   = sim_matrix,   "bench_sim_ftools `:di %21.0g 2 * 10^`k'' `kvars'"
 22.             local N `N' `:di %21.0g 2 * 10^`k''
 23.         }
 24.     }
 25.     else {
 26.         * syntax anything, by(str) [margin(str) nj(int 10) pct(str) stats(str) obsexp(int 6) kmin(int 1) kmax(int 6) *]
.         syntax anything, by(str) [margin(str) nj(int 10) pct(str) stats(str) obsexp(int 6) kmin(int 4) kmax(int 7) nvars(int 2
> ) *]
 27.         if !inlist("`margin'", "N", "J") {
 28.             di as error "Don't know margin '`margin''; available: N, J"
 29.             exit 198
 30.         }
 31. 
.         if ("`stats'" == "") local stats sum mean max min count percent first last firstnm lastnm
 32.         local stats `stats' `pct'
 33.         local i = 0
 34.         local N ""
 35.         local L `margin'
 36.         local jstr = trim("`:di %21.0gc `nj''")
 37.         local nstr = trim("`:di %21.0gc `:di 5 * 10^`obsexp'''")
 38.         local dstr = cond("`L'" == "N", "J = `jstr'", "N = `nstr'")
 39.         di "Benchmarking `L' for `dstr'; by(`by')"
 40.         di "    vars  = `anything'"
 41.         di "    stats = `stats'"
 42. 
.         mata: print_matrix = J(1, 0, "")
 43.         mata: sim_matrix   = J(1, 0, "")
 44.         forvalues k = `kmin' / `kmax' {
 45.             if ( "`L'" == "N" ) {
 46.                 mata: print_matrix = print_matrix, "    `:di %21.0gc `:di 2 * 10^`k'''"
 47.                 mata: sim_matrix   = sim_matrix, "bench_sim, n(`:di %21.0g 2 * 10^`k'') nj(`nj') njsub(2) nvars(`nvars')"
 48.             }
 49.             else {
 50.                 mata: print_matrix = print_matrix, "    `:di %21.0gc `:di 10^`k'''"
 51.                 mata: sim_matrix   = sim_matrix, "bench_sim, n(`:di %21.0g 5 * 10^`obsexp'') nj(`:di %21.0g 10^`k'') njsub(
> 2) nvars(`nvars')"
 52.             }
 53.             local J `J' `:di %21.0g 10^`k''
 54.             local N `N' `:di %21.0g 2 * 10^`k''
 55.         }
 56.     }
 57. 
.     local collapse ""
 58.     foreach stat of local stats {
 59.         local collapse `collapse' (`stat')
 60.         foreach var of local anything {
 61.             local collapse `collapse' `stat'_`var' = `var'
 62.         }
 63.     }
 64. 
.     forvalues k = 1 / `:di `kmax' - `kmin' + 1' {
 65.         mata: st_local("sim",   sim_matrix[`k'])
 66.         qui `sim'
 67.         mata: printf(print_matrix[`k'])
 68.         preserve
 69.             local ++i
 70.             timer clear
 71.             timer on `i'
 72.             mata: printf(" gcollapse-default ")
 73.                 qui gcollapse `collapse', by(`by') `options' fast
 74.             timer off `i'
 75.             qui timer list
 76.             local r`i' = `r(t`i')'
 77.             mata: printf(" (`r`i'') ")
 78.         restore, preserve
 79.             local ++i
 80.             timer clear
 81.             timer on `i'
 82.             mata: printf(" fcollapse ")
 83.                 qui fcollapse `collapse', by(`by') fast
 84.             timer off `i'
 85.             qui timer list
 86.             local r`i' = `r(t`i')'
 87.             mata: printf(" (`r`i'') \n")
 88.         restore
 89.     }
 90. 
.     local i = 1
 91.     di "Results varying `L' for `dstr'; by(`by')"
 92.     di "|              `L' | gcollapse | fcollapse | ratio (f/g) |"
 93.     di "| -------------- | --------- | --------- | ----------- |"
 94.     foreach nn in ``L'' {
 95.         local ii  = `i' + 1
 96.         di "| `:di %14.0gc `nn'' | `:di %9.2f `r`i''' | `:di %9.2f `r`ii''' | `:di %11.2f `r`ii'' / `r`i''' |"
 97.         local ++i
 98.         local ++i
 99.     }
100.     timer clear
101. end

. 
. * Benchmarks in the README
. * ------------------------
. 
. * bench_ftools y1 y2 y3 y4 y5 y6 y7 y8 y9 y10 y11 y12 y13 y14 y15, by(x3) kmin(4) kmax(7) kvars(15)
. * bench_ftools y1 y2 y3,   by(x3) kmin(4) kmax(7) kvars(3) stats(mean median)
. * bench_ftools y1 y2 y3 y4 y5 y6 y7 y8 y9 y10, by(x3) kmin(4) kmax(7) kvars(10) stats(mean median min max)
. * bench_sample_size x1 x2, by(groupstr) kmin(4) kmax(7) pct(median iqr p23 p77)
. * bench_group_size x1 x2,  by(groupstr) kmin(1) kmax(6) pct(median iqr p23 p77) obsexp(6) 
. 
. * Misc
. * ----
. 
. * bench_ftools y1 y2 y3 y4 y5 y6 y7 y8 y9 y10 y11 y12 y13 y14 y15, by(x3) kmin(5) kmax(8) kvars(15)
. * bench_ftools y1 y2 y3,   by(x3) kmin(5) kmax(8) kvars(3) stats(mean median)
. * bench_ftools y1 y2 y3 y4 y5 y6 y7 y8 y9 y10, by(x3) kmin(5) kmax(8) kvars(10) stats(mean median min max)
. * bench_sample_size x1 x2, by(groupstr) kmin(5) kmax(8) pct(median iqr p23 p77)
. * bench_group_size x1 x2,  by(groupstr) kmin(1) kmax(7) pct(median iqr p23 p77) obsexp(7)
. 
. * ---------------------------------------------------------------------
. * Run the things
. 
. main, checks test
Start: 12:43:20 12 Sep 2017

-------------------------------------
Basic unit-tests 12:43:20 12 Sep 2017
-------------------------------------
    test(passed): checks_byvars_gcollapse, oncollision(error) debug_force_single
    test(passed): checks_byvars_gcollapse, oncollision(error) forceio debug_io_read_method(0)
    test(passed): checks_byvars_gcollapse, oncollision(error) forceio debug_io_read_method(1)
    test(passed): checks_options_gcollapse, oncollision(error) debug_force_single
    test(passed): checks_options_gcollapse, oncollision(error) debug_io_read_method(0)
    test(passed): checks_options_gcollapse, oncollision(error) debug_io_read_method(1)
    test(passed): checks_byvars_gcollapse, oncollision(error) debug_force_multi
    test(passed): checks_options_gcollapse, oncollision(error) debug_force_multi

-----------------------------------------------------------
Consistency checks (vs collapse, egen) 12:43:21 12 Sep 2017
-----------------------------------------------------------

--------------------------------------------------------------------------------
consistency_gcollapse, oncollision(error)
--------------------------------------------------------------------------------


Comparing collapse for N = 50,000 with J1 = 8 and J2 = 4
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr groupsubstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

Comparing collapse for N = 50,000 with J1 = 8,000 and J2 = 4
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

Comparing collapse for N = 50,000 with J1 = 8,000 and J2 = 4 (if in)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

--------------------------------------------------------------------------------
consistency_gcollapse, oncollision(error) forceio debug_io_read_method(0)
--------------------------------------------------------------------------------


Comparing collapse for N = 50,000 with J1 = 8 and J2 = 4
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr groupsubstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

Comparing collapse for N = 50,000 with J1 = 8,000 and J2 = 4
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

Comparing collapse for N = 50,000 with J1 = 8,000 and J2 = 4 (if in)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

--------------------------------------------------------------------------------
consistency_gcollapse, oncollision(error) forceio debug_io_read_method(1)
--------------------------------------------------------------------------------


Comparing collapse for N = 50,000 with J1 = 8 and J2 = 4
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr groupsubstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

Comparing collapse for N = 50,000 with J1 = 8,000 and J2 = 4
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

Comparing collapse for N = 50,000 with J1 = 8,000 and J2 = 4 (if in)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

--------------------------------------------------------------------------------
consistency_gcollapse, oncollision(error) debug_io_check(1) debug_io_threshold(0)
--------------------------------------------------------------------------------


Comparing collapse for N = 50,000 with J1 = 8 and J2 = 4
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr groupsubstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

Comparing collapse for N = 50,000 with J1 = 8,000 and J2 = 4
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

Comparing collapse for N = 50,000 with J1 = 8,000 and J2 = 4 (if in)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

--------------------------------------------------------------------------------
consistency_gcollapse, oncollision(error) debug_io_check(1) debug_io_threshold(1000000)
--------------------------------------------------------------------------------


Comparing collapse for N = 50,000 with J1 = 8 and J2 = 4
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr groupsubstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

Comparing collapse for N = 50,000 with J1 = 8,000 and J2 = 4
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

Comparing collapse for N = 50,000 with J1 = 8,000 and J2 = 4 (if in)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

--------------------------------------------------------------------------------
consistency_gcollapse, oncollision(error) debug_force_single
--------------------------------------------------------------------------------


Comparing collapse for N = 50,000 with J1 = 8 and J2 = 4
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr groupsubstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

Comparing collapse for N = 50,000 with J1 = 8,000 and J2 = 4
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

Comparing collapse for N = 50,000 with J1 = 8,000 and J2 = 4 (if in)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

--------------------------------------------------------------------------------
consistency_gegen, oncollision(error) debug_force_single
--------------------------------------------------------------------------------


Checking full egen range
    compare_egen (passed): gegen total results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen sum results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen mean results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen sd results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen max results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen min results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen count results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen median results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen iqr results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen percentile 1 results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen percentile 10 results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen percentile 30 results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen percentile 50 results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen percentile 70 results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen percentile 90 results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen percentile 99 results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen tag results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen group IDs correctly map to egen IDs
Checking egen if range
    compare_egen_if (passed): gegen total results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen sum results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen mean results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen sd results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen max results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen min results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen count results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen median results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen iqr results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen percentile 1 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen percentile 10 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen percentile 30 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen percentile 50 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen percentile 70 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen percentile 90 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen percentile 99 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen tag results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen group IDs correctly map to egen IDs
Checking egen in range
    compare_egen_in (passed): gegen total results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen sum results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen mean results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen sd results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen max results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen min results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen count results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen median results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen iqr results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen percentile 1 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen percentile 10 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen percentile 30 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen percentile 50 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen percentile 70 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen percentile 90 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen percentile 99 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen tag results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen group IDs correctly map to egen IDs
Checking egen if in range
    compare_egen_ifin (passed): gegen total results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen sum results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen mean results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen sd results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen max results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen min results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen count results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen median results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen iqr results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen percentile 1 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen percentile 10 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen percentile 30 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen percentile 50 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen percentile 70 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen percentile 90 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen percentile 99 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen tag results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen group IDs correctly map to egen IDs

--------------------------------------------------------------------------------
consistency_gegen_gcollapse, oncollision(error) debug_force_single
--------------------------------------------------------------------------------


Checking gegen vs gcollapse full range
    compare_gegen_gcollapse (passed): mean yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): sum yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): median yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): sd yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): iqr yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): first yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): last yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): firstnm yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): lastnm yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): q10 yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): q30 yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): q70 yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): q90 yielded same results (tol = 1.00000000000e-06)

Checking gegen vs gcollapse in range
    compare_gegen_gcollapse_in (passed): mean yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): sum yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): median yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): sd yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): iqr yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): first yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): last yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): firstnm yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): lastnm yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): q10 yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): q30 yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): q70 yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): q90 yielded same results (tol = 1.00000000000e-06)

Checking gegen vs gcollapse if in range
    compare_gegen_gcollapse_ifin (passed): mean yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): sum yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): median yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): sd yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): iqr yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): first yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): last yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): firstnm yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): lastnm yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): q10 yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): q30 yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): q70 yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): q90 yielded same results (tol = 1.00000000000e-06)

--------------------------------------------------------------------------------
consistency_gcollapse, oncollision(error) debug_force_multi
--------------------------------------------------------------------------------


Comparing collapse for N = 50,000 with J1 = 8 and J2 = 4
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr groupsubstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

Comparing collapse for N = 50,000 with J1 = 8,000 and J2 = 4
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

Comparing collapse for N = 50,000 with J1 = 8,000 and J2 = 4 (if in)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupstr)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, groupsub group)
    compare_collapse (passed): gcollapse results equal to collapse (tol = 1.00000000000e-06, grouplong)

--------------------------------------------------------------------------------
consistency_gegen, oncollision(error) debug_force_multi
--------------------------------------------------------------------------------


Checking full egen range
    compare_egen (passed): gegen total results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen sum results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen mean results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen sd results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen max results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen min results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen count results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen median results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen iqr results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen percentile 1 results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen percentile 10 results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen percentile 30 results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen percentile 50 results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen percentile 70 results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen percentile 90 results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen percentile 99 results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen tag results similar to egen (tol = 1.00000000000e-06)
    compare_egen (passed): gegen group IDs correctly map to egen IDs
Checking egen if range
    compare_egen_if (passed): gegen total results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen sum results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen mean results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen sd results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen max results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen min results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen count results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen median results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen iqr results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen percentile 1 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen percentile 10 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen percentile 30 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen percentile 50 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen percentile 70 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen percentile 90 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen percentile 99 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen tag results similar to egen (tol = 1.00000000000e-06)
    compare_egen_if (passed): gegen group IDs correctly map to egen IDs
Checking egen in range
    compare_egen_in (passed): gegen total results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen sum results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen mean results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen sd results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen max results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen min results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen count results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen median results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen iqr results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen percentile 1 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen percentile 10 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen percentile 30 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen percentile 50 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen percentile 70 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen percentile 90 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen percentile 99 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen tag results similar to egen (tol = 1.00000000000e-06)
    compare_egen_in (passed): gegen group IDs correctly map to egen IDs
Checking egen if in range
    compare_egen_ifin (passed): gegen total results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen sum results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen mean results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen sd results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen max results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen min results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen count results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen median results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen iqr results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen percentile 1 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen percentile 10 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen percentile 30 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen percentile 50 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen percentile 70 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen percentile 90 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen percentile 99 results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen tag results similar to egen (tol = 1.00000000000e-06)
    compare_egen_ifin (passed): gegen group IDs correctly map to egen IDs

--------------------------------------------------------------------------------
consistency_gegen_gcollapse, oncollision(error) debug_force_multi
--------------------------------------------------------------------------------


Checking gegen vs gcollapse full range
    compare_gegen_gcollapse (passed): mean yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): sum yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): median yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): sd yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): iqr yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): first yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): last yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): firstnm yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): lastnm yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): q10 yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): q30 yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): q70 yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse (passed): q90 yielded same results (tol = 1.00000000000e-06)

Checking gegen vs gcollapse in range
    compare_gegen_gcollapse_in (passed): mean yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): sum yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): median yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): sd yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): iqr yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): first yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): last yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): firstnm yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): lastnm yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): q10 yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): q30 yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): q70 yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_in (passed): q90 yielded same results (tol = 1.00000000000e-06)

Checking gegen vs gcollapse if in range
    compare_gegen_gcollapse_ifin (passed): mean yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): sum yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): median yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): sd yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): iqr yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): first yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): last yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): firstnm yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): lastnm yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): q10 yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): q30 yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): q70 yielded same results (tol = 1.00000000000e-06)
    compare_gegen_gcollapse_ifin (passed): q90 yielded same results (tol = 1.00000000000e-06)
Short (quick) versions of the benchmarks
Benchmarking N for J = 100; by(x3)
    vars  = y1 y2 y3 y4 y5 y6 y7 y8 y9 y10 y11 y12 y13 y14 y15
    stats = sum
                    2,000 gcollapse  (.024)  collapse  (.015)  fcollapse  (.037)
                   20,000 gcollapse  (.032)  collapse  (.1)  fcollapse  (.028)
Results varying N for J = 100; by(x3)
|              N | gcollapse |  collapse | fcollapse | ratio (f/g) | ratio (c/g) |
| -------------- | --------- | --------- | --------- | ----------- | ----------- |
|          2,000 |      0.02 |      0.01 |      0.04 |        1.54 |        0.62 |
|         20,000 |      0.03 |      0.10 |      0.03 |        0.88 |        3.12 |
Benchmarking N for J = 100; by(x3)
    vars  = y1 y2 y3
    stats = mean median
                    2,000 gcollapse  (.01)  collapse  (.016)  fcollapse  (.007)
                   20,000 gcollapse  (.016)  collapse  (.148)  fcollapse  (.029)
Results varying N for J = 100; by(x3)
|              N | gcollapse |  collapse | fcollapse | ratio (f/g) | ratio (c/g) |
| -------------- | --------- | --------- | --------- | ----------- | ----------- |
|          2,000 |      0.01 |      0.02 |      0.01 |        0.70 |        1.60 |
|         20,000 |      0.02 |      0.15 |      0.03 |        1.81 |        9.25 |
Benchmarking N for J = 100; by(x3)
    vars  = y1 y2 y3 y4 y5 y6
    stats = sum mean count min max
                    2,000 gcollapse  (.032)  collapse  (.036)  fcollapse  (.014)
                   20,000 gcollapse  (.039)  collapse  (.378)  fcollapse  (.035)
Results varying N for J = 100; by(x3)
|              N | gcollapse |  collapse | fcollapse | ratio (f/g) | ratio (c/g) |
| -------------- | --------- | --------- | --------- | ----------- | ----------- |
|          2,000 |      0.03 |      0.04 |      0.01 |        0.44 |        1.12 |
|         20,000 |      0.04 |      0.38 |      0.04 |        0.90 |        9.69 |
Benchmarking N for J = 10; by(group)
    vars  = x1 x2
    stats = sum mean max min count percent first last firstnm lastnm median iqr p23 p77
                    2,000 gcollapse  (.03)  collapse  (.078)  fcollapse  (.015)
                   20,000 gcollapse  (.039)  collapse  (1.322)  fcollapse  (.064)
Results varying N for J = 10; by(group)
|              N | gcollapse |  collapse | fcollapse | ratio (f/g) | ratio (c/g) |
| -------------- | --------- | --------- | --------- | ----------- | ----------- |
|          2,000 |      0.03 |      0.08 |      0.01 |        0.50 |        2.60 |
|         20,000 |      0.04 |      1.32 |      0.06 |        1.64 |       33.90 |
Benchmarking J for N = 5,000; by(group)
    vars  = x1 x2
    stats = sum mean max min count percent first last firstnm lastnm median iqr p23 p77
                      100 gcollapse  (.031)  collapse  (.208)  fcollapse  (.023)
                    1,000 gcollapse  (.034)  collapse  (.275)  fcollapse  (.053)
Results varying J for N = 5,000; by(group)
|              J | gcollapse |  collapse | fcollapse | ratio (f/g) | ratio (c/g) |
| -------------- | --------- | --------- | --------- | ----------- | ----------- |
|            100 |      0.03 |      0.21 |      0.02 |        0.74 |        6.71 |
|          1,000 |      0.03 |      0.28 |      0.05 |        1.56 |        8.09 |
Benchmarking N for J = 100; by(x3)
    vars  = y1 y2 y3 y4 y5 y6 y7 y8 y9 y10 y11 y12 y13 y14 y15
    stats = sum
                    2,000 gcollapse-default  (.022)  fcollapse  (.008) 
                   20,000 gcollapse-default  (.029)  fcollapse  (.027) 
Results varying N for J = 100; by(x3)
|              N | gcollapse | fcollapse | ratio (f/g) |
| -------------- | --------- | --------- | ----------- |
|          2,000 |      0.02 |      0.01 |        0.36 |
|         20,000 |      0.03 |      0.03 |        0.93 |
Benchmarking N for J = 100; by(x3)
    vars  = y1 y2 y3
    stats = mean median
                    2,000 gcollapse-default  (.01)  fcollapse  (.006) 
                   20,000 gcollapse-default  (.015)  fcollapse  (.028) 
Results varying N for J = 100; by(x3)
|              N | gcollapse | fcollapse | ratio (f/g) |
| -------------- | --------- | --------- | ----------- |
|          2,000 |      0.01 |      0.01 |        0.60 |
|         20,000 |      0.01 |      0.03 |        1.87 |
Benchmarking N for J = 100; by(x3)
    vars  = y1 y2 y3 y4 y5 y6
    stats = sum mean count min max
                    2,000 gcollapse-default  (.032)  fcollapse  (.015) 
                   20,000 gcollapse-default  (.038)  fcollapse  (.032) 
Results varying N for J = 100; by(x3)
|              N | gcollapse | fcollapse | ratio (f/g) |
| -------------- | --------- | --------- | ----------- |
|          2,000 |      0.03 |      0.01 |        0.47 |
|         20,000 |      0.04 |      0.03 |        0.84 |
Benchmarking N for J = 10; by(group)
    vars  = x1 x2
    stats = sum mean max min count percent first last firstnm lastnm median iqr p23 p77
                    2,000 gcollapse-default  (.054)  fcollapse  (.017) 
                   20,000 gcollapse-default  (.038)  fcollapse  (.06) 
Results varying N for J = 10; by(group)
|              N | gcollapse | fcollapse | ratio (f/g) |
| -------------- | --------- | --------- | ----------- |
|          2,000 |      0.05 |      0.02 |        0.31 |
|         20,000 |      0.04 |      0.06 |        1.58 |
Benchmarking J for N = 5,000; by(group)
    vars  = x1 x2
    stats = sum mean max min count percent first last firstnm lastnm median iqr p23 p77
                      100 gcollapse-default  (.03)  fcollapse  (.024) 
                    1,000 gcollapse-default  (.031)  fcollapse  (.051) 
Results varying J for N = 5,000; by(group)
|              J | gcollapse | fcollapse | ratio (f/g) |
| -------------- | --------- | --------- | ----------- |
|            100 |      0.03 |      0.02 |        0.80 |
|          1,000 |      0.03 |      0.05 |        1.65 |

End: 12:53:43 12 Sep 2017
tests ran

tests finished running

Start: 12:43:20 12 Sep 2017
End: 12:53:43 12 Sep 2017

. 
end of do-file
